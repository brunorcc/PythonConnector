//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.CodeDom.Compiler;
using System.IO;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Primavera.Hydrogen;
using Primavera.Hydrogen.AspNetCore.Azure.Configuration;
using Primavera.Hydrogen.Security.Azure.Secrets;

namespace Primavera.Lithium.PythonConnector.WebApi
{
    #region Code

    #region Public Classes

    /// <summary>
    /// Defines the starting point of the application.
    /// </summary>
    [GeneratedCode("Lithium", "2.0")]
    public static class Program
    {
        #region Code

        #region Public Methods

        /// <summary>
        /// Executes the application.
        /// </summary>
        /// <param name="args">The arguments.</param>
        public static void Main(string[] args)
        {
            // Create the host builder

            HostBuilder builder = new HostBuilder();

            // Build the host

            IHost host = builder.Build(args);

            // Run

            host.Run();
        }

        #endregion

        #endregion
    }

    #endregion

    #region Internal Classes

    /// <summary>
    /// Defines the base class for the host builder.
    /// </summary>
    [GeneratedCode("Lithium", "2.0")]
    internal abstract partial class HostBuilderBase
    {
        #region Code

        #region Protected Properties

        /// <summary>
        /// Gets a value indicating whether startup errors should be captured. The default value is false.
        /// </summary>
        protected virtual bool CaptureStartupErrors
        {
            get
            {
                return false;
            }
        }

        /// <summary>
        /// Gets a value indicating whether development settings should be used regardless of the current environment. The default value is false.
        /// </summary>
        protected virtual bool UseDevelopmentSettings
        {
            get
            {
                return false;
            }
        }

        #endregion

        #region Protected Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="HostBuilderBase" /> class.
        /// </summary>
        protected HostBuilderBase()        
        {
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Builds the <see cref="IHost" /> instance.
        /// </summary>
        /// <param name="args">The arguments.</param>
        /// <returns>
        /// The <see cref="IHost" /> instance.
        /// </returns>
        public virtual IHost Build(string[] args)
        {
            // Create the builder

            IHostBuilder builder = Host.CreateDefaultBuilder(args)
                .UseContentRoot(Directory.GetCurrentDirectory());

            // Setup host configuration

            builder = builder.ConfigureHostConfiguration(this.ConfigureHostConfiguration);

            // Setup application configuration

            builder = builder.ConfigureAppConfiguration(this.ConfigureAppConfiguration);

            // Setup logging

            builder = builder.ConfigureLogging(this.ConfigureLogging);

            // Setup Web host defaults

            builder = builder.ConfigureWebHostDefaults(this.ConfigureWebHostDefaults);

            // Result

            return builder.Build();
        }

        #endregion

        #region Protected Methods

        /// <summary>
        /// Configures the application configuration.
        /// </summary>
        /// <param name="context">The host builder context.</param>
        /// <param name="builder">The configuration builder.</param>
        protected virtual void ConfigureAppConfiguration(HostBuilderContext context, IConfigurationBuilder builder)
        {
            // Environment

            IHostEnvironment env = context.HostingEnvironment;

            // Normalize environment name
            // NOTE: File names are case sensitive in Linux

            string environmentName = env.EnvironmentName.Transform().ToLowerCase();

            // JSON configuration

            builder
                .AddJsonFile($"GeneratedCode/appsettings.gen.json", optional: false, reloadOnChange: true)
                .AddJsonFile($"CustomCode/appsettings.json", optional: true, reloadOnChange: true)
                .AddJsonFile($"GeneratedCode/appsettings-{environmentName}.gen.json", optional: true, reloadOnChange: true)
                .AddJsonFile($"CustomCode/appsettings-{environmentName}.json", optional: true, reloadOnChange: true);

            // Environment variables configuration

            builder
                .AddEnvironmentVariables();

            // Secrets storage

            builder
                .AddAzureSecretsStorage();

            // Azure configuration

            builder.
                AddAzureConfiguration();
        }

        /// <summary>
        /// Configures logging.
        /// </summary>
        /// <param name="context">The host builder context.</param>
        /// <param name="builder">The logging builder.</param>
        protected virtual void ConfigureLogging(HostBuilderContext context, ILoggingBuilder builder)
        {
            // Clear default providers

            builder
                .ClearProviders();

            // Configuration

            builder
                .AddConfiguration(context.Configuration.GetSection("Logging"));

            // Console and debug

            bool useDevelopmentSettings = this.UseDevelopmentSettings || context.HostingEnvironment.IsDevelopment();

            if (useDevelopmentSettings)
            {
                builder
                    .AddConsole()
                    .AddDebug();
            }
        }

        /// <summary>
        /// Configures the host configuration.
        /// </summary>
        /// <param name="builder">The configuration builder.</param>
        protected virtual void ConfigureHostConfiguration(IConfigurationBuilder builder)
        {
        }

        /// <summary>
        /// Configures the Web host defaults.
        /// </summary>
        /// <param name="builder">The Web host builder.</param>
        protected virtual void ConfigureWebHostDefaults(IWebHostBuilder builder)
        {
            // Capture startup errors

            if (this.CaptureStartupErrors)
            {
                builder
                    .UseSetting("detailedErrors", "true")
                    .CaptureStartupErrors(true);
            }

            // Startup

            builder
                .UseStartup<Startup>();
        }

        #endregion

        #endregion
    }

    /// <summary>
    /// Defines the host builder.
    /// </summary>
    [GeneratedCode("Lithium", "2.0")]
    internal partial class HostBuilder : HostBuilderBase
    {
        #region Code

        #region Public Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="HostBuilder" /> class.
        /// </summary>
        public HostBuilder()        
            : base()
        {
        }

        #endregion

        #endregion
    }

    #endregion

    #endregion
}
