<#@ template debug="true" hostspecific="true" inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".gen.cs" #>
<#@ ServiceDesigner processor="ServiceDesignerDirectiveProcessor" requires="FileName=''" #>
<#

// Build the transformations

ServiceModelTransformations<CSharpFileModel> transformations = new ServiceModelTransformations<CSharpFileModel>(this.ServiceModel);

transformations.Add(
    (s, t) => true,
    (s, t) => { return s is ServiceModel; },
    this.TransformCustomApiController);

transformations.Add(
    (s, t) => true,
    (s, t) => { return s is ServiceModel; },
    this.TransformMonitoringController);

transformations.Add(
    (s, t) => true,
    (s, t) => { return s is ServiceModel; },
    this.TransformWebhooksController);

transformations.Add(
    (s, t) => true,
    (s, t) => { return s is ControllerType; },
    this.TransformController);

// Transform

CSharpFileModel targetModel = new CSharpFileModel(this.ServiceModel);
transformations.TransformTo(targetModel);

// Create controller

ModelWriterController controller = new ModelWriterController(this.GenerationEnvironment);

// Add writers

controller.AddModelWriter<ConstructorBodyModel>(
    (w, m) =>
    {
        ConstructorModel parentConstructor = m.ParentModelAs<ConstructorModel>();
        ClassModel parentClass = parentConstructor.ParentModelAs<ClassModel>();
        return !parentClass.Name.EqualsNoCase("MonitoringControllerBase") && parentClass.Name.EndsWith("ControllerBase");
    }, 
    this.WriteControllerBaseConstructor);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.GetFacet<string>("MethodKind").EqualsNoCase("Action");
    }, 
    this.WriteAction);

controller.AddModelWriter<ConstructorBodyModel>(
    (w, m) =>
    {
        ConstructorModel parentConstructor = m.ParentModelAs<ConstructorModel>();
        ClassModel parentClass = parentConstructor.ParentModelAs<ClassModel>();
        return parentClass.Name.EqualsNoCase("MonitoringControllerBase");
    }, 
    this.WriteMonitoringControllerBaseConstructor);

controller.AddModelWriter<PropertyGetAccessorModel>(
    (w, m) =>
    {
        PropertyModel parentProperty = m.ParentModelAs<PropertyModel>();
        return parentProperty.Facets.ContainsKey("BaseControllerLogger");
    }, 
    this.WriteBaseControllerLogger);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("EndpointsAsync");
    }, 
    this.WriteEndpointsAsync);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("ConfigurationAsync");
    }, 
    this.WriteConfigurationAsync);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("SaveConfigurationInBlobStorageAsync");
    }, 
    this.WriteSaveConfigurationInBlobStorageAsync);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("SaveConfigurationInFileSystem");
    }, 
    this.WriteSaveConfigurationInFileSystem);

controller.AddModelWriter<PropertyGetAccessorModel>(
    (w, m) =>
    {
        PropertyModel parentProperty = m.ParentModelAs<PropertyModel>();
        return parentProperty.Name.EqualsNoCase("EndpointAnalyzer");
    }, 
    this.WriteEndpointAnalyzer);

controller.AddModelWriter<PropertyGetAccessorModel>(
    (w, m) =>
    {
        PropertyModel parentProperty = m.ParentModelAs<PropertyModel>();
        return parentProperty.Name.EqualsNoCase("ConfigurationAnalyzer");
    }, 
    this.WriteConfigurationAnalyzer);

controller.AddModelWriter<PropertyGetAccessorModel>(
    (w, m) =>
    {
        PropertyModel parentProperty = m.ParentModelAs<PropertyModel>();
        return parentProperty.Name.EqualsNoCase("WebhooksSubscriptionsService");
    }, 
    this.WriteWebhooksSubscriptionsService);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("CreateSubscriptionAsync");
    }, 
    this.WriteCreateSubscriptionAsync);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("UpdateSubscriptionAsync");
    }, 
    this.WriteUpdateSubscriptionAsync);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("GetSubscriptionAsync");
    }, 
    this.WriteGetSubscriptionAsync);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("DeleteSubscriptionAsync");
    }, 
    this.WriteDeleteSubscriptionAsync);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("GetSubscriptionsAsync");
    }, 
    this.WriteGetSubscriptionsAsync);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("DeleteSubscriptionsAsync");
    }, 
    this.WriteDeleteSubscriptionsAsync);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("PingSubscriptionAsync");
    }, 
    this.WritePingSubscriptionAsync);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("GetWebhooksMetadataAsync");
    }, 
    this.WriteGetWebhooksMetadataAsync);

// Generate code

controller.Write(targetModel);

#>