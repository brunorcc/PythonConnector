//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Net;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Primavera.Hydrogen;
using Primavera.Hydrogen.AspNetCore.Configuration;
using Primavera.Hydrogen.AspNetCore.Mvc;
using Primavera.Hydrogen.AspNetCore.Routing;
using Primavera.Hydrogen.Rest;
using Primavera.Hydrogen.Rest.Routing;
using Primavera.Hydrogen.Storage.Blobs;

namespace Primavera.Lithium.PythonConnector.WebApi.Controllers
{
    #region Code

    #region Public Classes

    /// <summary>
    /// Defines a base class that allows sharing behavior between all controllers.
    /// </summary>
    [GeneratedCode("Lithium", "2.0")]
    public abstract partial class CustomApiControllerBase : ApiControllerBase
    {
        #region Code

        #endregion
    }

    /// <summary>
    /// Defines base class for the controller that provides the monitoring routes.
    /// </summary>
    /// <remarks>
    /// This is the base class of the MVC controller.
    /// </remarks>
    [GeneratedCode("Lithium", "2.0")]
    [SuppressMessage("Maintainability Rules", "SA1402:FileMayOnlyContainASingleType", Justification = "Because of code generation design.")]
    public abstract partial class MonitoringControllerBase : CustomApiControllerBase, IMonitoringController
    {
        #region Code

        #region Protected Properties

        /// <summary>
        /// Gets the logger.
        /// </summary>
        protected ILogger Logger
        {
            get
            {
                return this.HttpContext.RequestServices.GetRequiredService<ILogger<MonitoringControllerBase>>();
            }
        }

        /// <summary>
        /// Gets the endpoint analyzer service.
        /// </summary>
        protected IEndpointAnalyzerService EndpointAnalyzer
        {
            get
            {
                return this.HttpContext.RequestServices.GetRequiredService<IEndpointAnalyzerService>();
            }
        }

        /// <summary>
        /// Gets the configuration analyzer service.
        /// </summary>
        protected IConfigurationAnalyzerService ConfigurationAnalyzer
        {
            get
            {
                return this.HttpContext.RequestServices.GetRequiredService<IConfigurationAnalyzerService>();
            }
        }

        #endregion

        #region Protected Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="MonitoringControllerBase" /> class.
        /// </summary>
        protected MonitoringControllerBase()        
            : base()
        {
        }

        #endregion

        #region Public Methods

        /// <inheritdoc />
        [HttpGet(Primavera.Lithium.PythonConnector.Models.Metadata.Routes.Monitoring.Probe)]
        [ProducesResponseType(typeof(string), (int)HttpStatusCode.OK)]
        public abstract Task<IActionResult> ProbeAsync();

        /// <inheritdoc />
        [HttpGet(Primavera.Lithium.PythonConnector.Models.Metadata.Routes.Monitoring.Diagnostics)]
        [ProducesResponseType(typeof(string), (int)HttpStatusCode.OK)]
        public abstract Task<IActionResult> DiagnosticsAsync();

        /// <inheritdoc />
        [HttpGet(Primavera.Lithium.PythonConnector.Models.Metadata.Routes.Monitoring.Endpoints)]
        [ProducesResponseType(typeof(IEnumerable<EndpointInfo>), (int)HttpStatusCode.OK)]
        public virtual Task<IActionResult> EndpointsAsync()
        {
            // Retrieve the endpoints

            IEnumerable<EndpointInfo> endpoints = this.EndpointAnalyzer.Analyze();

            // Result

            return Task.FromResult<IActionResult>(
                this.Ok(endpoints));
        }

        /// <inheritdoc />
        [HttpGet(Primavera.Lithium.PythonConnector.Models.Metadata.Routes.Monitoring.Configuration)]
        [ProducesResponseType(typeof(string), (int)HttpStatusCode.OK)]
        public virtual async Task<IActionResult> ConfigurationAsync()
        {
            // Retrieve the configuration options using the service

            IDictionary<string, string> options = this.ConfigurationAnalyzer.Analyze();

            // Try to save using the blob storage

            string blobContainerUri = await this.SaveConfigurationInBlobStorageAsync(options);
            if (!string.IsNullOrEmpty(blobContainerUri))
            {
                return this.Ok("OK (saved in blob storage, {0})".Format(blobContainerUri));
            }

            // Save in the file system

            string fileName = this.SaveConfigurationInFileSystem(options);

            // Result

            return this.Ok("OK (saved in the file system, {0})".Format(fileName));
        }

        #endregion

        #region Protected Methods

        /// <summary>
        /// Saves the specified configuration options to the blob storage.
        /// </summary>
        /// <param name="options">The configuration options.</param>
        /// <returns>
        /// The <see cref="Task{TResult}"/> that represents the asynchronous operation.
        /// The address of the blob storage container where the configuration was stored.
        /// </returns>
        protected virtual async Task<string> SaveConfigurationInBlobStorageAsync(IDictionary<string, string> options)
        {
            // Resolve blob storage service

            IBlobStorageService service = this.HttpContext.RequestServices.GetService<IBlobStorageService>();
            if (service == null)
            {
                return null;
            }

            // Create the container, if necessary

            IContainerReference container = service.GetContainer("ConfigAnalyzer");

            await container.CreateIfNotExistsAsync().ConfigureAwait(false);

            // Serialize

            JsonSerializerOptions serializerOptions = new JsonSerializerOptions()
            {
                WriteIndented = true,
                IgnoreNullValues = true
            };

            string json = JsonSerializer.Serialize(options, serializerOptions);

            // Upload the blob

            IBlockBlobReference blob = container.GetBlockBlob("PCS.json");

            await blob.UploadTextAsync(
                json,
                "application/json")
                .ConfigureAwait(false);

            // Result

            return blob.Uri.AbsoluteUri;
        }

        /// <summary>
        /// Saves the specified configuration options in the file system.
        /// </summary>
        /// <param name="options">The configuration options.</param>
        /// <returns>
        /// The file system location where the configuration was stored.
        /// </returns>
        protected virtual string SaveConfigurationInFileSystem(IDictionary<string, string> options)
        {
            // Serialize

            JsonSerializerOptions serializerOptions = new JsonSerializerOptions()
            {
                WriteIndented = true,
                IgnoreNullValues = true
            };

            string json = JsonSerializer.Serialize(options, serializerOptions);

            // Save

            System.IO.DirectoryInfo directory = new System.IO.DirectoryInfo(
                System.IO.Path.Combine(
                    Environment.CurrentDirectory,
                    ".Config"));

            if (!directory.Exists)
            {
                directory.Create();
            }

            string fileName = System.IO.Path.Combine(directory.FullName, "ConfigAnalyzer.json");
            System.IO.File.WriteAllText(fileName, json);

            // Result

            return fileName;
        }

        #endregion

        #endregion
    }

    /// <summary>
    /// Defines the controller that provides the monitoring routes.
    /// </summary>
    /// <remarks>
    /// This is the MVC controller.
    /// </remarks>
    [GeneratedCode("Lithium", "2.0")]
    [ApiExplorerSettings(IgnoreApi = true)]
    [SuppressMessage("Maintainability Rules", "SA1402:FileMayOnlyContainASingleType", Justification = "Because of code generation design.")]
    public partial class MonitoringController : MonitoringControllerBase
    {
        #region Code

        #region Public Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="MonitoringController" /> class.
        /// </summary>
        public MonitoringController()        
        {
        }

        #endregion

        #endregion
    }

    /// <summary>
    /// The python connector controller.
    /// </summary>
    /// <remarks>
    /// This is the base class of the MVC controller.
    /// </remarks>
    [GeneratedCode("Lithium", "2.0")]
    [SuppressMessage("Maintainability Rules", "SA1402:FileMayOnlyContainASingleType", Justification = "Because of code generation design.")]
    public abstract partial class PythonConnectorControllerBase : CustomApiControllerBase, IPythonConnectorController
    {
        #region Code

        #region Protected Properties

        /// <summary>
        /// Gets the logger.
        /// </summary>
        protected ILogger Logger
        {
            get
            {
                return this.HttpContext.RequestServices.GetRequiredService<ILogger<PythonConnectorControllerBase>>();
            }
        }

        #endregion

        #region Protected Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="PythonConnectorControllerBase" /> class.
        /// </summary>
        protected PythonConnectorControllerBase()        
            : base()
        {
        }

        #endregion

        #region Public Methods

        /// <inheritdoc />
        [HttpPost(Primavera.Lithium.PythonConnector.Models.Metadata.Routes.PythonConnector.GetResult)]
        [ProducesResponseType(typeof(IEnumerable<Primavera.Lithium.PythonConnector.Models.OutputData>), (int)HttpStatusCode.OK)]
        [ProducesResponseType(typeof(ServiceError), (int)HttpStatusCode.BadRequest)]
        public virtual Task<IActionResult> GetResultAsync([FromBody] IEnumerable<Primavera.Lithium.PythonConnector.Models.InputData> inputData)
        {
            // Begin Validation

            if (!this.Validate()
                .Required(inputData, ErrorCodes.PythonConnectorGetResultInputDataRequired, ValidationResources.RES_Error_PythonConnector_GetResult_InputData_Required)
                .Result(ErrorCodes.RequestArgsInvalid, ValidationResources.RES_Error_RequestArgsInvalid, out ServiceError validationError))
            {
                return Task.FromResult<IActionResult>(this.BadRequest(validationError));
            }

            // End Validation

            // Result

            return this.GetResultCoreAsync(inputData);
        }

        #endregion

        #region Protected Methods

        /// <summary>
        /// The python connector get result.
        /// </summary>
        /// <param name="inputData">The input data.</param>
        /// <returns>
        /// The action result.
        /// </returns>
        protected abstract Task<IActionResult> GetResultCoreAsync(IEnumerable<Primavera.Lithium.PythonConnector.Models.InputData> inputData);

        #endregion

        #endregion
    }

    /// <summary>
    /// The python connector controller.
    /// </summary>
    /// <remarks>
    /// This is the MVC controller.
    /// </remarks>
    [GeneratedCode("Lithium", "2.0")]
    [SuppressMessage("Maintainability Rules", "SA1402:FileMayOnlyContainASingleType", Justification = "Because of code generation design.")]
    public partial class PythonConnectorController : PythonConnectorControllerBase
    {
        #region Code

        #region Public Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="PythonConnectorController" /> class.
        /// </summary>
        public PythonConnectorController()        
            : base()
        {
        }

        #endregion

        #endregion
    }

    #endregion

    #endregion
}
