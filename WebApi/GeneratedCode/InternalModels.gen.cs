//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.CodeDom.Compiler;
using System.Web;
using Primavera.Hydrogen;
using Primavera.Lithium.PythonConnector.WebApi.Configuration;
using Primavera.Lithium.PythonConnector.WebApi.Controllers;

namespace Primavera.Lithium.PythonConnector.WebApi.Models.Internal.ViewModels
{
    #region Code

    #region Public Classes

    /// <summary>
    /// Defines the base class for the view model that represents an error message.
    /// </summary>
    [GeneratedCode("Lithium", "2.0")]
    public abstract partial class ErrorMessageViewModelBase
    {
        #region Code

        #region Public Properties

        /// <summary>
        /// Gets or sets the error.
        /// </summary>
        public virtual string Error
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the error description.
        /// </summary>
        public virtual string ErrorDescription
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets a value indicating whether the error is expected.
        /// </summary>
        public virtual bool IsExpected
        {
            get;
            set;
        }

        #endregion

        #endregion
    }

    /// <summary>
    /// Defines the view model that represents an error message.
    /// </summary>
    [GeneratedCode("Lithium", "2.0")]
    public partial class ErrorMessageViewModel : ErrorMessageViewModelBase
    {
        #region Code

        #endregion
    }

    /// <summary>
    /// Defines the base class for the view model used by the error view.
    /// </summary>
    [GeneratedCode("Lithium", "2.0")]
    public abstract partial class ErrorViewModelBase
    {
        #region Code

        #region Public Properties

        /// <summary>
        /// Gets a value indicating whether the error resulted from an error status code.
        /// </summary>
        public virtual bool IsStatusCodeError
        {
            get;
        }

        /// <summary>
        /// Gets the error status code. Meaningful only if <see cref="IsStatusCodeError"/> is true.
        /// </summary>
        public virtual int ErrorStatusCode
        {
            get;
        }

        /// <summary>
        /// Gets the original path of the request that caused the error. Meaningful only if <see cref="IsStatusCodeError"/> is true.
        /// </summary>
        public virtual string ErrorOriginalPath
        {
            get;
        }

        /// <summary>
        /// Gets the original query string of the request that caused the error. Meaningful only if <see cref="IsStatusCodeError"/> is true.
        /// </summary>
        public virtual string ErrorOriginalQueryString
        {
            get;
        }

        /// <summary>
        /// Gets a value indicating whether the user is signed-in. Meaningful only if <see cref="IsStatusCodeError"/> is true.
        /// </summary>
        public virtual bool UserSignedIn
        {
            get;
        }

        /// <summary>
        /// Gets the email of the user that is signed-in (if any). Meaningful only if <see cref="IsStatusCodeError"/> is true.
        /// </summary>
        public virtual string UserEmail
        {
            get;
        }

        /// <summary>
        /// Gets the error identifier. Meaningful only if <see cref="IsStatusCodeError"/> is false.
        /// </summary>
        public virtual string ErrorId
        {
            get;
        }

        /// <summary>
        /// Gets the error message. Meaningful only if <see cref="IsStatusCodeError"/> is false.
        /// </summary>
        public virtual ErrorMessageViewModel Message
        {
            get;
        }

        #endregion

        #region Protected Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorViewModelBase" /> class.
        /// </summary>
        /// <param name="statusCode">The error status code.</param>
        /// <param name="originalPath">The original path (if any).</param>
        /// <param name="originalQueryString">The original query string (if any).</param>
        /// <param name="userSignedIn">A value indicating whether a user is signed-in.</param>
        /// <param name="userEmail">The signed-in user (if any).</param>
        protected ErrorViewModelBase(int statusCode, string originalPath, string originalQueryString, bool userSignedIn, string userEmail)        
            : base()
        {
            // Set properties

            this.IsStatusCodeError = true;
            this.ErrorStatusCode = statusCode;
            this.ErrorOriginalPath = originalPath;
            this.ErrorOriginalQueryString = originalQueryString;
            this.UserSignedIn = userSignedIn;
            this.UserEmail = userEmail;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorViewModelBase" /> class.
        /// </summary>
        /// <param name="errorId">The error identifier.</param>
        /// <param name="message">The error message</param>
        protected ErrorViewModelBase(string errorId, ErrorMessageViewModel message)        
            : base()
        {
            // Validation

            SmartGuard.NotNullOrEmpty(() => errorId, errorId);
            SmartGuard.NotNull(() => message, message);

            // Set properties

            this.IsStatusCodeError = false;
            this.ErrorId = errorId;
            this.Message = message;
        }

        #endregion

        #endregion
    }

    /// <summary>
    /// Defines the view model used by the error view.
    /// </summary>
    [GeneratedCode("Lithium", "2.0")]
    public partial class ErrorViewModel : ErrorViewModelBase
    {
        #region Code

        #region Public Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorViewModel" /> class.
        /// </summary>
        /// <param name="statusCode">The error status code.</param>
        /// <param name="originalPath">The original path (if any).</param>
        /// <param name="originalQueryString">The original query string (if any).</param>
        /// <param name="userSignedIn">A value indicating whether a user is signed-in.</param>
        /// <param name="userEmail">The signed-in user (if any).</param>
        public ErrorViewModel(int statusCode, string originalPath, string originalQueryString, bool userSignedIn, string userEmail)        
            : base(statusCode, originalPath, originalQueryString, userSignedIn, userEmail)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorViewModelBase" /> class.
        /// </summary>
        /// <param name="errorId">The error identifier.</param>
        /// <param name="message">The error message</param>
        public ErrorViewModel(string errorId, ErrorMessageViewModel message)        
            : base(errorId, message)
        {
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Gets the error page title.
        /// </summary>
        /// <param name="model">The view model.</param>
        /// <param name="hostConfiguration">The host configuration.</param>
        /// <returns>
        /// The error page title.
        /// </returns>
        public static string GetPageTitle(ErrorViewModel model, HostConfiguration hostConfiguration)
        {
            // Validation

            SmartGuard.NotNull(() => hostConfiguration, hostConfiguration);

            // Result

            if (model == null)
            {
                return ViewsResources.RES_PageTitle_Error.Format(hostConfiguration.Information.HostTitle);
            }

            if (model.IsStatusCodeError)
            {
                return ViewsResources.RES_PageTitle_Error_StatusCode.Format(hostConfiguration.Information.HostTitle, model.ErrorStatusCode);
            }

            return ViewsResources.RES_PageTitle_Error.Format(hostConfiguration.Information.HostTitle);
        }

        /// <summary>
        /// Gets the error title.
        /// </summary>
        /// <param name="model">The view model.</param>
        /// <param name="hostConfiguration">The host configuration.</param>
        /// <param name="title">The title.</param>
        public static void GetTitle(ErrorViewModel model, HostConfiguration hostConfiguration, out string title)
        {
            // Validation

            SmartGuard.NotNull(() => hostConfiguration, hostConfiguration);

            // Result

            if (model == null)
            {
                title = ViewsResources.RES_Title_Error;
                return;
            }

            if (model.IsStatusCodeError)
            {
                switch (model.ErrorStatusCode)
                {
                    case 0:
                        title = ViewsResources.RES_Title_Error;
                        return;
                    case 403:
                        title = ViewsResources.RES_Title_403;
                        return;
                    case 404:
                        title = ViewsResources.RES_Title_404;
                        return;
                    case 500:
                        title = ViewsResources.RES_Title_500;
                        return;
                    default:
                        title = ViewsResources.RES_Title_StatusCode.Format(model.ErrorStatusCode);
                        return;
                }
            }

            switch (model.ErrorId)
            {
                default:
                    title = ViewsResources.RES_Title_Error;
                    return;
            }
        }

        /// <summary>
        /// Gets the error description HTML.
        /// </summary>
        /// <param name="model">The view model.</param>
        /// <param name="description">The description.</param>
        /// <param name="additionalInformation">The additional information.</param>
        public static void GetDescriptionHtml(ErrorViewModel model, out string description, out string additionalInformation)
        {
            if (model == null)
            {
                description = ViewsResources.RES_Description_Unexpected;
                additionalInformation = null;
                return;
            }

            if (model.IsStatusCodeError)
            {
                switch (model.ErrorStatusCode)
                {
                    case 0:
                        description = ViewsResources.RES_Description_Unexpected;
                        additionalInformation = null;
                        return;
                    case 403:
                        description = ViewsResources.RES_Description_403;
                        additionalInformation = GetAdditionalInformationSignedInUser(model);
                        return;
                    case 404:
                        description = ViewsResources.RES_Description_404;
                        additionalInformation = null;
                        return;
                    case 500:
                        description = ViewsResources.RES_Description_500;
                        additionalInformation = null;
                        return;
                    default:
                        description = ViewsResources.RES_Description_StatusCode.Format(model.ErrorStatusCode);
                        additionalInformation = null;
                        return;
                }
            }

            if (model.Message == null)
            {
                description = ViewsResources.RES_Description_Unexpected;
            }

            string error = null;

            switch (model.ErrorId)
            {
                default:
                    if (model.Message.IsExpected)
                    {
                        error = "<p><b>{0}</b></p>{1}"
                            .Format(
                                model.Message.Error,
                                model.Message.ErrorDescription == null ? string.Empty : "<p>" + model.Message.ErrorDescription + "</p>");
                    }
                    else
                    {
                        error = ViewsResources.RES_Description_Unexpected_ErrorId
                            .Format(
                                model.Message.Error,
                                model.Message.ErrorDescription == null ? string.Empty : "<p>" + model.Message.ErrorDescription + "</p>");
                    }

                    break;
            }

            description = error;
            additionalInformation = null;
        }

        /// <summary>
        /// Gets the error id HTML.
        /// </summary>
        /// <param name="model">The view model.</param>
        /// <returns>
        /// The error id HTML.
        /// </returns>
        public static string GetErrorIdHtml(ErrorViewModel model)
        {
            if (model == null)
            {
                return string.Empty;
            }

            if (model.IsStatusCodeError)
            {
                return string.Empty;
            }

            if (string.IsNullOrEmpty(model.ErrorId))
            {
                return string.Empty;
            }

            return ViewsResources.RES_ErrorId
                .Format(
                    HttpUtility.HtmlEncode(
                        model.ErrorId));
        }

        #endregion

        #region Private Methods

        private static string GetAdditionalInformationSignedInUser(ErrorViewModel model)
        {
            if (model == null)
            {
                return null;
            }

            if (!model.UserSignedIn)
            {
                return null;
            }

            if (string.IsNullOrEmpty(model.UserEmail))
            {
                return null;
            }

            if (string.IsNullOrEmpty(model.ErrorOriginalPath))
            {
                return null;
            }

            return ViewsResources.RES_SignedInAs
                .Format(
                    model.UserEmail,
                    Constants.Controllers.Home.Routes.Signout + model.ErrorOriginalQueryString);
        }

        #endregion

        #endregion
    }

    #endregion

    #endregion
}
