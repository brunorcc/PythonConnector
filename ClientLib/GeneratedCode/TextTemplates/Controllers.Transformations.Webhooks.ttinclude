<#+

// *** TransformWebhooksController

public void TransformWebhooksController(DomainModelElement sourceElement, CSharpFileModel targetModel)
{
    ServiceModel sourceModel = sourceElement as ServiceModel;
    if (sourceModel == null)
    {
        return;
    }

    if (!sourceModel.Webhooks.Any())
    {
        return;
    }

    targetModel
        .WithNamespaceImport(new NamespaceImportModel("Primavera.Hydrogen.Rest.Webhooks"));

    // Webhooks classes

    ClassModel baseClassModel = targetModel.Namespace.AddClass(new ClassModel("WebhooksOperationsBase")
    {
        Modifiers = ClassModifiers.Public | ClassModifiers.Abstract | ClassModifiers.Partial,
        Inheritance = "IWebhooksOperations, IDisposable",
        Documentation = new DocumentationModel("Defines the base class for the type that manages webhooks on the service.")
        {
            SeeAlso = new List<string>(new string[] { "IWebhooksOperations", "IDisposable" })
        }
    })
        .WithAttribute(new AttributeModel("SuppressMessage(\"Maintainability Rules\", \"SA1402:FileMayOnlyContainASingleType\", Justification = \"Because of code generation design.\")"))
        .WithProperty(new PropertyModel("Client", "{0}ClientBase".Format(sourceModel.Name))
        {
            Modifiers = PropertyModifiers.Protected | PropertyModifiers.Virtual,
            GetAccessor = new PropertyGetAccessorModel(),
            SetAccessor = new PropertySetAccessorModel(),
            Documentation = new DocumentationModel("Gets or sets the service client.")
        })
        .WithProperty(new PropertyModel("Actions", "ServiceClientActions<{0}ClientBase>".Format(sourceModel.Name))
        {
            Modifiers = PropertyModifiers.Protected | PropertyModifiers.Virtual,
            GetAccessor = new PropertyGetAccessorModel(),
            SetAccessor = new PropertySetAccessorModel(),
            Documentation = new DocumentationModel("Gets or sets the service client actions.")
        })
        .AddConstructor(new ConstructorModel()
        {
            Modifiers = ConstructorModifiers.Protected,
            Documentation = new DocumentationModel("Initializes a new instance of the <see cref=\"WebhooksOperationsBase\" /> class.")
        })
            .WithParameter(new MethodParameterModel("client", "{0}ClientBase".Format(sourceModel.Name))
            {
                Documentation = new DocumentationModel("The service client.")
            })
            .WithParameter(new MethodParameterModel("actions", "ServiceClientActions<{0}ClientBase>".Format(sourceModel.Name))
            {
                Documentation = new DocumentationModel("The service client actions.")
            })
            .ParentModelAs<ClassModel>()
        .WithMethod(MethodModel.Templates.Dispose)
        .AddMethod(new MethodModel("Dispose")
        {
            Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
            Documentation = new DocumentationModel("Releases unmanaged and - optionally - managed resources.")
        })
            .WithParameter(new MethodParameterModel("disposing", "bool")
            {
                Documentation = new DocumentationModel("<c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.")
            })
            .ParentModelAs<ClassModel>()
        .AddMethod(new MethodModel("Initialize", "void")
        {
            Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
            Documentation = new DocumentationModel("Performs additional initialization.")
        })
            .ParentModelAs<ClassModel>()
        .AddMethod(new MethodModel("CreateSubscriptionAsync", "Task<ServiceOperationResult<string>>")
        {
            Modifiers = MethodModifiers.Public | MethodModifiers.Virtual,
            Documentation = new DocumentationModel(true)
        })
            .WithParameter(new MethodParameterModel("request", "CreateWebhookSubscriptionRequest"))
            .WithParameter(new MethodParameterModel("cancellationToken", "CancellationToken")
            {
                DefaultValue = "default(CancellationToken)"
            })
            .ParentModelAs<ClassModel>()
        .AddMethod(new MethodModel("UpdateSubscriptionAsync", "Task<ServiceOperationResult>")
        {
            Modifiers = MethodModifiers.Public | MethodModifiers.Virtual,
            Documentation = new DocumentationModel(true)
        })
            .WithParameter(new MethodParameterModel("request", "UpdateWebhookSubscriptionRequest"))
            .WithParameter(new MethodParameterModel("cancellationToken", "CancellationToken")
            {
                DefaultValue = "default(CancellationToken)"
            })
            .ParentModelAs<ClassModel>()
        .AddMethod(new MethodModel("DeleteSubscriptionAsync", "Task<ServiceOperationResult>")
        {
            Modifiers = MethodModifiers.Public | MethodModifiers.Virtual,
            Documentation = new DocumentationModel(true)
        })
            .WithParameter(new MethodParameterModel("clientId", "string"))
            .WithParameter(new MethodParameterModel("subscriptionId", "string"))
            .WithParameter(new MethodParameterModel("cancellationToken", "CancellationToken")
            {
                DefaultValue = "default(CancellationToken)"
            })
            .ParentModelAs<ClassModel>()
        .AddMethod(new MethodModel("GetSubscriptionAsync", "Task<ServiceOperationResult<WebhookSubscription>>")
        {
            Modifiers = MethodModifiers.Public | MethodModifiers.Virtual,
            Documentation = new DocumentationModel(true)
        })
            .WithParameter(new MethodParameterModel("clientId", "string"))
            .WithParameter(new MethodParameterModel("subscriptionId", "string"))
            .WithParameter(new MethodParameterModel("cancellationToken", "CancellationToken")
            {
                DefaultValue = "default(CancellationToken)"
            })
            .ParentModelAs<ClassModel>()
        .AddMethod(new MethodModel("DeleteSubscriptionsAsync", "Task<ServiceOperationResult>")
        {
            Modifiers = MethodModifiers.Public | MethodModifiers.Virtual,
            Documentation = new DocumentationModel(true)
        })
            .WithParameter(new MethodParameterModel("clientId", "string"))
            .WithParameter(new MethodParameterModel("cancellationToken", "CancellationToken")
            {
                DefaultValue = "default(CancellationToken)"
            })
            .ParentModelAs<ClassModel>()
        .AddMethod(new MethodModel("GetSubscriptionsAsync", "Task<ServiceOperationResult<IEnumerable<WebhookSubscription>>>")
        {
            Modifiers = MethodModifiers.Public | MethodModifiers.Virtual,
            Documentation = new DocumentationModel(true)
        })
            .WithParameter(new MethodParameterModel("clientId", "string"))
            .WithParameter(new MethodParameterModel("cancellationToken", "CancellationToken")
            {
                DefaultValue = "default(CancellationToken)"
            })
            .ParentModelAs<ClassModel>()
        .AddMethod(new MethodModel("PingSubscriptionAsync", "Task<ServiceOperationResult>")
        {
            Modifiers = MethodModifiers.Public | MethodModifiers.Virtual,
            Documentation = new DocumentationModel(true)
        })
            .WithParameter(new MethodParameterModel("clientId", "string"))
            .WithParameter(new MethodParameterModel("subscriptionId", "string"))
            .WithParameter(new MethodParameterModel("cancellationToken", "CancellationToken")
            {
                DefaultValue = "default(CancellationToken)"
            })
            .ParentModelAs<ClassModel>()
        .AddMethod(new MethodModel("GetWebhooksMetadataAsync", "Task<ServiceOperationResult<IEnumerable<WebhookMetadata>>>")
        {
            Modifiers = MethodModifiers.Public | MethodModifiers.Virtual,
            Documentation = new DocumentationModel(true)
        })
            .WithParameter(new MethodParameterModel("cancellationToken", "CancellationToken")
            {
                DefaultValue = "default(CancellationToken)"
            })
            .ParentModelAs<ClassModel>();

    if (sourceModel.GenerateSyncActions)
    {
        baseClassModel
            .AddMethod(new MethodModel("CreateSubscription", "ServiceOperationResult<string>")
            {
                Modifiers = MethodModifiers.Public | MethodModifiers.Virtual,
                Documentation = new DocumentationModel(true)
            })
                .WithParameter(new MethodParameterModel("request", "CreateWebhookSubscriptionRequest"))
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("UpdateSubscription", "ServiceOperationResult")
            {
                Modifiers = MethodModifiers.Public | MethodModifiers.Virtual,
                Documentation = new DocumentationModel(true)
            })
                .WithParameter(new MethodParameterModel("request", "UpdateWebhookSubscriptionRequest"))
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("DeleteSubscription", "ServiceOperationResult")
            {
                Modifiers = MethodModifiers.Public | MethodModifiers.Virtual,
                Documentation = new DocumentationModel(true)
            })
                .WithParameter(new MethodParameterModel("clientId", "string"))
                .WithParameter(new MethodParameterModel("subscriptionId", "string"))
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("GetSubscription", "ServiceOperationResult<WebhookSubscription>")
            {
                Modifiers = MethodModifiers.Public | MethodModifiers.Virtual,
                Documentation = new DocumentationModel(true)
            })
                .WithParameter(new MethodParameterModel("clientId", "string"))
                .WithParameter(new MethodParameterModel("subscriptionId", "string"))
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("DeleteSubscriptions", "ServiceOperationResult")
            {
                Modifiers = MethodModifiers.Public | MethodModifiers.Virtual,
                Documentation = new DocumentationModel(true)
            })
                .WithParameter(new MethodParameterModel("clientId", "string"))
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("GetSubscriptions", "ServiceOperationResult<IEnumerable<WebhookSubscription>>")
            {
                Modifiers = MethodModifiers.Public | MethodModifiers.Virtual,
                Documentation = new DocumentationModel(true)
            })
                .WithParameter(new MethodParameterModel("clientId", "string"))
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("PingSubscription", "ServiceOperationResult")
            {
                Modifiers = MethodModifiers.Public | MethodModifiers.Virtual,
                Documentation = new DocumentationModel(true)
            })
                .WithParameter(new MethodParameterModel("clientId", "string"))
                .WithParameter(new MethodParameterModel("subscriptionId", "string"))
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("GetWebhooksMetadata", "ServiceOperationResult<IEnumerable<WebhookMetadata>>")
            {
                Modifiers = MethodModifiers.Public | MethodModifiers.Virtual,
                Documentation = new DocumentationModel(true)
            })
                .ParentModelAs<ClassModel>();
    }

    ClassModel classModel = targetModel.Namespace.AddClass(new ClassModel("WebhooksOperations")
    {
        Modifiers = ClassModifiers.Public | ClassModifiers.Partial,
        Inheritance = "WebhooksOperationsBase",
        Documentation = new DocumentationModel("Provides operations to manage webhooks on the service.")
        {
            SeeAlso = new List<string>(new string[] { "WebhooksOperationsBase" })
        }
    })
        .WithAttribute(new AttributeModel("SuppressMessage(\"Maintainability Rules\", \"SA1402:FileMayOnlyContainASingleType\", Justification = \"Because of code generation design.\")"))
        .AddConstructor(new ConstructorModel()
        {
            Modifiers = ConstructorModifiers.Public,
            Inheritance = "base(client, actions)",
            Documentation = new DocumentationModel("Initializes a new instance of the <see cref=\"WebhooksOperations\" /> class.")
        })
            .WithParameter(new MethodParameterModel("client", "{0}ClientBase".Format(sourceModel.Name))
            {
                Documentation = new DocumentationModel("The service client.")
            })
            .WithParameter(new MethodParameterModel("actions", "ServiceClientActions<{0}ClientBase>".Format(sourceModel.Name))
            {
                Documentation = new DocumentationModel("The service client actions.")
            })
            .ParentModelAs<ClassModel>();
}

#>