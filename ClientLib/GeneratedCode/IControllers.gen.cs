//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Primavera.Hydrogen.Rest.Client;
using Primavera.Hydrogen.Rest.Routing;

namespace Primavera.Lithium.PythonConnector
{
    #region Code

    #region Public Interfaces

    /// <summary>
    /// Provides monitoring operations on the service.
    /// </summary>
    /// <seealso cref="System.IDisposable" />
    [GeneratedCode("Lithium", "2.0")]
    public partial interface IMonitoringOperations : IDisposable
    {
        #region Code

        #region Methods

        /// <summary>
        /// Probes the service.
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>
        /// The <see cref="Task{TResult}"/> that represents the asynchronous operation.
        /// The <see cref="ServiceOperationResult{T}"/> result.
        /// </returns>
        /// <exception cref="ServiceException">Raised when the operation returns an unexpected status code.</exception>
        Task<ServiceOperationResult<string>> ProbeAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Diagnoses the service.
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>
        /// The <see cref="Task{TResult}"/> that represents the asynchronous operation.
        /// The <see cref="ServiceOperationResult{T}"/> result.
        /// </returns>
        /// <exception cref="ServiceException">Raised when the operation returns an unexpected status code.</exception>
        Task<ServiceOperationResult<string>> DiagnosticsAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Analyzes the service endpoints.
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>
        /// The <see cref="Task{TResult}"/> that represents the asynchronous operation.
        /// The <see cref="ServiceOperationResult{T}"/> result.
        /// </returns>
        /// <exception cref="ServiceException">Raised when the operation returns an unexpected status code.</exception>
        Task<ServiceOperationResult<IEnumerable<EndpointInfo>>> EndpointsAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Analyzes the service configuration.
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>
        /// The <see cref="Task{TResult}"/> that represents the asynchronous operation.
        /// The <see cref="ServiceOperationResult{T}"/> result.
        /// </returns>
        /// <exception cref="ServiceException">Raised when the operation returns an unexpected status code.</exception>
        Task<ServiceOperationResult<string>> ConfigurationAsync(CancellationToken cancellationToken = default(CancellationToken));

        #endregion

        #endregion
    }

    /// <summary>
    /// The python connector controller.
    /// </summary>
    /// <seealso cref="System.IDisposable" />
    [GeneratedCode("Lithium", "2.0")]
    public partial interface IPythonConnectorOperations : IDisposable
    {
        #region Code

        #region Methods

        /// <summary>
        /// The python connector get result.
        /// </summary>
        /// <param name="inputData">The input data.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>
        /// The <see cref="Task{TResult}"/> that represents the asynchronous operation.
        /// The <see cref="ServiceOperationResult{T}"/> result.
        /// </returns>
        /// <exception cref="ServiceException">Raised when the operation returns an unexpected status code.</exception>
        Task<ServiceOperationResult<IEnumerable<Primavera.Lithium.PythonConnector.Models.OutputData>>> GetResultAsync(IEnumerable<Primavera.Lithium.PythonConnector.Models.InputData> inputData, CancellationToken cancellationToken = default(CancellationToken));

        #endregion

        #endregion
    }

    #endregion

    #endregion
}
