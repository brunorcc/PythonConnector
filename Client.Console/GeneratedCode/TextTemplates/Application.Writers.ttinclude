<#+

// *** WriteGetClient

public void WriteGetClient(ModelWriter modelWriter, PropertyGetAccessorModel model)
{

#>
            get
            {
                if (this.fieldClient == null)
                {
                    this.fieldClient = this.GetServiceClient();
                }

                return this.fieldClient;
            }
<#+

}

// *** WriteConstructor

public void WriteConstructor(ModelWriter modelWriter, ConstructorBodyModel model)
{

#>
            // Validation

            SmartGuard.NotNull(() => options, options);

            // Set properties

            this.Configuration = options;

            // Set encoding

            System.Console.OutputEncoding = System.Text.Encoding.UTF8;
<#+

}

// *** WriteRunAsync

public void WriteRunAsync(ModelWriter modelWriter, MethodBodyModel model)
{
    ServiceModel sourceModel = model.RootModelAs<CSharpFileModel>().SourceModel as ServiceModel;
    string displayName = sourceModel.DisplayName;
    AuthorizationMode authorizationMode = sourceModel.AuthorizationMode;

#>
            // Heading

            ConsoleHelper.WriteLine("=======================================");
            ConsoleHelper.WriteLine("<#= displayName.ToUpperInvariant() #> CONSOLE");
            ConsoleHelper.WriteLine("=======================================");

            // Check configuration

            if (!this.CheckConfiguration())
            {
                return;
            }

            // Select environment

            this.SelectEnvironment();

            // Write configuration

            this.WriteConfiguration();
            
            // Menu

            bool cont = true;
            while (cont)
            {
                ConsoleHelper.WriteLine();
                ConsoleHelper.WriteLine("========================================");
                ConsoleHelper.WriteLine("Main Menu");
                this.WriteConfiguration();
                ConsoleHelper.WriteLine();
                ConsoleHelper.WriteLine("0. Change Environment.");

                this.PrintCustomMenuOptions();

<#+

    if (sourceModel.GenerateWebApi)
    {

#>
                ConsoleHelper.WriteLine("M. Monitoring.");
<#+

    }

    if (sourceModel.Webhooks.Any())
    {

#>
                ConsoleHelper.WriteLine("W. Webhooks.");
<#+

    }
#>
                ConsoleHelper.WriteLine("Q. Quit.");
                ConsoleHelper.Write(">> ");

                ConsoleKeyInfo key = ConsoleHelper.ReadKey();
                ConsoleHelper.WriteLine();

                switch (key.Key)
                {
                    case ConsoleKey.Q:
                        cont = false;
                        break;
                    case ConsoleKey.D0:
                    case ConsoleKey.NumPad0:
                        this.SelectEnvironment();
                        cont = true;
                        break;
<#+

    if (sourceModel.GenerateWebApi)
    {

#>
                    case ConsoleKey.M:
                        cont = !await this.ShowMonitoringMenuAsync().ConfigureAwait(false);
                        break;
<#+

    }

    if (sourceModel.Webhooks.Any())
    {

#>
                    case ConsoleKey.W:
                        cont = !await this.ShowWebhooksMenuAsync().ConfigureAwait(false);
                        break;
<#+

    }

#>
                    default:
                        cont = await this.HandleCustomMenuOptionsAsync(key).ConfigureAwait(false);
                        break;
                }
            }
<#+

}

// *** WriteDisposeProtected

public void WriteDisposeProtected(ModelWriter modelWriter, MethodBodyModel model)
{
    ServiceModel sourceModel = model.RootModelAs<CSharpFileModel>().SourceModel as ServiceModel;
    if (!sourceModel.GenerateClientLibrary)
    {
        return;
    }

#>
            // Disposing?

            if (disposing)
            {
                this.DisposeServiceClient();
            }
<#+

}

// *** WriteDisposeServiceClient

public void WriteDisposeServiceClient(ModelWriter modelWriter, MethodBodyModel model)
{
    ServiceModel sourceModel = model.RootModelAs<CSharpFileModel>().SourceModel as ServiceModel;
    if (!sourceModel.GenerateClientLibrary)
    {
        return;
    }

#>
            if (this.fieldClient != null)
            {
                this.fieldClient.Dispose();
                this.fieldClient = null;
            }
<#+

}

// *** WriteGetServiceClient

public void WriteGetServiceClient(ModelWriter modelWriter, MethodBodyModel model)
{
    ServiceModel sourceModel = model.RootModelAs<CSharpFileModel>().SourceModel as ServiceModel;
    AuthorizationMode authorizationMode = sourceModel.AuthorizationMode;

    if (authorizationMode == AuthorizationMode.On)
    {
        this.WriteGetServiceClientWith(modelWriter, model);
    }
    else
    {
        this.WriteGetServiceClientWithout(modelWriter, model);
    }
}

// *** WriteGetServiceClientWith

public void WriteGetServiceClientWith(ModelWriter modelWriter, MethodBodyModel model)
{
    ServiceModel sourceModel = model.RootModelAs<CSharpFileModel>().SourceModel as ServiceModel;

#>
            ConsoleHelper.WriteInformationLine("Creating the service client for base URI '{0}'...", this.Configuration.ServiceBaseUri);

            // Create the service client

<#+

    if (sourceModel.UseClientCredentialsClient)
    {

#>
            string clientId = Constants.ClientId;
            string clientSecret = Constants.ClientSecret;
<#+

    }
    else
    {

#>
            string clientId = "Unknown";
            string clientSecret = "Unknown";
<#+

    }

#>

            <#= this.ServiceModel.Name #>Client client = new <#= this.ServiceModel.Name #>Client(
                new Uri(this.Configuration.ServiceBaseUri),
                async (args) =>
                {
                    // Retrieve the access token

                    string accessToken = await ClientCredentials
                        .ForAllScopes(
                            new Uri(args.Authority),
                            clientId, 
                            clientSecret)
                        .RetrieveAccessTokenAsync()
                        .ConfigureAwait(false);

                    // Result

                    return accessToken;
                });

            // Initialize service client

            this.InitializeServiceClient(client);

            // Result

            return client;
<#+

}

// *** WriteGetServiceClientWithout

public void WriteGetServiceClientWithout(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            ConsoleHelper.WriteInformationLine("Creating the service client for base URI '{0}'...", this.Configuration.ServiceBaseUri);

            return new <#= this.ServiceModel.Name #>Client(
                new Uri(this.Configuration.ServiceBaseUri),
                ServiceClientCredentials.NoCredentials);
<#+

}

// *** WriteShowMonitoringMenuAsync

public void WriteShowMonitoringMenuAsync(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            // Menu

            bool terminate = false;
            bool cont = true;
            while (cont)
            {
                ConsoleHelper.WriteLine();
                ConsoleHelper.WriteLine("========================================");
                ConsoleHelper.WriteLine("Monitoring Menu");
                this.WriteConfiguration();
                ConsoleHelper.WriteLine();
                ConsoleHelper.WriteLine("1. Probe.");
                ConsoleHelper.WriteLine("2. Diagnostics.");
                ConsoleHelper.WriteLine("3. Endpoints.");
                ConsoleHelper.WriteLine("4. Configuration.");
                ConsoleHelper.WriteLine("<. Back.");
                ConsoleHelper.WriteLine("Q. Quit.");
                ConsoleHelper.Write(">> ");

                ConsoleKeyInfo key = ConsoleHelper.ReadKey();
                ConsoleHelper.WriteLine();

                switch (key.Key)
                {
                    case ConsoleKey.Q:
                        cont = false;
                        terminate = true;
                        break;
                    case ConsoleKey.LeftArrow:
                        cont = false;
                        break;
                    case ConsoleKey.D1:
                    case ConsoleKey.NumPad1:
                        await this.ProbeAsync().ConfigureAwait(false);
                        break;
                    case ConsoleKey.D2:
                    case ConsoleKey.NumPad2:
                        await this.DiagnosticsAsync().ConfigureAwait(false);
                        break;
                    case ConsoleKey.D3:
                    case ConsoleKey.NumPad3:
                        await this.EndpointsAsync().ConfigureAwait(false);
                        break;
                    case ConsoleKey.D4:
                    case ConsoleKey.NumPad4:
                        await this.ConfigurationAsync().ConfigureAwait(false);
                        break;
                    default:
                        break;
                }
            }

            // Result

            return terminate;
<#+

}

// *** WriteProbeAsync

public void WriteProbeAsync(ModelWriter modelWriter, MethodBodyModel model)
{
    ServiceModel sourceModel = model.RootModelAs<CSharpFileModel>().SourceModel as ServiceModel;
    if (!sourceModel.GenerateClientLibrary)
    {

#>
            throw new NotImplementedException("The service does not generate a client library.");
<#+

        return;
    }

#>
            // Call the Web API

            ConsoleHelper.WriteLine();
            ConsoleHelper.WriteInformationLine("Calling the Web API...");

            try
            {
                ServiceOperationResult<string> response = await this.Client.Monitoring.ProbeAsync().ConfigureAwait(false);

                ConsoleHelper.WriteInformationLine("Web API call succeeded. Result: {0}.", response.Body);
            }
            catch (ServiceException ex)
            {
                this.WriteServiceException(ex);
            }
            catch (Exception ex)
            {
                ConsoleHelper.WriteErrorLine(ex);
            }
<#+

}

// *** WriteDiagnosticsAsync

public void WriteDiagnosticsAsync(ModelWriter modelWriter, MethodBodyModel model)
{
    ServiceModel sourceModel = model.RootModelAs<CSharpFileModel>().SourceModel as ServiceModel;
    if (!sourceModel.GenerateClientLibrary)
    {

#>
            throw new NotImplementedException("The service does not generate a client library.");
<#+

        return;
    }

#>
            // Call the Web API

            ConsoleHelper.WriteLine();
            ConsoleHelper.WriteInformationLine("Calling the Web API...");

            try
            {
                ServiceOperationResult<string> response = await this.Client.Monitoring.DiagnosticsAsync().ConfigureAwait(false);

                ConsoleHelper.WriteInformationLine("Web API call succeeded. Result: {0}.", response.Body);
            }
            catch (ServiceException ex)
            {
                this.WriteServiceException(ex);
            }
            catch (Exception ex)
            {
                ConsoleHelper.WriteErrorLine(ex);
            }
<#+

}

// *** WriteEndpointsAsync

public void WriteEndpointsAsync(ModelWriter modelWriter, MethodBodyModel model)
{
    ServiceModel sourceModel = model.RootModelAs<CSharpFileModel>().SourceModel as ServiceModel;
    if (!sourceModel.GenerateClientLibrary)
    {

#>
            throw new NotImplementedException("The service does not generate a client library.");
<#+

        return;
    }

#>
            // Call the Web API

            ConsoleHelper.WriteLine();
            ConsoleHelper.WriteInformationLine("Calling the Web API...");

            try
            {
                ServiceOperationResult<IEnumerable<EndpointInfo>> response = await this.Client.Monitoring.EndpointsAsync().ConfigureAwait(false);

                ConsoleHelper.WriteInformationLine("Web API returned the result. See below.");

                IEnumerable<EndpointInfo> endpoints = response.Body;

                WriteEndpoints(endpoints);
            }
            catch (ServiceException ex)
            {
                this.WriteServiceException(ex);
            }
            catch (Exception ex)
            {
                ConsoleHelper.WriteErrorLine(ex);
            }
<#+

}

// *** WriteConfigurationAsync

public void WriteConfigurationAsync(ModelWriter modelWriter, MethodBodyModel model)
{
    ServiceModel sourceModel = model.RootModelAs<CSharpFileModel>().SourceModel as ServiceModel;
    if (!sourceModel.GenerateClientLibrary)
    {

#>
            throw new NotImplementedException("The service does not generate a client library.");
<#+

        return;
    }

#>
            // Call the Web API

            ConsoleHelper.WriteLine();
            ConsoleHelper.WriteInformationLine("Calling the Web API...");

            try
            {
                ServiceOperationResult<string> response = await this.Client.Monitoring.ConfigurationAsync().ConfigureAwait(false);

                ConsoleHelper.WriteInformationLine("Web API call succeeded. Result: {0}.", response.Body);
            }
            catch (ServiceException ex)
            {
                this.WriteServiceException(ex);
            }
            catch (Exception ex)
            {
                ConsoleHelper.WriteErrorLine(ex);
            }
<#+

}

// *** WriteWriteException

public void WriteWriteException(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            ConsoleHelper.WriteErrorLine("An error was raised. See bellow.");
            ConsoleHelper.WriteErrorLine(ex);
<#+

}

// *** WriteWriteServiceException

public void WriteWriteServiceException(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            if (writeTitle)
            {
                ConsoleHelper.WriteErrorLine("Web API returned an error. See bellow.");
            }

            ConsoleHelper.WriteErrorLine(ex.Message);
            this.WriteServiceExceptionError(string.Empty, ex.Body);
            this.WriteServiceExceptionRequest(ex.Request);
            this.WriteServiceExceptionResponse(ex.Response);

            ServiceException innerServiceException = ex.InnerException as ServiceException;
            if (innerServiceException != null)
            {
                this.WriteServiceException(innerServiceException, false);
            }
            else
            {
                this.WriteServiceExceptionInner(ex.InnerException);
            }
<#+

}

// *** WriteWriteServiceExceptionError

public void WriteWriteServiceExceptionError(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            if (error != null)
            {
                ConsoleHelper.WriteErrorLine(spacing + "Error code...: '{0}'", error.Code);
                ConsoleHelper.WriteErrorLine(spacing + "Error message: '{0}'", error.Message);
                if (error.Details != null)
                {
                    foreach (ServiceErrorDetail detail in error.Details)
                    {
                        this.WriteServiceExceptionErrorDetail(spacing + "..", detail);
                    }
                }
            }
<#+

}

// *** WriteWriteServiceExceptionErrorDetail

public void WriteWriteServiceExceptionErrorDetail(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            if (error != null)
            {
                ConsoleHelper.WriteErrorLine(spacing + "Error code...: '{0}'", error.Code);
                ConsoleHelper.WriteErrorLine(spacing + "Error message: '{0}'", error.Message);
            }
<#+

}

// *** WriteWriteServiceExceptionRequest

public void WriteWriteServiceExceptionRequest(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            if (request != null)
            {
                ConsoleHelper.WriteErrorLine("Request:");
                ConsoleHelper.WriteErrorLine("..URI...: '{0}'", request.RequestUri.AbsoluteUri);
                ConsoleHelper.WriteErrorLine("..Method: '{0}'", request.Method.Method);
                this.WriteHeaders(request.Headers);
            }
<#+

}

// *** WriteWriteServiceExceptionResponse

public void WriteWriteServiceExceptionResponse(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            if (response != null)
            {
                ConsoleHelper.WriteErrorLine("Response:");
                ConsoleHelper.WriteErrorLine("..StatusCode..: '{0}'", response.StatusCode);
                ConsoleHelper.WriteErrorLine("..ReasonPhrase: '{0}'", response.ReasonPhrase);
                this.WriteHeaders(response.Headers);
            }
<#+

}

// *** WriteWriteServiceExceptionInner

public void WriteWriteServiceExceptionInner(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            if (ex != null)
            {
                ConsoleHelper.WriteErrorLine("Inner Exception:");
                ConsoleHelper.WriteErrorLine("..Message: '{0}'", ex.Message);
            }
<#+

}

// *** WriteWriteHeaders

public void WriteWriteHeaders(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            if (headers != null)
            {
                ConsoleHelper.WriteErrorLine("..Headers:");

                foreach (string key in headers.Keys)
                {
                    ConsoleHelper.WriteErrorLine("....Header '{0}'", key);

                    foreach (string value in headers[key])
                    {
                        ConsoleHelper.WriteErrorLine("......'{0}'", value);
                    }
                }
            }
<#+

}

// *** WriteCheckConfiguration

public void WriteCheckConfiguration(ModelWriter modelWriter, MethodBodyModel model)
{
    ServiceModel sourceModel = model.RootModelAs<CSharpFileModel>().SourceModel as ServiceModel;

#>
            if (this.Configuration.Environments == null)
            {
                ConsoleHelper.WriteErrorLine("The environments are missing in configuration.");
                ConsoleHelper.WriteErrorLine("Please press any key to quit.");
                ConsoleHelper.ReadKey();
                return false;
            }

            if (string.IsNullOrEmpty(this.Configuration.Environments.LocalServiceBaseUri) &&
                string.IsNullOrEmpty(this.Configuration.Environments.DevelopmentServiceBaseUri) &&
                string.IsNullOrEmpty(this.Configuration.Environments.StagingServiceBaseUri) &&
                string.IsNullOrEmpty(this.Configuration.Environments.PreviewServiceBaseUri) &&
                string.IsNullOrEmpty(this.Configuration.Environments.ProductionServiceBaseUri))
            {
                ConsoleHelper.WriteErrorLine("You need to the specify the address of at least one environment in configuration.");
                ConsoleHelper.WriteErrorLine("Please press any key to quit.");
                ConsoleHelper.ReadKey();
                return false;
            }

            return true;
<#+

}

// *** WriteWriteConfiguration

public void WriteWriteConfiguration(ModelWriter modelWriter, MethodBodyModel model)
{
    ServiceModel sourceModel = model.RootModelAs<CSharpFileModel>().SourceModel as ServiceModel;

#>
            ConsoleHelper.WriteLine("=======================================");
            ConsoleHelper.WriteLine("Service: {0}", this.Configuration.ServiceBaseUri);
<#+
   
    if (sourceModel.UseClientCredentialsClient)
    {

#>
            ConsoleHelper.WriteLine("Client Id: {0}", Constants.ClientId);
<#+

    }

#>
            this.WriteAdditionalConfiguration();
            ConsoleHelper.WriteLine("=======================================");
<#+

}

// *** WriteGetString1

public void WriteGetString1(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            return this.GetValueString(name, true, defaultValue);
<#+

}

// *** WriteGetString2

public void WriteGetString2(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            string value = defaultValue;

            bool cont = false;
            while (!cont)
            {
                if (required)
                {
                    if (string.IsNullOrEmpty(defaultValue))
                    {
                        ConsoleHelper.Write($"Please enter the {name}: ");
                    }
                    else
                    {
                        ConsoleHelper.Write($"Please enter the {name} (blank = {defaultValue}): ");
                    }
                }
                else
                {
                    if (string.IsNullOrEmpty(defaultValue))
                    {
                        ConsoleHelper.Write($"Please enter the {name} (blank = ignore): ");
                    }
                    else
                    {
                        if (blankToStop)
                        {
                            ConsoleHelper.Write($"Please enter the {name} (blank to stop): ");
                        }
                        else
                        {
                            ConsoleHelper.Write($"Please enter the {name} (blank = {defaultValue}): ");
                        }
                    }
                }

                string valueStr = System.Console.ReadLine();
                if (!string.IsNullOrEmpty(valueStr))
                {
                    value = valueStr;
                }

                if (required)
                {
                    cont = !string.IsNullOrEmpty(value);
                }
                else
                {
                    cont = true;
                }
            }

            return value;
<#+

}

// *** WriteGetStrings

public void WriteGetStrings(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            List<string> result = new List<string>();

            bool stop = false;
            bool first = true;

            while (!stop)
            {
                string value = this.GetValueString(name, required && first, first ? defaultValue : null, true);

                if (!string.IsNullOrEmpty(value))
                {
                    result.Add(value);
                }
                else
                {
                    stop = true;
                }

                first = false;
            }

            return result;
<#+

}

// *** WriteGetIntegers

public void WriteGetIntegers(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            List<int> result = new List<int>();

            bool stop = false;
            bool first = true;

            while (!stop)
            {
                int? value = this.GetValueInteger(name, required && first, first ? defaultValue : null, true);

                if (value != null)
                {
                    result.Add(value.Value);
                }
                else
                {
                    stop = true;
                }

                first = false;
            }

            return result;
<#+

}

// *** WriteGetDictionaryString

public void WriteGetDictionaryString(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            Dictionary<string, string> result = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);

            bool stop = false;
            bool first = true;

            while (!stop)
            {
                string key = this.GetValueString(keyName, notEmpty && first, null, first ? !notEmpty : true);

                if (!string.IsNullOrEmpty(key))
                {
                    string value = this.GetValueString(valueName, valueRequired);

                    if (result.ContainsKey(key))
                    {
                        result[key] = value;
                    }
                    else
                    {
                        result.Add(key, value);
                    }
                }
                else
                {
                    stop = true;
                }

                first = false;
            }

            return result;
<#+

}

// *** WriteGetBoolean1

public void WriteGetBoolean1(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            return this.GetValueBoolean(name, true, defaultValue);
<#+

}

// *** WriteGetBoolean2

public void WriteGetBoolean2(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            bool? value = defaultValue;

            bool cont = false;
            while (!cont)
            {
                if (required)
                {
                    if (defaultValue == null)
                    {
                        ConsoleHelper.Write($"Please enter the {name} (y/n): ");
                    }
                    else
                    {
                        string defaultValueStr = defaultValue ?? false ? "y" : "n";
                        ConsoleHelper.Write($"Please enter the {name} (y/n) (blank = {defaultValueStr}): ");
                    }
                }
                else
                {
                    if (defaultValue == null)
                    {
                        ConsoleHelper.Write($"Please enter the {name} (y/n) (blank = ignore): ");
                    }
                    else
                    {
                        if (blankToStop)
                        {
                            ConsoleHelper.Write($"Please enter the {name} (y/n) (blank to stop): ");
                        }
                        else
                        {
                            string defaultValueStr = defaultValue ?? false ? "y" : "n";
                            ConsoleHelper.Write($"Please enter the {name} (y/n) (blank = {defaultValueStr}): ");
                        }
                    }
                }

                string valueStr = System.Console.ReadLine();
                if (!string.IsNullOrEmpty(valueStr))
                {
                    if (valueStr.EqualsNoCase("Y"))
                    {
                        value = true;
                    }
                    else if (valueStr.EqualsNoCase("N"))
                    {
                        value = false;
                    }
                    else
                    {
                        value = null;
                    }
                }

                if (required)
                {
                    cont = value != null;
                }
                else
                {
                    cont = true;
                }
            }

            return value.GetValueOrDefault();
<#+

}

// *** WriteGetInteger1

public void WriteGetInteger1(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            return this.GetValueInteger(name, true, defaultValue).GetValueOrDefault();
<#+

}

// *** WriteGetInteger2

public void WriteGetInteger2(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            int? value = defaultValue;

            bool cont = false;
            while (!cont)
            {
                if (required)
                {
                    if (defaultValue == null)
                    {
                        ConsoleHelper.Write($"Please enter the {name}: ");
                    }
                    else
                    {
                        ConsoleHelper.Write($"Please enter the {name} (blank = {defaultValue}): ");
                    }
                }
                else
                {
                    if (defaultValue == null)
                    {
                        ConsoleHelper.Write($"Please enter the {name} (blank = ignore): ");
                    }
                    else
                    {
                        if (blankToStop)
                        {
                            ConsoleHelper.Write($"Please enter the {name} (blank to stop): ");
                        }
                        else
                        {
                            ConsoleHelper.Write($"Please enter the {name} (blank = {defaultValue}): ");
                        }
                    }
                }

                string valueStr = System.Console.ReadLine();
                if (!string.IsNullOrEmpty(valueStr))
                {
                    if (int.TryParse(valueStr, out int valueInt))
                    {
                        value = valueInt;
                    }
                }

                if (required)
                {
                    cont = value != null;
                }
                else
                {
                    cont = true;
                }
            }

            return value;
<#+

}

// *** WriteGetLong1

public void WriteGetLong1(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            return this.GetValueLong(name, true, defaultValue);
<#+

}

// *** WriteGetLong2

public void WriteGetLong2(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            long? value = defaultValue;

            bool cont = false;
            while (!cont)
            {
                if (required)
                {
                    if (defaultValue == null)
                    {
                        ConsoleHelper.Write($"Please enter the {name}: ");
                    }
                    else
                    {
                        ConsoleHelper.Write($"Please enter the {name} (blank = {defaultValue}): ");
                    }
                }
                else
                {
                    if (defaultValue == null)
                    {
                        ConsoleHelper.Write($"Please enter the {name} (blank = ignore): ");
                    }
                    else
                    {
                        if (blankToStop)
                        {
                            ConsoleHelper.Write($"Please enter the {name} (blank to stop): ");
                        }
                        else
                        {
                            ConsoleHelper.Write($"Please enter the {name} (blank = {defaultValue}): ");
                        }
                    }
                }

                string valueStr = System.Console.ReadLine();
                if (!string.IsNullOrEmpty(valueStr))
                {
                    if (long.TryParse(valueStr, out long valueLong))
                    {
                        value = valueLong;
                    }
                }

                if (required)
                {
                    cont = value != null;
                }
                else
                {
                    cont = true;
                }
            }

            return value.GetValueOrDefault();
<#+

}

// *** WriteGetDouble1

public void WriteGetDouble1(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            return this.GetValueDouble(name, true, defaultValue);
<#+

}

// *** WriteGetDouble2

public void WriteGetDouble2(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            double? value = defaultValue;

            bool cont = false;
            while (!cont)
            {
                if (required)
                {
                    if (defaultValue == null)
                    {
                        ConsoleHelper.Write($"Please enter the {name}: ");
                    }
                    else
                    {
                        ConsoleHelper.Write($"Please enter the {name} (blank = {defaultValue}): ");
                    }
                }
                else
                {
                    if (defaultValue == null)
                    {
                        ConsoleHelper.Write($"Please enter the {name} (blank = ignore): ");
                    }
                    else
                    {
                        if (blankToStop)
                        {
                            ConsoleHelper.Write($"Please enter the {name} (blank to stop): ");
                        }
                        else
                        {
                            ConsoleHelper.Write($"Please enter the {name} (blank = {defaultValue}): ");
                        }
                    }
                }

                string valueStr = System.Console.ReadLine();
                if (!string.IsNullOrEmpty(valueStr))
                {
                    if (double.TryParse(valueStr, out double valueDouble))
                    {
                        value = valueDouble;
                    }
                }

                if (required)
                {
                    cont = value != null;
                }
                else
                {
                    cont = true;
                }
            }

            return value.GetValueOrDefault();
<#+

}

// *** WriteGetDecimal1

public void WriteGetDecimal1(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            return this.GetValueDecimal(name, true, defaultValue);
<#+

}

// *** WriteGetDecimal2

public void WriteGetDecimal2(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            decimal? value = defaultValue;

            bool cont = false;
            while (!cont)
            {
                if (required)
                {
                    if (defaultValue == null)
                    {
                        ConsoleHelper.Write($"Please enter the {name}: ");
                    }
                    else
                    {
                        ConsoleHelper.Write($"Please enter the {name} (blank = {defaultValue}): ");
                    }
                }
                else
                {
                    if (defaultValue == null)
                    {
                        ConsoleHelper.Write($"Please enter the {name} (blank = ignore): ");
                    }
                    else
                    {
                        if (blankToStop)
                        {
                            ConsoleHelper.Write($"Please enter the {name} (blank to stop): ");
                        }
                        else
                        {
                            ConsoleHelper.Write($"Please enter the {name} (blank = {defaultValue}): ");
                        }
                    }
                }

                string valueStr = System.Console.ReadLine();
                if (!string.IsNullOrEmpty(valueStr))
                {
                    if (decimal.TryParse(valueStr, out decimal valueDecimal))
                    {
                        value = valueDecimal;
                    }
                }

                if (required)
                {
                    cont = value != null;
                }
                else
                {
                    cont = true;
                }
            }

            return value.GetValueOrDefault();
<#+

}

// *** WriteGetDateTime1

public void WriteGetDateTime1(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            return this.GetValueDateTime(name, true, defaultValue);
<#+

}

// *** WriteGetDateTime2

public void WriteGetDateTime2(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            DateTime? value = defaultValue;

            bool cont = false;
            while (!cont)
            {
                if (required)
                {
                    if (defaultValue == null)
                    {
                        ConsoleHelper.Write($"Please enter the {name}: ");
                    }
                    else
                    {
                        ConsoleHelper.Write($"Please enter the {name} (blank = {defaultValue}): ");
                    }
                }
                else
                {
                    if (defaultValue == null)
                    {
                        ConsoleHelper.Write($"Please enter the {name} (blank = ignore): ");
                    }
                    else
                    {
                        if (blankToStop)
                        {
                            ConsoleHelper.Write($"Please enter the {name} (blank to stop): ");
                        }
                        else
                        {
                            ConsoleHelper.Write($"Please enter the {name} (blank = {defaultValue}): ");
                        }
                    }
                }

                string valueStr = System.Console.ReadLine();
                if (!string.IsNullOrEmpty(valueStr))
                {
                    if (DateTime.TryParse(valueStr, out DateTime valueDateTime))
                    {
                        value = valueDateTime;
                    }
                }

                if (required)
                {
                    cont = value != null;
                }
                else
                {
                    cont = true;
                }
            }

            return value.GetValueOrDefault();
<#+

}

// *** WriteGetGuid1

public void WriteGetGuid1(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            return this.GetValueGuid(name, true, defaultValue);
<#+

}

// *** WriteGetGuid2

public void WriteGetGuid2(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            Guid? value = defaultValue;

            bool cont = false;
            while (!cont)
            {
                if (required)
                {
                    if (defaultValue == null)
                    {
                        ConsoleHelper.Write($"Please enter the {name}: ");
                    }
                    else
                    {
                        ConsoleHelper.Write($"Please enter the {name} (blank = {defaultValue}): ");
                    }
                }
                else
                {
                    if (defaultValue == null)
                    {
                        ConsoleHelper.Write($"Please enter the {name} (blank = ignore): ");
                    }
                    else
                    {
                        if (blankToStop)
                        {
                            ConsoleHelper.Write($"Please enter the {name} (blank to stop): ");
                        }
                        else
                        {
                            ConsoleHelper.Write($"Please enter the {name} (blank = {defaultValue}): ");
                        }
                    }
                }

                string valueStr = System.Console.ReadLine();
                if (!string.IsNullOrEmpty(valueStr))
                {
                    if (Guid.TryParse(valueStr, out Guid valueGuid))
                    {
                        value = valueGuid;
                    }
                }

                if (required)
                {
                    cont = value != null;
                }
                else
                {
                    cont = true;
                }
            }

            return value.GetValueOrDefault();
<#+

}

// *** WriteGetEnum1

public void WriteGetEnum1(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            return this.GetValueEnum(name, true, defaultValue);
<#+

}

// *** WriteGetEnum2

public void WriteGetEnum2(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            TEnum? value = defaultValue;

            bool cont = false;
            while (!cont)
            {
                if (required)
                {
                    if (defaultValue == null)
                    {
                        ConsoleHelper.Write($"Please enter the {name}: ");
                    }
                    else
                    {
                        ConsoleHelper.Write($"Please enter the {name} (blank = {defaultValue}): ");
                    }
                }
                else
                {
                    if (defaultValue == null)
                    {
                        ConsoleHelper.Write($"Please enter the {name} (blank = ignore): ");
                    }
                    else
                    {
                        if (blankToStop)
                        {
                            ConsoleHelper.Write($"Please enter the {name} (blank to stop): ");
                        }
                        else
                        {
                            ConsoleHelper.Write($"Please enter the {name} (blank = {defaultValue}): ");
                        }
                    }
                }

                string valueStr = System.Console.ReadLine();
                if (!string.IsNullOrEmpty(valueStr))
                {
                    if (Enum.TryParse(valueStr, true, out TEnum valueEnum))
                    {
                        value = valueEnum;
                    }
                }

                if (required)
                {
                    cont = value != null;
                }
                else
                {
                    cont = true;
                }
            }

            return value.GetValueOrDefault();
<#+

}

// *** WriteGetUri1

public void WriteGetUri1(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            return this.GetValueUri(name, true, defaultValue);
<#+

}

// *** WriteGetUri2

public void WriteGetUri2(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            Uri value = defaultValue;

            bool cont = false;
            while (!cont)
            {
                if (required)
                {
                    if (defaultValue == null)
                    {
                        ConsoleHelper.Write($"Please enter the {name}: ");
                    }
                    else
                    {
                        ConsoleHelper.Write($"Please enter the {name} (blank = {defaultValue}): ");
                    }
                }
                else
                {
                    if (defaultValue == null)
                    {
                        ConsoleHelper.Write($"Please enter the {name} (blank = ignore): ");
                    }
                    else
                    {
                        if (blankToStop)
                        {
                            ConsoleHelper.Write($"Please enter the {name} (blank to stop): ");
                        }
                        else
                        {
                            ConsoleHelper.Write($"Please enter the {name} (blank = {defaultValue}): ");
                        }
                    }
                }

                string valueStr = System.Console.ReadLine();
                if (!string.IsNullOrEmpty(valueStr))
                {
                    if (Uri.TryCreate(valueStr, UriKind.Absolute, out Uri valueUri))
                    {
                        value = valueUri;
                    }
                }

                if (required)
                {
                    cont = value != null;
                }
                else
                {
                    cont = true;
                }
            }

            return value;
<#+

}

// *** WriteWriteEndpoints

public void WriteWriteEndpoints(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            ConsoleHelper.WriteInformationLine("Endpoints:");

            if (endpoints != null)
            {
                foreach (EndpointInfo endpoint in endpoints.OrderBy(e => e.RoutePattern).ThenBy(e => e.HttpMethods))
                {
                    this.WriteEndpoint("..", endpoint);
                }
            }
<#+

}

// *** WriteWriteEndpoint

public void WriteWriteEndpoint(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            ConsoleHelper.WriteInformationLine(spacing + "Endpoint:");
            ConsoleHelper.WriteInformationLine(spacing + "..HttpMethods...: {0}", endpoint.HttpMethods);
            ConsoleHelper.WriteInformationLine(spacing + "..RoutePattern..: {0}", endpoint.RoutePattern);
            ConsoleHelper.WriteInformationLine(spacing + "..EndpointName..: {0}", endpoint.EndpointName);
            ConsoleHelper.WriteInformationLine(spacing + "..RouteName.....: {0}", endpoint.RouteName);
            ConsoleHelper.WriteInformationLine(spacing + "..ControllerName: {0}", endpoint.ControllerName);
            ConsoleHelper.WriteInformationLine(spacing + "..ActionName....: {0}", endpoint.ActionName);
            ConsoleHelper.WriteInformationLine(spacing + "..Order.........: {0}", endpoint.Order);
            ConsoleHelper.WriteInformationLine(spacing + "..DisplayName...: {0}", endpoint.DisplayName);
            ConsoleHelper.WriteInformationLine(spacing + "..ApiVersions...: {0}", endpoint.ApiVersions);
            ConsoleHelper.WriteInformationLine(spacing + "..Secured.......: {0}", endpoint.Secured);
<#+

}

// *** WriteSelectEnvironment

public void WriteSelectEnvironment(ModelWriter modelWriter, MethodBodyModel model)
{

#>
            bool hasLocalDevelopment = !string.IsNullOrEmpty(this.Configuration.Environments.LocalServiceBaseUri);
            bool hasDevelopment = !string.IsNullOrEmpty(this.Configuration.Environments.DevelopmentServiceBaseUri);
            bool hasStaging = !string.IsNullOrEmpty(this.Configuration.Environments.StagingServiceBaseUri);
            bool hasPreview = !string.IsNullOrEmpty(this.Configuration.Environments.PreviewServiceBaseUri);
            bool hasProduction = !string.IsNullOrEmpty(this.Configuration.Environments.ProductionServiceBaseUri);

            List<string> selectors = new List<string>();

            if (hasLocalDevelopment)
            {
                selectors.Add("1 = Local");
            }

            if (hasDevelopment)
            {
                selectors.Add("2 = Development");
            }

            if (hasStaging)
            {
                selectors.Add("3 = Staging");
            }

            if (hasPreview)
            {
                selectors.Add("4 = Preview");
            }

            if (hasProduction)
            {
                selectors.Add("5 = Production");
            }

            ConsoleHelper.WriteLine();
            ConsoleHelper.Write($"Please select the environment ({string.Join(", ", selectors)}): ");
            ConsoleKeyInfo keyEnv = ConsoleHelper.ReadKey();
            ConsoleHelper.WriteLine();

            switch (keyEnv.Key)
            {
                case ConsoleKey.D2:
                case ConsoleKey.NumPad2:
                    this.Configuration.ServiceBaseUri = this.Configuration.Environments.DevelopmentServiceBaseUri;
                    break;
                case ConsoleKey.D3:
                case ConsoleKey.NumPad3:
                    this.Configuration.ServiceBaseUri = this.Configuration.Environments.StagingServiceBaseUri;
                    break;
                case ConsoleKey.D4:
                case ConsoleKey.NumPad4:
                    this.Configuration.ServiceBaseUri = this.Configuration.Environments.PreviewServiceBaseUri;
                    break;
                case ConsoleKey.D5:
                case ConsoleKey.NumPad5:
                    this.Configuration.ServiceBaseUri = this.Configuration.Environments.ProductionServiceBaseUri;
                    break;
                default:
                    if (hasLocalDevelopment)
                    {
                        this.Configuration.ServiceBaseUri = this.Configuration.Environments.LocalServiceBaseUri;
                    }
                    else if (hasDevelopment)
                    {
                        this.Configuration.ServiceBaseUri = this.Configuration.Environments.DevelopmentServiceBaseUri;
                    }
                    else if (hasStaging)
                    {
                        this.Configuration.ServiceBaseUri = this.Configuration.Environments.StagingServiceBaseUri;
                    }
                    else if (hasPreview)
                    {
                        this.Configuration.ServiceBaseUri = this.Configuration.Environments.PreviewServiceBaseUri;
                    }
                    else
                    {
                        this.Configuration.ServiceBaseUri = this.Configuration.Environments.ProductionServiceBaseUri;
                    }

                    break;
            }

            ConsoleHelper.WriteLine();

            this.DisposeServiceClient();
<#+

}

#>