<#+

// *** TransformServiceModel

public void TransformServiceModel(DomainModelElement sourceElement, CSharpFileModel targetModel)
{
    ServiceModel sourceModel = sourceElement as ServiceModel;
    if (sourceModel == null)
    {
        return;
    }

    targetModel
        .WithNamespaceImport(new NamespaceImportModel("System.CodeDom.Compiler"))
        .WithNamespaceImport(new NamespaceImportModel("System.Diagnostics.CodeAnalysis"));

    targetModel.Namespace = new NamespaceModel(sourceModel.Namespace + ".Client.Console.Configuration");

    targetModel.Namespace
        .AddClass(new ClassModel("ApplicationConfigurationBase")
        {
            Modifiers = ClassModifiers.Public | ClassModifiers.Partial | ClassModifiers.Abstract,
            Documentation = new DocumentationModel("Defines the base class for the configuration used by the application.")
        })
            .AddProperty(new PropertyModel("ServiceBaseUri", "string")
            {
                Modifiers = PropertyModifiers.Public | PropertyModifiers.Virtual,
                GetAccessor = new PropertyGetAccessorModel(),
                SetAccessor = new PropertySetAccessorModel(),
                Documentation = new DocumentationModel("Gets or sets the service Web API base URI.")
            })
                .WithAttribute(new AttributeModel("SuppressMessage(\"Microsoft.Design\", \"CA1056:UriPropertiesShouldNotBeStrings\")"))
                .ParentModelAs<ClassModel>()
            .AddProperty(new PropertyModel("Environments", "EnvironmentsConfiguration")
            {
                Modifiers = PropertyModifiers.Public | PropertyModifiers.Virtual,
                GetAccessor = new PropertyGetAccessorModel(),
                SetAccessor = new PropertySetAccessorModel(),
                Documentation = new DocumentationModel("Gets or sets the environments configuration.")
            })
                .WithAttribute(new AttributeModel("SuppressMessage(\"Microsoft.Design\", \"CA1056:UriPropertiesShouldNotBeStrings\")"))
                .ParentModelAs<ClassModel>()
            .WithConstructor(new ConstructorModel()
            {
                Modifiers = ConstructorModifiers.Protected,
                Documentation = new DocumentationModel("Initializes a new instance of the <see cref=\"ApplicationConfigurationBase\"/> class.")
            })
            .WithMethod(new MethodModel("SetDefaultValues")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Sets the default values.")
                {
                    Remarks = "This method should be overridden to set the default values of properties."
                }
            })
            .ParentModelAs<NamespaceModel>()
        .AddClass(new ClassModel("ApplicationConfiguration")
        {
            Modifiers = ClassModifiers.Public | ClassModifiers.Partial,
            Inheritance = "ApplicationConfigurationBase",
            Documentation = new DocumentationModel("Defines the configuration used by the application.")
            {
                SeeAlso = new string[] { "ApplicationConfigurationBase" }
            }
        })
            .WithConstructor(new ConstructorModel()
            {
                Modifiers = ConstructorModifiers.Public,
                Inheritance = "base()",
                Documentation = new DocumentationModel("Initializes a new instance of the <see cref=\"ApplicationConfiguration\"/> class.")
            });

    targetModel.Namespace
        .AddClass(new ClassModel("EnvironmentsConfigurationBase")
        {
            Modifiers = ClassModifiers.Public | ClassModifiers.Partial | ClassModifiers.Abstract,
            Documentation = new DocumentationModel("Defines the base class for the configuration of an environment.")
        })
            .AddProperty(new PropertyModel("LocalServiceBaseUri", "string")
            {
                Modifiers = PropertyModifiers.Public | PropertyModifiers.Virtual,
                GetAccessor = new PropertyGetAccessorModel(),
                SetAccessor = new PropertySetAccessorModel(),
                Documentation = new DocumentationModel("Gets or sets the service base URI on the local development environment.")
            })
                .WithAttribute(new AttributeModel("SuppressMessage(\"Microsoft.Design\", \"CA1056:UriPropertiesShouldNotBeStrings\")"))
                .ParentModelAs<ClassModel>()
            .AddProperty(new PropertyModel("DevelopmentServiceBaseUri", "string")
            {
                Modifiers = PropertyModifiers.Public | PropertyModifiers.Virtual,
                GetAccessor = new PropertyGetAccessorModel(),
                SetAccessor = new PropertySetAccessorModel(),
                Documentation = new DocumentationModel("Gets or sets the service base URI on the development environment.")
            })
                .WithAttribute(new AttributeModel("SuppressMessage(\"Microsoft.Design\", \"CA1056:UriPropertiesShouldNotBeStrings\")"))
                .ParentModelAs<ClassModel>()
            .AddProperty(new PropertyModel("StagingServiceBaseUri", "string")
            {
                Modifiers = PropertyModifiers.Public | PropertyModifiers.Virtual,
                GetAccessor = new PropertyGetAccessorModel(),
                SetAccessor = new PropertySetAccessorModel(),
                Documentation = new DocumentationModel("Gets or sets the service base URI on the stating environment.")
            })
                .WithAttribute(new AttributeModel("SuppressMessage(\"Microsoft.Design\", \"CA1056:UriPropertiesShouldNotBeStrings\")"))
                .ParentModelAs<ClassModel>()
            .AddProperty(new PropertyModel("PreviewServiceBaseUri", "string")
            {
                Modifiers = PropertyModifiers.Public | PropertyModifiers.Virtual,
                GetAccessor = new PropertyGetAccessorModel(),
                SetAccessor = new PropertySetAccessorModel(),
                Documentation = new DocumentationModel("Gets or sets the service base URI on the preview environment.")
            })
                .WithAttribute(new AttributeModel("SuppressMessage(\"Microsoft.Design\", \"CA1056:UriPropertiesShouldNotBeStrings\")"))
                .ParentModelAs<ClassModel>()
            .AddProperty(new PropertyModel("ProductionServiceBaseUri", "string")
            {
                Modifiers = PropertyModifiers.Public | PropertyModifiers.Virtual,
                GetAccessor = new PropertyGetAccessorModel(),
                SetAccessor = new PropertySetAccessorModel(),
                Documentation = new DocumentationModel("Gets or sets the service base URI on the production environment.")
            })
                .WithAttribute(new AttributeModel("SuppressMessage(\"Microsoft.Design\", \"CA1056:UriPropertiesShouldNotBeStrings\")"))
                .ParentModelAs<ClassModel>()
            .WithConstructor(new ConstructorModel()
            {
                Modifiers = ConstructorModifiers.Protected,
                Documentation = new DocumentationModel("Initializes a new instance of the <see cref=\"EnvironmentsConfigurationBase\"/> class.")
            })
            .WithMethod(new MethodModel("SetDefaultValues")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Sets the default values.")
                {
                    Remarks = "This method should be overridden to set the default values of properties."
                }
            })
            .ParentModelAs<NamespaceModel>()
        .AddClass(new ClassModel("EnvironmentsConfiguration")
        {
            Modifiers = ClassModifiers.Public | ClassModifiers.Partial,
            Inheritance = "EnvironmentsConfigurationBase",
            Documentation = new DocumentationModel("Defines the configuration of an environment.")
            {
                SeeAlso = new string[] { "EnvironmentsConfigurationBase" }
            }
        })
            .WithConstructor(new ConstructorModel()
            {
                Modifiers = ConstructorModifiers.Public,
                Inheritance = "base()",
                Documentation = new DocumentationModel("Initializes a new instance of the <see cref=\"EnvironmentsConfiguration\"/> class.")
            });
}

#>