//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Primavera.Hydrogen.Configuration;
using Primavera.Hydrogen.Hosting;
using Primavera.Lithium.PythonConnector.Client.Console.Configuration;

namespace Primavera.Lithium.PythonConnector.Client.Console
{
    #region Code

    #region Public Classes

    /// <summary>
    /// Defines the starting point of the application.
    /// </summary>
    [GeneratedCode("Lithium", "2.0")]
    public static partial class Program
    {
        #region Code

        #region Public Methods

        /// <summary>
        /// Executes the application.
        /// </summary>
        /// <param name="args">The command line arguments.</param>
        /// <returns>
        /// The <see cref="Task"/> that represents the asynchronous operation.
        /// </returns>
        public static async Task Main(string[] args)
        {
            // Create the host builder

            HostBuilder builder = new HostBuilder();

            // Build the host

            IConsoleHost host = builder.Build<Application>(args);

            // Run the application

            await host.RunAsync().ConfigureAwait(false);
        }

        #endregion

        #endregion
    }

    #endregion

    #region Internal Classes

    /// <summary>
    /// Defines the base class for the host builder.
    /// </summary>
    [GeneratedCode("Lithium", "2.0")]
    internal abstract partial class HostBuilderBase
    {
        #region Code

        #region Protected Properties

        /// <summary>
        /// Gets a value indicating whether development settings should be used regardless of the current environment. The default value is false.
        /// </summary>
        protected virtual bool UseDevelopmentSettings
        {
            get
            {
                return false;
            }
        }

        #endregion

        #region Protected Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="HostBuilderBase" /> class.
        /// </summary>
        protected HostBuilderBase()        
        {
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Builds the <see cref="IConsoleHost" /> instance.
        /// </summary>
        /// <typeparam name="TApplication">The type of the console interactive application that should be automatically executed when the application starts.</typeparam>
        /// <param name="args">The arguments.</param>
        /// <returns>
        /// The <see cref="IConsoleHost" /> instance.
        /// </returns>
        public virtual IConsoleHost Build<TApplication>(string[] args)
            where TApplication : IConsoleInteractiveApplication
        {
            // Create the host builder

            IConsoleHostBuilder builder = new ConsoleHostBuilder();

            // Setup host configuration

            builder = builder.ConfigureHostConfiguration(this.ConfigureHostConfiguration);

            // Setup application configuration

            builder = builder.ConfigureAppConfiguration(
                (context, config) =>
                {
                    this.ConfigureAppConfiguration(context, config, args);
                });

            // Configure logging

            builder = builder.ConfigureLogging(this.ConfigureLogging);

            // Configure services

            builder = builder.ConfigureServices(this.ConfigureServices);

            // Result

            return builder.Build<Application>();
        }

        #endregion

        #region Protected Methods

        /// <summary>
        /// Configures the host configuration.
        /// </summary>
        /// <param name="builder">The configuration builder.</param>
        protected virtual void ConfigureHostConfiguration(IConfigurationBuilder builder)
        {
        }

        /// <summary>
        /// Configures the application configuration.
        /// </summary>
        /// <param name="context">The host builder context.</param>
        /// <param name="builder">The configuration builder.</param>
        /// <param name="args">The command line arguments.</param>
        protected virtual void ConfigureAppConfiguration(HostBuilderContext context, IConfigurationBuilder builder, string[] args)
        {
            // Set base path

            builder
                .SetBasePath(Environment.CurrentDirectory);

            // JSON configuration

            builder
                .AddJsonFile("GeneratedCode/appsettings.gen.json", optional: false, reloadOnChange: true)
                .AddJsonFile("CustomCode/appsettings.json", optional: true, reloadOnChange: true);

            // Environment variables

            builder
                .AddEnvironmentVariables();

            // Command line arguments

            builder
                .AddCommandLine(args);
        }

        /// <summary>
        /// Configures logging.
        /// </summary>
        /// <param name="context">The host builder context.</param>
        /// <param name="builder">The logging builder.</param>
        protected virtual void ConfigureLogging(HostBuilderContext context, ILoggingBuilder builder)
        {
            // Clear default providers

            builder
                .ClearProviders();

            // Configuration

            builder
                .AddConfiguration(context.Configuration.GetSection("Logging"));

            // Console and debug

            bool useDevelopmentSettings = this.UseDevelopmentSettings || context.HostingEnvironment.IsDevelopment();

            if (useDevelopmentSettings)
            {
                builder
                    .AddConsole()
                    .AddDebug();
            }
        }

        /// <summary>
        /// Configures services.
        /// </summary>
        /// <param name="context">The host builder context.</param>
        /// <param name="services">The service collection.</param>
        protected virtual void ConfigureServices(HostBuilderContext context, IServiceCollection services)
        {
            // Configuration

            services
                .AddOptions()
                .Configure<ApplicationConfiguration>(context.Configuration.GetSection(nameof(ApplicationConfiguration)));

            services
                .AddOptionsSnapshot<ApplicationConfiguration>();
        }

        #endregion

        #endregion
    }

    /// <summary>
    /// Defines the host builder.
    /// </summary>
    [GeneratedCode("Lithium", "2.0")]
    internal partial class HostBuilder : HostBuilderBase
    {
        #region Code

        #region Public Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="HostBuilder" /> class.
        /// </summary>
        public HostBuilder()        
            : base()
        {
        }

        #endregion

        #endregion
    }

    #endregion

    #endregion
}
