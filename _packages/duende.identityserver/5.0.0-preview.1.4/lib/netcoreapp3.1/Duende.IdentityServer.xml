<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Duende.IdentityServer</name>
    </assembly>
    <members>
        <member name="T:Duende.IdentityServer.Configuration.CryptoHelper">
            <summary>
            Crypto helper
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Configuration.CryptoHelper.CreateRsaSecurityKey(System.Int32)">
            <summary>
            Creates a new RSA security key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Configuration.CryptoHelper.CreateECDsaSecurityKey(System.String)">
            <summary>
            Creates a new ECDSA security key.
            </summary>
            <param name="curve">The name of the curve as defined in
            https://tools.ietf.org/html/rfc7518#section-6.2.1.1.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Configuration.CryptoHelper.CreateRsaSecurityKey(System.Security.Cryptography.RSAParameters,System.String)">
            <summary>
            Creates an RSA security key.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Configuration.CryptoHelper.CreateHashClaimValue(System.String,System.String)">
            <summary>
            Creates the hash for the various hash claims (e.g. c_hash, at_hash or s_hash).
            </summary>
            <param name="value">The value to hash.</param>
            <param name="tokenSigningAlgorithm">The token signing algorithm</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Configuration.CryptoHelper.GetHashAlgorithmForSigningAlgorithm(System.String)">
            <summary>
            Returns the matching hashing algorithm for a token signing algorithm
            </summary>
            <param name="signingAlgorithm">The signing algorithm</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Configuration.CryptoHelper.GetCurveFromCrvValue(System.String)">
            <summary>
            Returns the matching named curve for RFC 7518 crv value
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Configuration.CryptoHelper.GetCrvValueFromCurve(System.Security.Cryptography.ECCurve)">
            <summary>
            Return the matching RFC 7518 crv value for curve
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.NameType">
            <summary>
            Describes the string so we know what to search for in certificate store
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Configuration.NameType.SubjectDistinguishedName">
            <summary>
            subject distinguished name
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Configuration.NameType.Thumbprint">
            <summary>
            thumbprint
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.IdentityServerBuilder">
            <summary>
            IdentityServer helper class for DI configuration
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Configuration.IdentityServerBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Configuration.IdentityServerBuilder"/> class.
            </summary>
            <param name="services">The services.</param>
            <exception cref="T:System.ArgumentNullException">services</exception>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerBuilder.Services">
            <summary>
            Gets the services.
            </summary>
            <value>
            The services.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.AuthenticationOptions">
            <summary>
            Configures the login and logout views and behavior.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.AuthenticationOptions.CookieAuthenticationScheme">
            <summary>
            Sets the cookie authentication scheme configured by the host used for interactive users. If not set, the scheme will inferred from the host's default authentication scheme.
            This setting is typically used when AddPolicyScheme is used in the host as the default scheme.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.AuthenticationOptions.CookieLifetime">
            <summary>
            Sets the cookie lifetime (only effective if the IdentityServer-provided cookie handler is used)
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.AuthenticationOptions.CookieSlidingExpiration">
            <summary>
            Specified if the cookie should be sliding or not (only effective if the built-in cookie middleware is used)
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.AuthenticationOptions.CookieSameSiteMode">
            <summary>
            Specifies the SameSite mode for the internal authentication and temp cookie
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.AuthenticationOptions.RequireAuthenticatedUserForSignOutMessage">
            <summary>
            Indicates if user must be authenticated to accept parameters to end session endpoint. Defaults to false.
            </summary>
            <value>
            <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.AuthenticationOptions.CheckSessionCookieName">
            <summary>
            Gets or sets the name of the cookie used for the check session endpoint.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.AuthenticationOptions.CheckSessionCookieDomain">
            <summary>
            Gets or sets the domain of the cookie used for the check session endpoint. Defaults to null.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.AuthenticationOptions.CheckSessionCookieSameSiteMode">
            <summary>
            Gets or sets the SameSite mode of the cookie used for the check session endpoint. Defaults to SameSiteMode.None.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.AuthenticationOptions.RequireCspFrameSrcForSignout">
            <summary>
            If set, will require frame-src CSP headers being emitting on the end session callback endpoint which renders iframes to clients for front-channel signout notification.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.CachingOptions">
            <summary>
            Caching options.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.CachingOptions.ClientStoreExpiration">
            <summary>
            Gets or sets the client store expiration.
            </summary>
            <value>
            The client store expiration.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.CachingOptions.ResourceStoreExpiration">
            <summary>
            Gets or sets the scope store expiration.
            </summary>
            <value>
            The scope store expiration.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.CachingOptions.CorsExpiration">
            <summary>
            Gets or sets the CORS origin expiration.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.CorsOptions">
            <summary>
            Options for CORS
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.CorsOptions.CorsPolicyName">
            <summary>
            Gets or sets the name of the cors policy.
            </summary>
            <value>
            The name of the cors policy.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.CorsOptions.PreflightCacheDuration">
            <summary>
            The value to be used in the preflight `Access-Control-Max-Age` response header.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.CorsOptions.CorsPaths">
            <summary>
            Gets or sets the cors paths.
            </summary>
            <value>
            The cors paths.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.CspOptions">
            <summary>
            Options for Content Security Policy
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.CspOptions.Level">
            <summary>
            Gets or sets the minimum CSP level.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.CspOptions.AddDeprecatedHeader">
            <summary>
            Gets or sets a value indicating whether the deprected X-Content-Security-Policy header should be added.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.DeviceFlowOptions">
            <summary>
            Configures device flow
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DeviceFlowOptions.DefaultUserCodeType">
            <summary>
            Gets or sets the default type of the user code.
            </summary>
            <value>
            The default type of the user code.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DeviceFlowOptions.Interval">
            <summary>
            Gets or sets the polling interval in seconds.
            </summary>
            <value>
            The interval in seconds.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.DiscoveryOptions">
            <summary>
            Options class to configure discovery endpoint
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DiscoveryOptions.ShowEndpoints">
            <summary>
            Show endpoints
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DiscoveryOptions.ShowKeySet">
            <summary>
            Show signing keys
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DiscoveryOptions.ShowIdentityScopes">
            <summary>
            Show identity scopes
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DiscoveryOptions.ShowApiScopes">
            <summary>
            Show API scopes
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DiscoveryOptions.ShowClaims">
            <summary>
            Show identity claims
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DiscoveryOptions.ShowResponseTypes">
            <summary>
            Show response types
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DiscoveryOptions.ShowResponseModes">
            <summary>
            Show response modes
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DiscoveryOptions.ShowGrantTypes">
            <summary>
            Show standard grant types
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DiscoveryOptions.ShowExtensionGrantTypes">
            <summary>
            Show custom grant types
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DiscoveryOptions.ShowTokenEndpointAuthenticationMethods">
            <summary>
            Show token endpoint authentication methods
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DiscoveryOptions.ExpandRelativePathsInCustomEntries">
            <summary>
            Turns relative paths that start with ~/ into absolute paths
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DiscoveryOptions.ResponseCacheInterval">
            <summary>
            Sets the maxage value of the cache control header (in seconds) of the HTTP response. This gives clients a hint how often they should refresh their cached copy of the discovery document. If set to 0 no-cache headers will be set. Defaults to null, which does not set the header.
            </summary>
            <value>
            The cache interval in seconds.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.DiscoveryOptions.CustomEntries">
            <summary>
            Adds custom entries to the discovery document
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.EndpointsOptions">
            <summary>
            Configures which endpoints are enabled or disabled.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.EndpointsOptions.EnableAuthorizeEndpoint">
            <summary>
            Gets or sets a value indicating whether the authorize endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the authorize endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.EndpointsOptions.EnableJwtRequestUri">
            <summary>
            Gets or sets if JWT request_uri processing is enabled on the authorize endpoint. 
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.EndpointsOptions.EnableTokenEndpoint">
            <summary>
            Gets or sets a value indicating whether the token endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the token endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.EndpointsOptions.EnableUserInfoEndpoint">
            <summary>
            Gets or sets a value indicating whether the user info endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the user info endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.EndpointsOptions.EnableDiscoveryEndpoint">
            <summary>
            Gets or sets a value indicating whether the discovery document endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the disdovery document endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.EndpointsOptions.EnableEndSessionEndpoint">
            <summary>
            Gets or sets a value indicating whether the end session endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the end session endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.EndpointsOptions.EnableCheckSessionEndpoint">
            <summary>
            Gets or sets a value indicating whether the check session endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the check session endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.EndpointsOptions.EnableTokenRevocationEndpoint">
            <summary>
            Gets or sets a value indicating whether the token revocation endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the token revocation endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.EndpointsOptions.EnableIntrospectionEndpoint">
            <summary>
            Gets or sets a value indicating whether the introspection endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the introspection endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.EndpointsOptions.EnableDeviceAuthorizationEndpoint">
            <summary>
            Gets or sets a value indicating whether the device authorization endpoint is enabled.
            </summary>
            <value>
            <c>true</c> if the device authorization endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.EventsOptions">
            <summary>
            Configures events
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.EventsOptions.RaiseSuccessEvents">
            <summary>
            Gets or sets a value indicating whether to raise success events.
            </summary>
            <value>
              <c>true</c> if success event should be raised; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.EventsOptions.RaiseFailureEvents">
            <summary>
            Gets or sets a value indicating whether to raise failure events.
            </summary>
            <value>
              <c>true</c> if failure events should be raised; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.EventsOptions.RaiseInformationEvents">
            <summary>
            Gets or sets a value indicating whether to raise information events.
            </summary>
            <value>
            <c>true</c> if information events should be raised; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.EventsOptions.RaiseErrorEvents">
            <summary>
            Gets or sets a value indicating whether to raise error events.
            </summary>
            <value>
              <c>true</c> if error events should be raised; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.IdentityServerOptions">
            <summary>
            The IdentityServerOptions class is the top level container for all configuration settings of IdentityServer.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.IssuerUri">
            <summary>
            Gets or sets the unique name of this server instance, e.g. https://myissuer.com.
            If not set, the issuer name is inferred from the request
            </summary>
            <value>
            Unique name of this server instance, e.g. https://myissuer.com
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.LowerCaseIssuerUri">
            <summary>
            Set to false to preserve the original casing of the IssuerUri. Defaults to true.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.AccessTokenJwtType">
            <summary>
            Gets or sets the value for the JWT typ header for access tokens.
            </summary>
            <value>
            The JWT typ value.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.EmitStaticAudienceClaim">
            <summary>
            Emits an aud claim with the format issuer/resources. That's needed for some older access token validation plumbing. Defaults to false.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.EmitScopesAsSpaceDelimitedStringInJwt">
            <summary>
            Specifies whether scopes in JWTs are emitted as array or string
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.StrictJarValidation">
            <summary>
            Specifies whether the JWT typ and content-type for JWT secured authorization requests is checked according to IETF spec.
            This might break older OIDC conformant request objects.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.Endpoints">
            <summary>
            Gets or sets the endpoint configuration.
            </summary>
            <value>
            The endpoints configuration.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.Discovery">
            <summary>
            Gets or sets the discovery endpoint configuration.
            </summary>
            <value>
            The discovery endpoint configuration.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.Authentication">
            <summary>
            Gets or sets the authentication options.
            </summary>
            <value>
            The authentication options.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.Events">
            <summary>
            Gets or sets the events options.
            </summary>
            <value>
            The events options.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.InputLengthRestrictions">
            <summary>
            Gets or sets the max input length restrictions.
            </summary>
            <value>
            The length restrictions.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.UserInteraction">
            <summary>
            Gets or sets the options for the user interaction.
            </summary>
            <value>
            The user interaction options.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.Caching">
            <summary>
            Gets or sets the caching options.
            </summary>
            <value>
            The caching options.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.Cors">
            <summary>
            Gets or sets the cors options.
            </summary>
            <value>
            The cors options.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.Csp">
            <summary>
            Gets or sets the Content Security Policy options.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.Validation">
            <summary>
            Gets or sets the validation options.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.DeviceFlow">
            <summary>
            Gets or sets the device flow options.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.Logging">
            <summary>
            Gets or sets the logging options
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.MutualTls">
            <summary>
            Gets or sets the mutual TLS options.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.IdentityServerOptions.KeyManagement">
            <summary>
            Gets or sets the signing key management options.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.InputLengthRestrictions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.ClientId">
            <summary>
            Max length for client_id
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.ClientSecret">
            <summary>
            Max length for external client secrets
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.Scope">
            <summary>
            Max length for scope
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.RedirectUri">
            <summary>
            Max length for redirect_uri
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.Nonce">
            <summary>
            Max length for nonce
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.UiLocale">
            <summary>
            Max length for ui_locale
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.LoginHint">
            <summary>
            Max length for login_hint
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.AcrValues">
            <summary>
            Max length for acr_values
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.GrantType">
            <summary>
            Max length for grant_type
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.UserName">
            <summary>
            Max length for username
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.Password">
            <summary>
            Max length for password
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.CspReport">
            <summary>
            Max length for CSP reports
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.IdentityProvider">
            <summary>
            Max length for external identity provider name
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.ExternalError">
            <summary>
            Max length for external identity provider errors
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.AuthorizationCode">
            <summary>
            Max length for authorization codes
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.DeviceCode">
            <summary>
            Max length for device codes
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.RefreshToken">
            <summary>
            Max length for refresh tokens
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.TokenHandle">
            <summary>
            Max length for token handles
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.Jwt">
            <summary>
            Max length for JWTs
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.CodeChallengeMinLength">
            <summary>
            Min length for the code challenge
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.CodeChallengeMaxLength">
            <summary>
            Max length for the code challenge
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.CodeVerifierMinLength">
            <summary>
            Min length for the code verifier
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.InputLengthRestrictions.CodeVerifierMaxLength">
            <summary>
            Max length for the code verifier
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.KeyManagementOptions">
            <summary>
            Options to configure behavior of KeyManager.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.KeyManagementOptions.Enabled">
            <summary>
            Specifies if key management should be enabled. Defaults to true.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.KeyManagementOptions.SigningAlgorithm">
            <summary>
            The signing algorithm to use.
            Defaults to RS256.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.KeyManagementOptions.KeySize">
            <summary>
            Key size (in bits) of SigningAlgorithm.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.KeyManagementOptions.KeyType">
            <summary>
            Type of key to use. Defaults to RSA.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.KeyManagementOptions.InitializationDuration">
            <summary>
            When no keys have been created yet, this is the window of time considered to be an initialization 
            period to allow all servers to synchronize if the keys are being created for the first time.
            Defaults to 5 minutes.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.KeyManagementOptions.InitializationSynchronizationDelay">
            <summary>
            Delay used when re-loading from the store when the initialization period. It allows
            other servers more time to write new keys so other servers can include them.
            Defaults to 5 seconds.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.KeyManagementOptions.InitializationKeyCacheDuration">
            <summary>
            Cache duration when within the initialization period.
            Defaults to 1 minute.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.KeyManagementOptions.KeyCacheDuration">
            <summary>
            When in normal operation, duration to cache keys from store.
            Defaults to 24 hours.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.KeyManagementOptions.KeyActivationDelay">
            <summary>
            Time expected to propigate new keys to all servers, and time expected all clients to refresh discovery.
            Defaults to 14 days.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.KeyManagementOptions.KeyExpiration">
            <summary>
            Age at which keys will no longer be used for signing, but will still be used in discovery for validation.
            Defaults to 90 days.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.KeyManagementOptions.KeyRetirement">
            <summary>
            Age at which keys will no longer be used in discovery. they can be deleted at this point.
            Defaults to 180 days.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.KeyManagementOptions.DeleteRetiredKeys">
            <summary>
            Automatically delete retired keys.
            Defaults to true.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.KeyManagementOptions.DataProtectKeys">
            <summary>
            Automatically protect keys in the storage using data protection.
            Defaults to true.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.LoggingOptions">
            <summary>
            Options for configuring logging behavior
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.LoggingOptions.TokenRequestSensitiveValuesFilter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.LoggingOptions.AuthorizeRequestSensitiveValuesFilter">
            <summary>
            
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.MutualTlsOptions">
            <summary>
            Options for Mutual TLS features
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.MutualTlsOptions.Enabled">
            <summary>
            Specifies if MTLS support should be enabled
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.MutualTlsOptions.ClientCertificateAuthenticationScheme">
            <summary>
            Specifies the name of the authentication handler for X.509 client certificates
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.MutualTlsOptions.DomainName">
            <summary>
            Specifies a separate domain to run the MTLS endpoints on.
            If the string does not contain any dots, a subdomain is assumed - e.g. main domain: identityserver.local, MTLS domain: mtls.identityserver.local
            If the string contains dots, a completely separate domain is assumend, e.g. main domain: identity.app.com, MTLS domain: mtls.app.com. In this case you must set a static issuer name on the options.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.MutualTlsOptions.AlwaysEmitConfirmationClaim">
            <summary>
            Specifies whether a cnf claim gets emitted for access tokens if a client certificate was present.
            Normally the cnf claims only gets emitted if the client used the client certificate for authentication,
            setting this to true, will set the claim regardless of the authentication method. (defaults to false).
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.UserInteractionOptions">
            <summary>
            Options for aspects of the user interface.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.UserInteractionOptions.LoginUrl">
            <summary>
            Gets or sets the login URL. If a local URL, the value must start with a leading slash.
            </summary>
            <value>
            The login URL.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.UserInteractionOptions.LoginReturnUrlParameter">
            <summary>
            Gets or sets the login return URL parameter.
            </summary>
            <value>
            The login return URL parameter.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.UserInteractionOptions.LogoutUrl">
            <summary>
            Gets or sets the logout URL. If a local URL, the value must start with a leading slash.
            </summary>
            <value>
            The logout URL.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.UserInteractionOptions.LogoutIdParameter">
            <summary>
            Gets or sets the logout identifier parameter.
            </summary>
            <value>
            The logout identifier parameter.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.UserInteractionOptions.ConsentUrl">
            <summary>
            Gets or sets the consent URL. If a local URL, the value must start with a leading slash.
            </summary>
            <value>
            The consent URL.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.UserInteractionOptions.ConsentReturnUrlParameter">
            <summary>
            Gets or sets the consent return URL parameter.
            </summary>
            <value>
            The consent return URL parameter.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.UserInteractionOptions.ErrorUrl">
            <summary>
            Gets or sets the error URL. If a local URL, the value must start with a leading slash.
            </summary>
            <value>
            The error URL.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.UserInteractionOptions.ErrorIdParameter">
            <summary>
            Gets or sets the error identifier parameter.
            </summary>
            <value>
            The error identifier parameter.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.UserInteractionOptions.CustomRedirectReturnUrlParameter">
            <summary>
            Gets or sets the custom redirect return URL parameter.
            </summary>
            <value>
            The custom redirect return URL parameter.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.UserInteractionOptions.CookieMessageThreshold">
            <summary>
            Gets or sets the cookie message threshold. This limits how many cookies are created, and older ones will be purged.
            </summary>
            <value>
            The cookie message threshold.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.UserInteractionOptions.DeviceVerificationUrl">
            <summary>
            Gets or sets the device verification URL.  If a local URL, the value must start with a leading slash.
            </summary>
            <value>
            The device verification URL.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.UserInteractionOptions.DeviceVerificationUserCodeParameter">
            <summary>
            Gets or sets the device verification user code paramater.
            </summary>
            <value>
            The device verification user code parameter.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Configuration.ValidationOptions">
            <summary>
            The ValidationOptions contains settings that affect some of the default validation behavior.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Configuration.ValidationOptions.InvalidRedirectUriPrefixes">
            <summary>
             Collection of URI scheme prefixes that should never be used as custom URI schemes in the redirect_uri passed to tha authorize endpoint.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.DeviceAuthorizationEndpoint">
            <summary>
            The device authorization endpoint
            </summary>
            <seealso cref="T:Duende.IdentityServer.Hosting.IEndpointHandler" />
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.DeviceAuthorizationEndpoint.ProcessAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Processes the request.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.IntrospectionEndpoint">
            <summary>
            Introspection endpoint
            </summary>
            <seealso cref="T:Duende.IdentityServer.Hosting.IEndpointHandler" />
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.IntrospectionEndpoint.#ctor(Duende.IdentityServer.Validation.IApiSecretValidator,Duende.IdentityServer.Validation.IIntrospectionRequestValidator,Duende.IdentityServer.ResponseHandling.IIntrospectionResponseGenerator,Duende.IdentityServer.Services.IEventService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Endpoints.IntrospectionEndpoint})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.IntrospectionEndpoint" /> class.
            </summary>
            <param name="apiSecretValidator">The API secret validator.</param>
            <param name="requestValidator">The request validator.</param>
            <param name="responseGenerator">The generator.</param>
            <param name="events">The events.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.IntrospectionEndpoint.ProcessAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Processes the request.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.ConsentPageResult">
            <summary>
            Result for consent page
            </summary>
            <seealso cref="T:Duende.IdentityServer.Hosting.IEndpointResult" />
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.ConsentPageResult.#ctor(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.Results.ConsentPageResult"/> class.
            </summary>
            <param name="request">The request.</param>
            <exception cref="T:System.ArgumentNullException">request</exception>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.ConsentPageResult.ExecuteAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Executes the result.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.CustomRedirectResult">
            <summary>
            Result for a custom redirect
            </summary>
            <seealso cref="T:Duende.IdentityServer.Hosting.IEndpointResult" />
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.CustomRedirectResult.#ctor(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.Results.CustomRedirectResult"/> class.
            </summary>
            <param name="request">The request.</param>
            <param name="url">The URL.</param>
            <exception cref="T:System.ArgumentNullException">
            request
            or
            url
            </exception>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.CustomRedirectResult.ExecuteAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Executes the result.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.DiscoveryDocumentResult">
            <summary>
            Result for a discovery document
            </summary>
            <seealso cref="T:Duende.IdentityServer.Hosting.IEndpointResult" />
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.DiscoveryDocumentResult.Entries">
            <summary>
            Gets the entries.
            </summary>
            <value>
            The entries.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.DiscoveryDocumentResult.MaxAge">
            <summary>
            Gets the maximum age.
            </summary>
            <value>
            The maximum age.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.DiscoveryDocumentResult.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.Results.DiscoveryDocumentResult" /> class.
            </summary>
            <param name="entries">The entries.</param>
            <param name="maxAge">The maximum age.</param>
            <exception cref="T:System.ArgumentNullException">entries</exception>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.DiscoveryDocumentResult.ExecuteAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Executes the result.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.EndSessionResult">
            <summary>
            Result for endsession
            </summary>
            <seealso cref="T:Duende.IdentityServer.Hosting.IEndpointResult" />
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.EndSessionResult.#ctor(Duende.IdentityServer.Validation.EndSessionValidationResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.Results.EndSessionResult"/> class.
            </summary>
            <param name="result">The result.</param>
            <exception cref="T:System.ArgumentNullException">result</exception>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.EndSessionResult.ExecuteAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Executes the result.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.IntrospectionResult">
            <summary>
            Result for introspection
            </summary>
            <seealso cref="T:Duende.IdentityServer.Hosting.IEndpointResult" />
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.IntrospectionResult.Entries">
            <summary>
            Gets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.IntrospectionResult.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.Results.IntrospectionResult"/> class.
            </summary>
            <param name="entries">The result.</param>
            <exception cref="T:System.ArgumentNullException">result</exception>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.IntrospectionResult.ExecuteAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Executes the result.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.JsonWebKeysResult">
            <summary>
            Result for the jwks document
            </summary>
            <seealso cref="T:Duende.IdentityServer.Hosting.IEndpointResult" />
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.JsonWebKeysResult.WebKeys">
            <summary>
            Gets the web keys.
            </summary>
            <value>
            The web keys.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.JsonWebKeysResult.MaxAge">
            <summary>
            Gets the maximum age.
            </summary>
            <value>
            The maximum age.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.JsonWebKeysResult.#ctor(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.JsonWebKey},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.Results.JsonWebKeysResult" /> class.
            </summary>
            <param name="webKeys">The web keys.</param>
            <param name="maxAge">The maximum age.</param>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.JsonWebKeysResult.ExecuteAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Executes the result.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.LoginPageResult">
            <summary>
            Result for login page
            </summary>
            <seealso cref="T:Duende.IdentityServer.Hosting.IEndpointResult" />
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.LoginPageResult.#ctor(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.Results.LoginPageResult"/> class.
            </summary>
            <param name="request">The request.</param>
            <exception cref="T:System.ArgumentNullException">request</exception>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.LoginPageResult.ExecuteAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Executes the result.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.StatusCodeResult">
            <summary>
            Result for a raw HTTP status code
            </summary>
            <seealso cref="T:Duende.IdentityServer.Hosting.IEndpointResult" />
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.StatusCodeResult.StatusCode">
            <summary>
            Gets the status code.
            </summary>
            <value>
            The status code.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.StatusCodeResult.#ctor(System.Net.HttpStatusCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.Results.StatusCodeResult"/> class.
            </summary>
            <param name="statusCode">The status code.</param>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.StatusCodeResult.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.Results.StatusCodeResult"/> class.
            </summary>
            <param name="statusCode">The status code.</param>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.StatusCodeResult.ExecuteAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Executes the result.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.Results.TokenRevocationErrorResult">
            <summary>
            Result for revocation error
            </summary>
            <seealso cref="T:Duende.IdentityServer.Hosting.IEndpointResult" />
        </member>
        <member name="P:Duende.IdentityServer.Endpoints.Results.TokenRevocationErrorResult.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.TokenRevocationErrorResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.Results.TokenRevocationErrorResult"/> class.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.Results.TokenRevocationErrorResult.ExecuteAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Executes the result.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.TokenEndpoint">
            <summary>
            The token endpoint
            </summary>
            <seealso cref="T:Duende.IdentityServer.Hosting.IEndpointHandler" />
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.TokenEndpoint.#ctor(Duende.IdentityServer.Validation.IClientSecretValidator,Duende.IdentityServer.Validation.ITokenRequestValidator,Duende.IdentityServer.ResponseHandling.ITokenResponseGenerator,Duende.IdentityServer.Services.IEventService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Endpoints.TokenEndpoint})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.TokenEndpoint" /> class.
            </summary>
            <param name="clientValidator">The client validator.</param>
            <param name="requestValidator">The request validator.</param>
            <param name="responseGenerator">The response generator.</param>
            <param name="events">The events.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.TokenEndpoint.ProcessAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Processes the request.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.TokenRevocationEndpoint">
            <summary>
            The revocation endpoint
            </summary>
            <seealso cref="T:Duende.IdentityServer.Hosting.IEndpointHandler" />
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.TokenRevocationEndpoint.#ctor(Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Endpoints.TokenRevocationEndpoint},Duende.IdentityServer.Validation.IClientSecretValidator,Duende.IdentityServer.Validation.ITokenRevocationRequestValidator,Duende.IdentityServer.ResponseHandling.ITokenRevocationResponseGenerator,Duende.IdentityServer.Services.IEventService)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.TokenRevocationEndpoint" /> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="clientValidator">The client validator.</param>
            <param name="requestValidator">The request validator.</param>
            <param name="responseGenerator">The response generator.</param>
            <param name="events">The events.</param>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.TokenRevocationEndpoint.ProcessAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Processes the request.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Endpoints.UserInfoEndpoint">
            <summary>
            The userinfo endpoint
            </summary>
            <seealso cref="T:Duende.IdentityServer.Hosting.IEndpointHandler" />
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.UserInfoEndpoint.#ctor(Duende.IdentityServer.Validation.BearerTokenUsageValidator,Duende.IdentityServer.Validation.IUserInfoRequestValidator,Duende.IdentityServer.ResponseHandling.IUserInfoResponseGenerator,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Endpoints.UserInfoEndpoint})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Endpoints.UserInfoEndpoint" /> class.
            </summary>
            <param name="tokenUsageValidator">The token usage validator.</param>
            <param name="requestValidator">The request validator.</param>
            <param name="responseGenerator">The response generator.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Endpoints.UserInfoEndpoint.ProcessAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Processes the request.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Events.ApiAuthenticationFailureEvent">
            <summary>
            Event for failed API authentication
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.ApiAuthenticationFailureEvent.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.ApiAuthenticationFailureEvent"/> class.
            </summary>
            <param name="apiName">Name of the API.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:Duende.IdentityServer.Events.ApiAuthenticationFailureEvent.ApiName">
            <summary>
            Gets or sets the name of the API.
            </summary>
            <value>
            The name of the API.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.ApiAuthenticationSuccessEvent">
            <summary>
            Event for successful API authentication
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.ApiAuthenticationSuccessEvent.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.ApiAuthenticationSuccessEvent"/> class.
            </summary>
            <param name="apiName">Name of the API.</param>
            <param name="authenticationMethod">The authentication method.</param>
        </member>
        <member name="P:Duende.IdentityServer.Events.ApiAuthenticationSuccessEvent.ApiName">
            <summary>
            Gets or sets the name of the API.
            </summary>
            <value>
            The name of the API.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.ApiAuthenticationSuccessEvent.AuthenticationMethod">
            <summary>
            Gets or sets the authentication method.
            </summary>
            <value>
            The authentication method.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.ClientAuthenticationFailureEvent">
            <summary>
            Event for failed client authentication
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.ClientAuthenticationFailureEvent.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.ClientAuthenticationFailureEvent"/> class.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:Duende.IdentityServer.Events.ClientAuthenticationFailureEvent.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.ClientAuthenticationSuccessEvent">
            <summary>
            Event for successful client authentication
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.ClientAuthenticationSuccessEvent.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.ClientAuthenticationSuccessEvent"/> class.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="authenticationMethod">The authentication method.</param>
        </member>
        <member name="P:Duende.IdentityServer.Events.ClientAuthenticationSuccessEvent.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.ClientAuthenticationSuccessEvent.AuthenticationMethod">
            <summary>
            Gets or sets the authentication method.
            </summary>
            <value>
            The authentication method.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.ConsentDeniedEvent">
            <summary>
            Event for denied consent.
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.ConsentDeniedEvent.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.ConsentDeniedEvent" /> class.
            </summary>
            <param name="subjectId">The subject identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="requestedScopes">The requested scopes.</param>
        </member>
        <member name="P:Duende.IdentityServer.Events.ConsentDeniedEvent.SubjectId">
            <summary>
            Gets or sets the subject identifier.
            </summary>
            <value>
            The subject identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.ConsentDeniedEvent.ClientId">
            <summary>
            Gets or sets the client ID.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.ConsentDeniedEvent.RequestedScopes">
            <summary>
            Gets or sets the requested scopes.
            </summary>
            <value>
            The requested scopes.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.ConsentGrantedEvent">
            <summary>
            Event for granted consent.
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.ConsentGrantedEvent.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.ConsentGrantedEvent" /> class.
            </summary>
            <param name="subjectId">The subject identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="requestedScopes">The requested scopes.</param>
            <param name="grantedScopes">The granted scopes.</param>
            <param name="consentRemembered">if set to <c>true</c> consent was remembered.</param>
        </member>
        <member name="P:Duende.IdentityServer.Events.ConsentGrantedEvent.SubjectId">
            <summary>
            Gets or sets the subject identifier.
            </summary>
            <value>
            The subject identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.ConsentGrantedEvent.ClientId">
            <summary>
            Gets or sets the client ID.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.ConsentGrantedEvent.RequestedScopes">
            <summary>
            Gets or sets the requested scopes.
            </summary>
            <value>
            The requested scopes.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.ConsentGrantedEvent.GrantedScopes">
            <summary>
            Gets or sets the granted scopes.
            </summary>
            <value>
            The granted scopes.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.ConsentGrantedEvent.ConsentRemembered">
            <summary>
            Gets or sets a value indicating whether consent was remembered.
            </summary>
            <value>
              <c>true</c> if consent was remembered; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.DeviceAuthorizationFailureEvent">
            <summary>
            Event for device authorization failure
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.DeviceAuthorizationFailureEvent.#ctor(Duende.IdentityServer.Validation.DeviceAuthorizationRequestValidationResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.DeviceAuthorizationFailureEvent"/> class.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Duende.IdentityServer.Events.DeviceAuthorizationFailureEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.DeviceAuthorizationFailureEvent"/> class.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Events.DeviceAuthorizationFailureEvent.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.DeviceAuthorizationFailureEvent.ClientName">
            <summary>
            Gets or sets the name of the client.
            </summary>
            <value>
            The name of the client.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.DeviceAuthorizationFailureEvent.Endpoint">
            <summary>
            Gets or sets the endpoint.
            </summary>
            <value>
            The endpoint.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.DeviceAuthorizationFailureEvent.Scopes">
            <summary>
            Gets or sets the scopes.
            </summary>
            <value>
            The scopes.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.DeviceAuthorizationFailureEvent.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.DeviceAuthorizationFailureEvent.ErrorDescription">
            <summary>
            Gets or sets the error description.
            </summary>
            <value>
            The error description.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.DeviceAuthorizationSuccessEvent">
            <summary>
            Event for device authorization failure
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.DeviceAuthorizationSuccessEvent.#ctor(Duende.IdentityServer.ResponseHandling.DeviceAuthorizationResponse,Duende.IdentityServer.Validation.DeviceAuthorizationRequestValidationResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.DeviceAuthorizationSuccessEvent"/> class.
            </summary>
            <param name="response">The response.</param>
            <param name="request">The request.</param>
        </member>
        <member name="M:Duende.IdentityServer.Events.DeviceAuthorizationSuccessEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.DeviceAuthorizationSuccessEvent"/> class.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Events.DeviceAuthorizationSuccessEvent.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.DeviceAuthorizationSuccessEvent.ClientName">
            <summary>
            Gets or sets the name of the client.
            </summary>
            <value>
            The name of the client.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.DeviceAuthorizationSuccessEvent.Endpoint">
            <summary>
            Gets or sets the endpoint.
            </summary>
            <value>
            The endpoint.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.DeviceAuthorizationSuccessEvent.Scopes">
            <summary>
            Gets or sets the scopes.
            </summary>
            <value>
            The scopes.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.GrantsRevokedEvent">
            <summary>
            Event for revoked grants.
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.GrantsRevokedEvent.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.GrantsRevokedEvent" /> class.
            </summary>
            <param name="subjectId">The subject identifier.</param>
            <param name="clientId">The client identifier.</param>
        </member>
        <member name="P:Duende.IdentityServer.Events.GrantsRevokedEvent.SubjectId">
            <summary>
            Gets or sets the subject identifier.
            </summary>
            <value>
            The subject identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.GrantsRevokedEvent.ClientId">
            <summary>
            Gets or sets the client ID.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.Event">
            <summary>
            Models base class for events raised from IdentityServer.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Events.Event.#ctor(System.String,System.String,Duende.IdentityServer.Events.EventTypes,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.Event" /> class.
            </summary>
            <param name="category">The category.</param>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="id">The identifier.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException">category</exception>
        </member>
        <member name="M:Duende.IdentityServer.Events.Event.PrepareAsync">
            <summary>
            Allows implementing custom initialization logic.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Duende.IdentityServer.Events.Event.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>
            The category.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.Event.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.Event.EventType">
            <summary>
            Gets or sets the event type.
            </summary>
            <value>
            The type of the event.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.Event.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.Event.Message">
            <summary>
            Gets or sets the event message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.Event.ActivityId">
            <summary>
            Gets or sets the per-request activity identifier.
            </summary>
            <value>
            The activity identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.Event.TimeStamp">
            <summary>
            Gets or sets the time stamp when the event was raised.
            </summary>
            <value>
            The time stamp.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.Event.ProcessId">
            <summary>
            Gets or sets the server process identifier.
            </summary>
            <value>
            The process identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.Event.LocalIpAddress">
            <summary>
            Gets or sets the local ip address of the current request.
            </summary>
            <value>
            The local ip address.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.Event.RemoteIpAddress">
            <summary>
            Gets or sets the remote ip address of the current request.
            </summary>
            <value>
            The remote ip address.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Events.Event.Obfuscate(System.String)">
            <summary>
            Obfuscates a token.
            </summary>
            <param name="value">The token.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Events.Event.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Events.EventCategories">
            <summary>
            Categories for events
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Events.EventCategories.Authentication">
            <summary>
            Authentication related events
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Events.EventCategories.Token">
            <summary>
            Token related events
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Events.EventCategories.Grants">
            <summary>
            Grants related events
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Events.EventCategories.Error">
            <summary>
            Error related events
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Events.EventCategories.DeviceFlow">
            <summary>
            Device flow related events
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Events.EventIds.AuthenticationEventsStart">
            Authentication related events
        </member>
        <member name="F:Duende.IdentityServer.Events.EventIds.TokenEventsStart">
            Token related events
        </member>
        <member name="F:Duende.IdentityServer.Events.EventIds.ErrorEventsStart">
            Error related events
        </member>
        <member name="F:Duende.IdentityServer.Events.EventIds.GrantsEventsStart">
            Grants related events
        </member>
        <member name="T:Duende.IdentityServer.Events.EventTypes">
            <summary>
            Indicates if the event is a success or fail event.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Events.EventTypes.Success">
            <summary>
            Success event
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Events.EventTypes.Failure">
            <summary>
            Failure event
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Events.EventTypes.Information">
            <summary>
            Information event
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Events.EventTypes.Error">
            <summary>
            Error event
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Events.InvalidClientConfigurationEvent">
            <summary>
            Event for unhandled exceptions
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.InvalidClientConfigurationEvent.#ctor(Duende.IdentityServer.Models.Client,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.UnhandledExceptionEvent" /> class.
            </summary>
            <param name="client">The client.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="P:Duende.IdentityServer.Events.InvalidClientConfigurationEvent.ClientId">
            <summary>
            Gets or sets the client ID.
            </summary>
            <value>
            The details.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.InvalidClientConfigurationEvent.ClientName">
            <summary>
            Gets or sets the name of the client.
            </summary>
            <value>
            The name of the client.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.TokenIntrospectionFailureEvent">
            <summary>
            Event for failed token introspection
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.TokenIntrospectionFailureEvent.#ctor(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.TokenIntrospectionSuccessEvent" /> class.
            </summary>
            <param name="apiName">Name of the API.</param>
            <param name="errorMessage">The error message.</param>
            <param name="token">The token.</param>
            <param name="apiScopes">The API scopes.</param>
            <param name="tokenScopes">The token scopes.</param>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIntrospectionFailureEvent.ApiName">
            <summary>
            Gets or sets the name of the API.
            </summary>
            <value>
            The name of the API.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIntrospectionFailureEvent.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIntrospectionFailureEvent.ApiScopes">
            <summary>
            Gets or sets the API scopes.
            </summary>
            <value>
            The API scopes.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIntrospectionFailureEvent.TokenScopes">
            <summary>
            Gets or sets the token scopes.
            </summary>
            <value>
            The token scopes.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.TokenIntrospectionSuccessEvent">
            <summary>
            Event for successful token introspection
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.TokenIntrospectionSuccessEvent.#ctor(Duende.IdentityServer.Validation.IntrospectionRequestValidationResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.TokenIntrospectionSuccessEvent" /> class.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIntrospectionSuccessEvent.ApiName">
            <summary>
            Gets or sets the name of the API.
            </summary>
            <value>
            The name of the API.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIntrospectionSuccessEvent.IsActive">
            <summary>
            Gets or sets a value indicating whether this instance is active.
            </summary>
            <value>
              <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIntrospectionSuccessEvent.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIntrospectionSuccessEvent.ClaimTypes">
            <summary>
            Gets or sets the claim types.
            </summary>
            <value>
            The claim types.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIntrospectionSuccessEvent.TokenScopes">
            <summary>
            Gets or sets the token scopes.
            </summary>
            <value>
            The token scopes.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.TokenIssuedFailureEvent">
            <summary>
            Event for failed token issuance
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.TokenIssuedFailureEvent.#ctor(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.TokenIssuedFailureEvent"/> class.
            </summary>
            <param name="request">The request.</param>
            <param name="error">The error.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Duende.IdentityServer.Events.TokenIssuedFailureEvent.#ctor(Duende.IdentityServer.Validation.TokenRequestValidationResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.TokenIssuedFailureEvent"/> class.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Duende.IdentityServer.Events.TokenIssuedFailureEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.TokenIssuedFailureEvent"/> class.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedFailureEvent.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedFailureEvent.ClientName">
            <summary>
            Gets or sets the name of the client.
            </summary>
            <value>
            The name of the client.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedFailureEvent.RedirectUri">
            <summary>
            Gets or sets the redirect URI.
            </summary>
            <value>
            The redirect URI.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedFailureEvent.Endpoint">
            <summary>
            Gets or sets the endpoint.
            </summary>
            <value>
            The endpoint.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedFailureEvent.SubjectId">
            <summary>
            Gets or sets the subject identifier.
            </summary>
            <value>
            The subject identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedFailureEvent.Scopes">
            <summary>
            Gets or sets the scopes.
            </summary>
            <value>
            The scopes.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedFailureEvent.GrantType">
            <summary>
            Gets or sets the grant type.
            </summary>
            <value>
            The grant type.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedFailureEvent.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedFailureEvent.ErrorDescription">
            <summary>
            Gets or sets the error description.
            </summary>
            <value>
            The error description.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.TokenIssuedSuccessEvent">
            <summary>
            Event for successful token issuance
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.#ctor(Duende.IdentityServer.ResponseHandling.AuthorizeResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.TokenIssuedSuccessEvent"/> class.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="M:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.#ctor(Duende.IdentityServer.ResponseHandling.TokenResponse,Duende.IdentityServer.Validation.TokenRequestValidationResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.TokenIssuedSuccessEvent"/> class.
            </summary>
            <param name="response">The response.</param>
            <param name="request">The request.</param>
        </member>
        <member name="M:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.TokenIssuedSuccessEvent"/> class.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.ClientName">
            <summary>
            Gets or sets the name of the client.
            </summary>
            <value>
            The name of the client.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.RedirectUri">
            <summary>
            Gets or sets the redirect URI.
            </summary>
            <value>
            The redirect URI.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.Endpoint">
            <summary>
            Gets or sets the endpoint.
            </summary>
            <value>
            The endpoint.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.SubjectId">
            <summary>
            Gets or sets the subject identifier.
            </summary>
            <value>
            The subject identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.Scopes">
            <summary>
            Gets or sets the scopes.
            </summary>
            <value>
            The scopes.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.GrantType">
            <summary>
            Gets or sets the grant type.
            </summary>
            <value>
            The grant type.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.Tokens">
            <summary>
            Gets or sets the tokens.
            </summary>
            <value>
            The tokens.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.Token">
            <summary>
            Data structure serializing issued tokens
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.Token.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.Token"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.Token.TokenType">
            <summary>
            Gets the type of the token.
            </summary>
            <value>
            The type of the token.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenIssuedSuccessEvent.Token.TokenValue">
            <summary>
            Gets the token value.
            </summary>
            <value>
            The token value.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.TokenRevokedSuccessEvent">
            <summary>
            Event for successful token revocation
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.TokenRevokedSuccessEvent.#ctor(Duende.IdentityServer.Validation.TokenRevocationRequestValidationResult,Duende.IdentityServer.Models.Client)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.TokenRevokedSuccessEvent"/> class.
            </summary>
            <param name="requestResult">The request result.</param>
            <param name="client">The client.</param>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenRevokedSuccessEvent.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenRevokedSuccessEvent.ClientName">
            <summary>
            Gets or sets the name of the client.
            </summary>
            <value>
            The name of the client.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenRevokedSuccessEvent.TokenType">
            <summary>
            Gets or sets the type of the token.
            </summary>
            <value>
            The type of the token.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.TokenRevokedSuccessEvent.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.UnhandledExceptionEvent">
            <summary>
            Event for unhandled exceptions
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.UnhandledExceptionEvent.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.UnhandledExceptionEvent"/> class.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="P:Duende.IdentityServer.Events.UnhandledExceptionEvent.Details">
            <summary>
            Gets or sets the details.
            </summary>
            <value>
            The details.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.UserLoginFailureEvent">
            <summary>
            Event for failed user authentication
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.UserLoginFailureEvent.#ctor(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.UserLoginFailureEvent" /> class.
            </summary>
            <param name="username">The username.</param>
            <param name="error">The error.</param>
            <param name="interactive">Specifies if login was interactive</param>
            <param name="clientId">The client id</param>
        </member>
        <member name="P:Duende.IdentityServer.Events.UserLoginFailureEvent.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>
            The username.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.UserLoginFailureEvent.Endpoint">
            <summary>
            Gets or sets the endpoint.
            </summary>
            <value>
            The endpoint.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.UserLoginFailureEvent.ClientId">
            <summary>
            Gets or sets the client id.
            </summary>
            <value>
            The client id.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.UserLoginSuccessEvent">
            <summary>
            Event for successful user authentication
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.UserLoginSuccessEvent.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.UserLoginSuccessEvent"/> class.
            </summary>
            <param name="provider">The provider.</param>
            <param name="providerUserId">The provider user identifier.</param>
            <param name="subjectId">The subject identifier.</param>
            <param name="name">The name.</param>
            <param name="interactive">if set to <c>true</c> [interactive].</param>
            <param name="clientId">The client id.</param>
        </member>
        <member name="M:Duende.IdentityServer.Events.UserLoginSuccessEvent.#ctor(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.UserLoginSuccessEvent"/> class.
            </summary>
            <param name="username">The username.</param>
            <param name="subjectId">The subject identifier.</param>
            <param name="name">The name.</param>
            <param name="interactive">if set to <c>true</c> [interactive].</param>
            <param name="clientId">The client id.</param>
        </member>
        <member name="M:Duende.IdentityServer.Events.UserLoginSuccessEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.UserLoginSuccessEvent"/> class.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Events.UserLoginSuccessEvent.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>
            The username.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.UserLoginSuccessEvent.Provider">
            <summary>
            Gets or sets the provider.
            </summary>
            <value>
            The provider.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.UserLoginSuccessEvent.ProviderUserId">
            <summary>
            Gets or sets the provider user identifier.
            </summary>
            <value>
            The provider user identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.UserLoginSuccessEvent.SubjectId">
            <summary>
            Gets or sets the subject identifier.
            </summary>
            <value>
            The subject identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.UserLoginSuccessEvent.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.UserLoginSuccessEvent.Endpoint">
            <summary>
            Gets or sets the endpoint.
            </summary>
            <value>
            The endpoint.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.UserLoginSuccessEvent.ClientId">
            <summary>
            Gets or sets the client id.
            </summary>
            <value>
            The client id.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.UserLogoutSuccessEvent">
            <summary>
            Event for successful user logout
            </summary>
            <seealso cref="T:Duende.IdentityServer.Events.Event" />
        </member>
        <member name="M:Duende.IdentityServer.Events.UserLogoutSuccessEvent.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.UserLogoutSuccessEvent"/> class.
            </summary>
            <param name="subjectId">The subject identifier.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:Duende.IdentityServer.Events.UserLogoutSuccessEvent.SubjectId">
            <summary>
            Gets or sets the subject identifier.
            </summary>
            <value>
            The subject identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Events.UserLogoutSuccessEvent.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Events.DefaultEventService">
            <summary>
            The default event service
            </summary>
            <seealso cref="T:Duende.IdentityServer.Services.IEventService" />
        </member>
        <member name="F:Duende.IdentityServer.Events.DefaultEventService.Options">
            <summary>
            The options
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Events.DefaultEventService.Context">
            <summary>
            The context
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Events.DefaultEventService.Sink">
            <summary>
            The sink
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Events.DefaultEventService.Clock">
            <summary>
            The clock
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Events.DefaultEventService.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,Microsoft.AspNetCore.Http.IHttpContextAccessor,Duende.IdentityServer.Services.IEventSink,Microsoft.AspNetCore.Authentication.ISystemClock)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Events.DefaultEventService"/> class.
            </summary>
            <param name="options">The options.</param>
            <param name="context">The context.</param>
            <param name="sink">The sink.</param>
            <param name="clock">The clock.</param>
        </member>
        <member name="M:Duende.IdentityServer.Events.DefaultEventService.RaiseAsync(Duende.IdentityServer.Events.Event)">
            <summary>
            Raises the specified event.
            </summary>
            <param name="evt">The event.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">evt</exception>
        </member>
        <member name="M:Duende.IdentityServer.Events.DefaultEventService.CanRaiseEventType(Duende.IdentityServer.Events.EventTypes)">
            <summary>
            Indicates if the type of event will be persisted.
            </summary>
            <param name="evtType"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Duende.IdentityServer.Events.DefaultEventService.CanRaiseEvent(Duende.IdentityServer.Events.Event)">
            <summary>
            Determines whether this event would be persisted.
            </summary>
            <param name="evt">The evt.</param>
            <returns>
              <c>true</c> if this event would be persisted; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Events.DefaultEventService.PrepareEventAsync(Duende.IdentityServer.Events.Event)">
            <summary>
            Prepares the event.
            </summary>
            <param name="evt">The evt.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Extensions.AuthenticationPropertiesExtensions">
            <summary>
            Extensions for AuthenticationProperties
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.AuthenticationPropertiesExtensions.GetSessionId(Microsoft.AspNetCore.Authentication.AuthenticationProperties)">
            <summary>
            Gets the user's session identifier.
            </summary>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.AuthenticationPropertiesExtensions.SetSessionId(Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.String)">
            <summary>
            Sets the user's session identifier.
            </summary>
            <param name="properties"></param>
            <param name="sid">The session id</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.AuthenticationPropertiesExtensions.GetClientList(Microsoft.AspNetCore.Authentication.AuthenticationProperties)">
            <summary>
            Gets the list of client ids the user has signed into during their session.
            </summary>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.AuthenticationPropertiesExtensions.RemoveClientList(Microsoft.AspNetCore.Authentication.AuthenticationProperties)">
            <summary>
            Removes the list of client ids.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.AuthenticationPropertiesExtensions.AddClientId(Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.String)">
            <summary>
            Adds a client to the list of clients the user has signed into during their session.
            </summary>
            <param name="properties"></param>
            <param name="clientId"></param>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.HttpContextExtensions.GetIdentityServerHost(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Gets the host name of IdentityServer.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.HttpContextExtensions.GetIdentityServerBasePath(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Gets the base path of IdentityServer.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.HttpContextExtensions.GetIdentityServerBaseUrl(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Gets the public base URL for IdentityServer.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.HttpContextExtensions.GetIdentityServerRelativeUrl(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            Gets the identity server relative URL.
            </summary>
            <param name="context">The context.</param>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.HttpContextExtensions.GetIdentityServerIssuerUri(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Gets the identity server issuer URI.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">context</exception>
        </member>
        <member name="T:Duende.IdentityServer.Extensions.ICacheExtensions">
            <summary>
            Extensions for ICache
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.ICacheExtensions.GetAsync``1(Duende.IdentityServer.Services.ICache{``0},System.String,System.TimeSpan,System.Func{System.Threading.Tasks.Task{``0}},Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Attempts to get an item from the cache. If the item is not found, the <c>get</c> function is used to
            obtain the item and populate the cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cache">The cache.</param>
            <param name="key">The key.</param>
            <param name="duration">The duration.</param>
            <param name="get">The get function.</param>
            <param name="logger">The logger.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">cache
            or
            get</exception>
            <exception cref="T:System.ArgumentNullException">cache
            or
            get</exception>
        </member>
        <member name="T:Duende.IdentityServer.Extensions.KeyManagementExtensionsExtensions">
            <summary>
            Extensions for Key Management
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Extensions.PrincipalExtensions">
            <summary>
            Extension methods for <see cref="T:System.Security.Principal.IPrincipal"/> and <see cref="T:System.Security.Principal.IIdentity"/> .
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.PrincipalExtensions.GetAuthenticationTime(System.Security.Principal.IPrincipal)">
            <summary>
            Gets the authentication time.
            </summary>
            <param name="principal">The principal.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.PrincipalExtensions.GetAuthenticationTimeEpoch(System.Security.Principal.IPrincipal)">
            <summary>
            Gets the authentication epoch time.
            </summary>
            <param name="principal">The principal.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.PrincipalExtensions.GetAuthenticationTimeEpoch(System.Security.Principal.IIdentity)">
            <summary>
            Gets the authentication epoch time.
            </summary>
            <param name="identity">The identity.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.PrincipalExtensions.GetSubjectId(System.Security.Principal.IPrincipal)">
            <summary>
            Gets the subject identifier.
            </summary>
            <param name="principal">The principal.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.PrincipalExtensions.GetSubjectId(System.Security.Principal.IIdentity)">
            <summary>
            Gets the subject identifier.
            </summary>
            <param name="identity">The identity.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">sub claim is missing</exception>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.PrincipalExtensions.GetName(System.Security.Principal.IPrincipal)">
            <summary>
            Gets the name.
            </summary>
            <param name="principal">The principal.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.PrincipalExtensions.GetDisplayName(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Gets the name.
            </summary>
            <param name="principal">The principal.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.PrincipalExtensions.GetName(System.Security.Principal.IIdentity)">
            <summary>
            Gets the name.
            </summary>
            <param name="identity">The identity.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">name claim is missing</exception>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.PrincipalExtensions.GetAuthenticationMethod(System.Security.Principal.IPrincipal)">
            <summary>
            Gets the authentication method.
            </summary>
            <param name="principal">The principal.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.PrincipalExtensions.GetAuthenticationMethods(System.Security.Principal.IPrincipal)">
            <summary>
            Gets the authentication method claims.
            </summary>
            <param name="principal">The principal.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.PrincipalExtensions.GetAuthenticationMethod(System.Security.Principal.IIdentity)">
            <summary>
            Gets the authentication method.
            </summary>
            <param name="identity">The identity.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">amr claim is missing</exception>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.PrincipalExtensions.GetAuthenticationMethods(System.Security.Principal.IIdentity)">
            <summary>
            Gets the authentication method claims.
            </summary>
            <param name="identity">The identity.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.PrincipalExtensions.GetIdentityProvider(System.Security.Principal.IPrincipal)">
            <summary>
            Gets the identity provider.
            </summary>
            <param name="principal">The principal.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.PrincipalExtensions.GetIdentityProvider(System.Security.Principal.IIdentity)">
            <summary>
            Gets the identity provider.
            </summary>
            <param name="identity">The identity.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">idp claim is missing</exception>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.PrincipalExtensions.IsAuthenticated(System.Security.Principal.IPrincipal)">
            <summary>
            Determines whether this instance is authenticated.
            </summary>
            <param name="principal">The principal.</param>
            <returns>
              <c>true</c> if the specified principal is authenticated; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Extensions.TokenExtensions">
            <summary>
            Extensions for Token
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.TokenExtensions.CreateJwtPayloadDictionary(Duende.IdentityServer.Models.Token,Duende.IdentityServer.Configuration.IdentityServerOptions,Microsoft.AspNetCore.Authentication.ISystemClock,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Creates the default JWT payload dictionary
            </summary>
            <param name="token"></param>
            <param name="options"></param>
            <param name="clock"></param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Extensions.X509CertificateExtensions">
            <summary>
            Extensions methods for X509Certificate2
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Extensions.X509CertificateExtensions.CreateThumbprintCnf(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Create the value of a thumbprint-based cnf claim
            </summary>
            <param name="certificate"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Models.ClientExtensions">
            <summary>
            Extension methods for client.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Models.ClientExtensions.IsImplicitOnly(Duende.IdentityServer.Models.Client)">
            <summary>
            Returns true if the client is an implicit-only client.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Models.ClientExtensions.GetKeysAsync(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.Secret})">
            <summary>
            Constructs a list of SecurityKey from a Secret collection
            </summary>
            <param name="secrets">The secrets</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Models.HashExtensions">
            <summary>
            Extension methods for hashing strings
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Models.HashExtensions.Sha256(System.String)">
            <summary>
            Creates a SHA256 hash of the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns>A hash</returns>
        </member>
        <member name="M:Duende.IdentityServer.Models.HashExtensions.Sha256(System.Byte[])">
            <summary>
            Creates a SHA256 hash of the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns>A hash.</returns>
        </member>
        <member name="M:Duende.IdentityServer.Models.HashExtensions.Sha512(System.String)">
            <summary>
            Creates a SHA512 hash of the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns>A hash</returns>
        </member>
        <member name="T:Duende.IdentityServer.Models.ProfileDataRequestContextExtensions">
            <summary>
            Extensions for ProfileDataRequestContext
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Models.ProfileDataRequestContextExtensions.FilterClaims(Duende.IdentityServer.Models.ProfileDataRequestContext,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Filters the claims based on requested claim types.
            </summary>
            <param name="context">The context.</param>
            <param name="claims">The claims.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Models.ProfileDataRequestContextExtensions.AddRequestedClaims(Duende.IdentityServer.Models.ProfileDataRequestContext,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Filters the claims based on the requested claim types and then adds them to the IssuedClaims collection.
            </summary>
            <param name="context">The context.</param>
            <param name="claims">The claims.</param>
        </member>
        <member name="M:Duende.IdentityServer.Models.ProfileDataRequestContextExtensions.LogProfileRequest(Duende.IdentityServer.Models.ProfileDataRequestContext,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Logs the profile request.
            </summary>
            <param name="context">The context.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Models.ProfileDataRequestContextExtensions.LogIssuedClaims(Duende.IdentityServer.Models.ProfileDataRequestContext,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Logs the issued claims.
            </summary>
            <param name="context">The context.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="T:Duende.IdentityServer.Models.ResourceExtensions">
            <summary>
            Extensions for Resource
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Models.ResourceExtensions.GetRequiredScopeValues(Duende.IdentityServer.Validation.ResourceValidationResult)">
            <summary>
            Returns the collection of scope values that are required.
            </summary>
            <param name="resourceValidationResult"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Models.ResourceExtensions.ToScopeNames(Duende.IdentityServer.Models.Resources)">
            <summary>
            Converts to scope names.
            </summary>
            <param name="resources">The resources.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Models.ResourceExtensions.FindIdentityResourcesByScope(Duende.IdentityServer.Models.Resources,System.String)">
            <summary>
            Finds the IdentityResource that matches the scope.
            </summary>
            <param name="resources">The resources.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Models.ResourceExtensions.FindApiResourcesByScope(Duende.IdentityServer.Models.Resources,System.String)">
            <summary>
            Finds the API resources that contain the scope.
            </summary>
            <param name="resources">The resources.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Models.ResourceExtensions.FindApiScope(Duende.IdentityServer.Models.Resources,System.String)">
            <summary>
            Finds the API scope.
            </summary>
            <param name="resources">The resources.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Models.IsActiveContext">
            <summary>
            Context describing the is-active check
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Models.IsActiveContext.#ctor(System.Security.Claims.ClaimsPrincipal,Duende.IdentityServer.Models.Client,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.IsActiveContext"/> class.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.IsActiveContext.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.IsActiveContext.Client">
            <summary>
            Gets or sets the client.
            </summary>
            <value>
            The client.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.IsActiveContext.Caller">
            <summary>
            Gets or sets the caller.
            </summary>
            <value>
            The caller.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.IsActiveContext.IsActive">
            <summary>
            Gets or sets a value indicating whether the subject is active and can recieve tokens.
            </summary>
            <value>
              <c>true</c> if the subject is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Models.LogoutNotificationContext">
            <summary>
            Provides the context necessary to construct a logout notificaiton.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutNotificationContext.SubjectId">
            <summary>
             The SubjectId of the user.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutNotificationContext.SessionId">
            <summary>
            The session Id of the user's authentication session.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutNotificationContext.ClientIds">
            <summary>
            The list of client Ids that the user has authenticated to.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Models.ProfileDataRequestContext">
            <summary>
            Class describing the profile data request
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Models.ProfileDataRequestContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.ProfileDataRequestContext"/> class.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Models.ProfileDataRequestContext.#ctor(System.Security.Claims.ClaimsPrincipal,Duende.IdentityServer.Models.Client,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.ProfileDataRequestContext" /> class.
            </summary>
            <param name="subject">The subject.</param>
            <param name="client">The client.</param>
            <param name="caller">The caller.</param>
            <param name="requestedClaimTypes">The requested claim types.</param>
        </member>
        <member name="P:Duende.IdentityServer.Models.ProfileDataRequestContext.ValidatedRequest">
            <summary>
            Gets or sets the validatedRequest.
            </summary>
            <value>
            The validatedRequest.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ProfileDataRequestContext.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ProfileDataRequestContext.RequestedClaimTypes">
            <summary>
            Gets or sets the requested claim types.
            </summary>
            <value>
            The requested claim types.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ProfileDataRequestContext.Client">
            <summary>
            Gets or sets the client id.
            </summary>
            <value>
            The client id.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ProfileDataRequestContext.Caller">
            <summary>
            Gets or sets the caller.
            </summary>
            <value>
            The caller.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ProfileDataRequestContext.RequestedResources">
            <summary>
            Gets or sets the requested resources (if available).
            </summary>
            <value>
            The resources.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ProfileDataRequestContext.IssuedClaims">
            <summary>
            Gets or sets the issued claims.
            </summary>
            <value>
            The issued claims.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Models.DeviceFlowAuthorizationRequest">
            <summary>
            Represents contextual information about a device flow authorization request.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.DeviceFlowAuthorizationRequest.Client">
            <summary>
            Gets or sets the client.
            </summary>
            <value>
            The client.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.DeviceFlowAuthorizationRequest.ValidatedResources">
            <summary>
            Gets or sets the validated resources.
            </summary>
            <value>
            The scopes requested.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Models.DeviceFlowInteractionResult">
            <summary>
            Request object for device flow interaction
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.DeviceFlowInteractionResult.ErrorDescription">
            <summary>
            Gets or sets the error description.
            </summary>
            <value>
            The error description.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.DeviceFlowInteractionResult.IsError">
            <summary>
            Gets a value indicating whether this instance is error.
            </summary>
            <value>
              <c>true</c> if this instance is error; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.DeviceFlowInteractionResult.IsAccessDenied">
            <summary>
            Gets or sets a value indicating whether this instance is access denied.
            </summary>
            <value>
              <c>true</c> if this instance is access denied; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Models.DeviceFlowInteractionResult.Failure(System.String)">
            <summary>
            Create failure result
            </summary>
            <param name="errorDescription">The error description.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Models.Grant">
            <summary>
            Models a grant the user has given.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.Grant.SubjectId">
            <summary>
            Gets or sets the subject identifier.
            </summary>
            <value>
            The subject identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.Grant.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.Grant.Description">
            <summary>
            Gets the description the user assigned to the device being authorized.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.Grant.Scopes">
            <summary>
            Gets or sets the scopes.
            </summary>
            <value>
            The scopes.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.Grant.CreationTime">
            <summary>
            Gets or sets the creation time.
            </summary>
            <value>
            The creation time.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.Grant.Expiration">
            <summary>
            Gets or sets the expiration.
            </summary>
            <value>
            The expiration.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Models.IdentityResources">
            <summary>
            Convenience class that defines standard identity resources.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Models.IdentityResources.OpenId">
            <summary>
            Models the standard openid scope
            </summary>
            <seealso cref="T:Duende.IdentityServer.Models.IdentityResource" />
        </member>
        <member name="M:Duende.IdentityServer.Models.IdentityResources.OpenId.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.IdentityResources.OpenId"/> class.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Models.IdentityResources.Profile">
            <summary>
            Models the standard profile scope
            </summary>
            <seealso cref="T:Duende.IdentityServer.Models.IdentityResource" />
        </member>
        <member name="M:Duende.IdentityServer.Models.IdentityResources.Profile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.IdentityResources.Profile"/> class.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Models.IdentityResources.Email">
            <summary>
            Models the standard email scope
            </summary>
            <seealso cref="T:Duende.IdentityServer.Models.IdentityResource" />
        </member>
        <member name="M:Duende.IdentityServer.Models.IdentityResources.Email.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.IdentityResources.Email"/> class.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Models.IdentityResources.Phone">
            <summary>
            Models the standard phone scope
            </summary>
            <seealso cref="T:Duende.IdentityServer.Models.IdentityResource" />
        </member>
        <member name="M:Duende.IdentityServer.Models.IdentityResources.Phone.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.IdentityResources.Phone"/> class.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Models.IdentityResources.Address">
            <summary>
            Models the standard address scope
            </summary>
            <seealso cref="T:Duende.IdentityServer.Models.IdentityResource" />
        </member>
        <member name="M:Duende.IdentityServer.Models.IdentityResources.Address.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.IdentityResources.Address"/> class.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Models.AuthorizationRequest">
            <summary>
            Represents contextual information about a authorization request.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.AuthorizationRequest.Client">
            <summary>
            The client.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.AuthorizationRequest.DisplayMode">
            <summary>
            The display mode passed from the authorization request.
            </summary>
            <value>
            The display mode.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.AuthorizationRequest.RedirectUri">
            <summary>
            Gets or sets the redirect URI.
            </summary>
            <value>
            The redirect URI.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.AuthorizationRequest.UiLocales">
            <summary>
            The UI locales passed from the authorization request.
            </summary>
            <value>
            The UI locales.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.AuthorizationRequest.IdP">
            <summary>
            The external identity provider requested. This is used to bypass home realm 
            discovery (HRD). This is provided via the <c>"idp:"</c> prefix to the <c>acr</c> 
            parameter on the authorize request.
            </summary>
            <value>
            The external identity provider identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.AuthorizationRequest.Tenant">
            <summary>
            The tenant requested. This is provided via the <c>"tenant:"</c> prefix to 
            the <c>acr</c> parameter on the authorize request.
            </summary>
            <value>
            The tenant.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.AuthorizationRequest.LoginHint">
            <summary>
            The expected username the user will use to login. This is requested from the client 
            via the <c>login_hint</c> parameter on the authorize request.
            </summary>
            <value>
            The LoginHint.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.AuthorizationRequest.PromptModes">
            <summary>
            Gets or sets the collection of prompt modes.
            </summary>
            <value>
            The collection of prompt modes.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.AuthorizationRequest.AcrValues">
            <summary>
            The acr values passed from the authorization request.
            </summary>
            <value>
            The acr values.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.AuthorizationRequest.ValidatedResources">
            <summary>
            The validated resources.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.AuthorizationRequest.Parameters">
            <summary>
            Gets the entire parameter collection.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.AuthorizationRequest.RequestObjectValues">
            <summary>
            Gets the validated contents of the request object (if present)
            </summary>
            <value>
            The request object values
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Models.AuthorizationRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.AuthorizationRequest"/> class.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Models.AuthorizationRequest.#ctor(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.AuthorizationRequest"/> class.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Models.ConsentRequest">
            <summary>
            Models the parameters to identify a request for consent.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Models.ConsentRequest.#ctor(Duende.IdentityServer.Models.AuthorizationRequest,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.ConsentRequest"/> class.
            </summary>
            <param name="request">The request.</param>
            <param name="subject">The subject.</param>
        </member>
        <member name="M:Duende.IdentityServer.Models.ConsentRequest.#ctor(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.ConsentRequest"/> class.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="subject">The subject.</param>
        </member>
        <member name="P:Duende.IdentityServer.Models.ConsentRequest.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ConsentRequest.Nonce">
            <summary>
            Gets or sets the nonce.
            </summary>
            <value>
            The nonce.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ConsentRequest.ScopesRequested">
            <summary>
            Gets or sets the scopes requested.
            </summary>
            <value>
            The scopes requested.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ConsentRequest.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ConsentRequest.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Models.ConsentResponse">
            <summary>
            Models the user's response to the consent screen.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.ConsentResponse.Error">
            <summary>
            Error, if any, for the consent response.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.ConsentResponse.ErrorDescription">
            <summary>
            Error description.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.ConsentResponse.Granted">
            <summary>
            Gets if consent was granted.
            </summary>
            <value>
              <c>true</c> if consent was granted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ConsentResponse.ScopesValuesConsented">
            <summary>
            Gets or sets the scope values consented to.
            </summary>
            <value>
            The scopes.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ConsentResponse.RememberConsent">
            <summary>
            Gets or sets a value indicating whether the user wishes the consent to be remembered.
            </summary>
            <value>
              <c>true</c> if consent is to be remembered; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ConsentResponse.Description">
            <summary>
            Gets the description of the device.
            </summary>
            <value>
            The description of the device.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Models.AuthorizationError">
            <summary>
            Enum to model interaction authorization errors.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Models.AuthorizationError.AccessDenied">
            <summary>
            Access denied
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Models.AuthorizationError.InteractionRequired">
            <summary>
            Interaction required
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Models.AuthorizationError.LoginRequired">
            <summary>
            Login required
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Models.AuthorizationError.AccountSelectionRequired">
            <summary>
            Account selection required
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Models.AuthorizationError.ConsentRequired">
            <summary>
            Consent required
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Models.ErrorMessage">
            <summary>
            Models the data for the error page.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.ErrorMessage.DisplayMode">
            <summary>
            The display mode passed from the authorization request.
            </summary>
            <value>
            The display mode.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ErrorMessage.UiLocales">
            <summary>
            The UI locales passed from the authorization request.
            </summary>
            <value>
            The UI locales.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ErrorMessage.Error">
            <summary>
            Gets or sets the error code.
            </summary>
            <value>
            The error code.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ErrorMessage.ErrorDescription">
            <summary>
            Gets or sets the error description.
            </summary>
            <value>
            The error description.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ErrorMessage.RequestId">
            <summary>
            The per-request identifier. This can be used to display to the end user and can be used in diagnostics.
            </summary>
            <value>
            The request identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ErrorMessage.RedirectUri">
            <summary>
            The redirect URI.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.ErrorMessage.ResponseMode">
            <summary>
            The response mode.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.ErrorMessage.ClientId">
            <summary>
            The client id making the request (if available).
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Models.LogoutMessage">
            <summary>
            Models the validated singout context.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Models.LogoutMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.LogoutMessage"/> class.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Models.LogoutMessage.#ctor(Duende.IdentityServer.Validation.ValidatedEndSessionRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.LogoutMessage"/> class.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutMessage.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutMessage.ClientName">
            <summary>
            Gets or sets the client name.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutMessage.PostLogoutRedirectUri">
            <summary>
            Gets or sets the post logout redirect URI.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutMessage.SubjectId">
            <summary>
            Gets or sets the subject identifier for the user at logout time.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutMessage.SessionId">
            <summary>
            Gets or sets the session identifier for the user at logout time.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutMessage.ClientIds">
            <summary>
             Ids of clients known to have an authentication session for user at end session time
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutMessage.Parameters">
            <summary>
            Gets the entire parameter collection.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutMessage.ContainsPayload">
            <summary>
             Flag to indicate if the payload contains useful information or not to avoid serailization.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Models.LogoutRequest">
            <summary>
            Models the request from a client to sign the user out.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Models.LogoutRequest.#ctor(System.String,Duende.IdentityServer.Models.LogoutMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.LogoutRequest"/> class.
            </summary>
            <param name="iframeUrl">The iframe URL.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutRequest.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutRequest.ClientName">
            <summary>
            Gets or sets the client name.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutRequest.PostLogoutRedirectUri">
            <summary>
            Gets or sets the post logout redirect URI.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutRequest.SubjectId">
            <summary>
            Gets or sets the subject identifier for the user at logout time.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutRequest.SessionId">
            <summary>
            Gets or sets the session identifier for the user at logout time.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutRequest.ClientIds">
            <summary>
             Ids of clients known to have an authentication session for user at end session time
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutRequest.Parameters">
            <summary>
            Gets the entire parameter collection.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutRequest.SignOutIFrameUrl">
            <summary>
            Gets or sets the sign out iframe URL.
            </summary>
            <value>
            The sign out iframe URL.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.LogoutRequest.ShowSignoutPrompt">
            <summary>
            Gets or sets a value indicating whether the user should be prompted for signout.
            </summary>
            <value>
              <c>true</c> if the signout prompt should be shown; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Models.Message`1">
            <summary>
            Base class for data that needs to be written out as cookies.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Models.Message`1.#ctor(`0)">
            <summary>
            Should only be used from unit tests
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Duende.IdentityServer.Models.Message`1.#ctor">
            <summary>
            For JSON serializer. 
            System.Text.Json.JsonSerializer requires public, parameterless constructor
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Models.Message`1.#ctor(`0,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Models.Message`1"/> class.
            </summary>
            <param name="data">The data.</param>
            <param name="now">The current UTC date/time.</param>
        </member>
        <member name="P:Duende.IdentityServer.Models.Message`1.Created">
            <summary>
            Gets or sets the UTC ticks the <see cref="T:Duende.IdentityServer.Models.Message`1" /> was created.
            </summary>
            <value>
            The created UTC ticks.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.Message`1.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Models.ParsedSecret">
            <summary>
            Represents a secret extracted from the HttpContext
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.ParsedSecret.Id">
            <summary>
            Gets or sets the identifier associated with this secret
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ParsedSecret.Credential">
            <summary>
            Gets or sets the credential to verify the secret
            </summary>
            <value>
            The credential.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ParsedSecret.Type">
            <summary>
            Gets or sets the type of the secret
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.ParsedSecret.Properties">
            <summary>
            Gets or sets additional properties.
            </summary>
            <value>
            The properties.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Models.SecurityKeyInfo">
            <summary>
            Information about a security key
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.SecurityKeyInfo.Key">
            <summary>
            The key
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.SecurityKeyInfo.SigningAlgorithm">
            <summary>
            The signing algorithm
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Models.TokenCreationRequest">
            <summary>
            Models the data to create a token from a validated request.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Models.TokenCreationRequest.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.TokenCreationRequest.ValidatedResources">
            <summary>
            Gets or sets the validated resources.
            </summary>
            <value>
            The resources.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.TokenCreationRequest.ValidatedRequest">
            <summary>
            Gets or sets the validated request.
            </summary>
            <value>
            The validated request.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.TokenCreationRequest.IncludeAllIdentityClaims">
            <summary>
            Gets or sets a value indicating whether [include all identity claims].
            </summary>
            <value>
            <c>true</c> if [include all identity claims]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.TokenCreationRequest.AccessTokenToHash">
            <summary>
            Gets or sets the access token to hash.
            </summary>
            <value>
            The access token to hash.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.TokenCreationRequest.AuthorizationCodeToHash">
            <summary>
            Gets or sets the authorization code to hash.
            </summary>
            <value>
            The authorization code to hash.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.TokenCreationRequest.StateHash">
            <summary>
            Gets or sets pre-hashed state
            </summary>
            <value>
            The pre-hashed state
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.TokenCreationRequest.Nonce">
            <summary>
            Gets or sets the nonce.
            </summary>
            <value>
            The nonce.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Models.TokenCreationRequest.Description">
            <summary>
            Gets the description the user assigned to the device being authorized.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Models.TokenCreationRequest.Validate">
            <summary>
            Called to validate the <see cref="T:Duende.IdentityServer.Models.TokenCreationRequest"/> before it is processed.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Models.TokenRequestErrors">
            <summary>
            Token request errors
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Models.TokenRequestErrors.InvalidRequest">
            <summary>
            invalid_request
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Models.TokenRequestErrors.InvalidClient">
            <summary>
            invalid_client
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Models.TokenRequestErrors.InvalidGrant">
            <summary>
            invalid_grant
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Models.TokenRequestErrors.UnauthorizedClient">
            <summary>
            unauthorized_client
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Models.TokenRequestErrors.UnsupportedGrantType">
            <summary>
            unsupported_grant_type
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Models.TokenRequestErrors.InvalidScope">
            <summary>
            invalid_scope
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Models.TokenRequestErrors.InvalidTarget">
            <summary>
            invalid_target
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Stores.IClientStoreExtensions">
            <summary>
            Extension for IClientStore
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IClientStoreExtensions.FindEnabledClientByIdAsync(Duende.IdentityServer.Stores.IClientStore,System.String)">
            <summary>
            Finds the enabled client by identifier.
            </summary>
            <param name="store">The store.</param>
            <param name="clientId">The client identifier.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.IResourceStoreExtensions">
            <summary>
            Extensions for IResourceStore
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IResourceStoreExtensions.FindResourcesByScopeAsync(Duende.IdentityServer.Stores.IResourceStore,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Finds the resources by scope.
            </summary>
            <param name="store">The store.</param>
            <param name="scopeNames">The scope names.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IResourceStoreExtensions.FindEnabledResourcesByScopeAsync(Duende.IdentityServer.Stores.IResourceStore,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Finds the enabled resources by scope.
            </summary>
            <param name="store">The store.</param>
            <param name="scopeNames">The scope names.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IResourceStoreExtensions.CreateResourceValidationResult(Duende.IdentityServer.Stores.IResourceStore,Duende.IdentityServer.Validation.ParsedScopesResult)">
            <summary>
            Creates a resource validation result.
            </summary>
            <param name="store">The store.</param>
            <param name="parsedScopesResult">The parsed scopes.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IResourceStoreExtensions.GetAllEnabledResourcesAsync(Duende.IdentityServer.Stores.IResourceStore)">
            <summary>
            Gets all enabled resources.
            </summary>
            <param name="store">The store.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IResourceStoreExtensions.FindEnabledIdentityResourcesByScopeAsync(Duende.IdentityServer.Stores.IResourceStore,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Finds the enabled identity resources by scope.
            </summary>
            <param name="store">The store.</param>
            <param name="scopeNames">The scope names.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.CachingClientStore`1">
            <summary>
            Cache decorator for IClientStore
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:Duende.IdentityServer.Stores.IClientStore" />
        </member>
        <member name="M:Duende.IdentityServer.Stores.CachingClientStore`1.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,`0,Duende.IdentityServer.Services.ICache{Duende.IdentityServer.Models.Client},Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Stores.CachingClientStore{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Stores.CachingClientStore`1"/> class.
            </summary>
            <param name="options">The options.</param>
            <param name="inner">The inner.</param>
            <param name="cache">The cache.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.CachingClientStore`1.FindClientByIdAsync(System.String)">
            <summary>
            Finds a client by id
            </summary>
            <param name="clientId">The client id</param>
            <returns>
            The client
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.CachingCorsPolicyService`1">
            <summary>
            Caching decorator for ICorsPolicyService
            </summary>
            <seealso cref="T:Duende.IdentityServer.Services.ICorsPolicyService" />
        </member>
        <member name="T:Duende.IdentityServer.Stores.CachingCorsPolicyService`1.CorsCacheEntry">
            <summary>
            Class to model entries in CORS origin cache.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.CachingCorsPolicyService`1.CorsCacheEntry.#ctor(System.Boolean)">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Stores.CachingCorsPolicyService`1.CorsCacheEntry.Allowed">
            <summary>
            Is origin allowed.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.CachingCorsPolicyService`1.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,`0,Duende.IdentityServer.Services.ICache{Duende.IdentityServer.Stores.CachingCorsPolicyService{`0}.CorsCacheEntry},Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Stores.CachingCorsPolicyService{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Stores.CachingResourceStore`1"/> class.
            </summary>
            <param name="options">The options.</param>
            <param name="inner">The inner.</param>
            <param name="corsCache">The CORS origin cache.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.CachingCorsPolicyService`1.IsOriginAllowedAsync(System.String)">
            <summary>
            Determines whether origin is allowed.
            </summary>
            <param name="origin">The origin.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.CachingResourceStore`1">
            <summary>
            Caching decorator for IResourceStore
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:Duende.IdentityServer.Stores.IResourceStore" />
        </member>
        <member name="M:Duende.IdentityServer.Stores.CachingResourceStore`1.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,`0,Duende.IdentityServer.Services.ICache{System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.IdentityResource}},Duende.IdentityServer.Services.ICache{System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.ApiResource}},Duende.IdentityServer.Services.ICache{System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.ApiResource}},Duende.IdentityServer.Services.ICache{System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.ApiScope}},Duende.IdentityServer.Services.ICache{Duende.IdentityServer.Models.Resources},Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Stores.CachingResourceStore{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Stores.CachingResourceStore`1"/> class.
            </summary>
            <param name="options">The options.</param>
            <param name="inner">The inner.</param>
            <param name="identityCache">The identity cache.</param>
            <param name="apiByScopeCache">The API by scope cache.</param>
            <param name="apisCache">The API cache.</param>
            <param name="scopeCache"></param>
            <param name="allCache">All cache.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.CachingResourceStore`1.GetAllResourcesAsync">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.CachingResourceStore`1.FindApiResourcesByNameAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.CachingResourceStore`1.FindIdentityResourcesByScopeNameAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.CachingResourceStore`1.FindApiResourcesByScopeNameAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.CachingResourceStore`1.FindApiScopesByNameAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Stores.DefaultAuthorizationCodeStore">
            <summary>
            Default authorization code store.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultAuthorizationCodeStore.#ctor(Duende.IdentityServer.Stores.IPersistedGrantStore,Duende.IdentityServer.Stores.Serialization.IPersistentGrantSerializer,Duende.IdentityServer.Services.IHandleGenerationService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Stores.DefaultAuthorizationCodeStore})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Stores.DefaultAuthorizationCodeStore"/> class.
            </summary>
            <param name="store">The store.</param>
            <param name="serializer">The serializer.</param>
            <param name="handleGenerationService">The handle generation service.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultAuthorizationCodeStore.StoreAuthorizationCodeAsync(Duende.IdentityServer.Models.AuthorizationCode)">
            <summary>
            Stores the authorization code asynchronous.
            </summary>
            <param name="code">The code.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultAuthorizationCodeStore.GetAuthorizationCodeAsync(System.String)">
            <summary>
            Gets the authorization code asynchronous.
            </summary>
            <param name="code">The code.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultAuthorizationCodeStore.RemoveAuthorizationCodeAsync(System.String)">
            <summary>
            Removes the authorization code asynchronous.
            </summary>
            <param name="code">The code.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.DefaultGrantStore`1">
            <summary>
            Base class for persisting grants using the IPersistedGrantStore.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Duende.IdentityServer.Stores.DefaultGrantStore`1.GrantType">
            <summary>
            The grant type being stored.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Stores.DefaultGrantStore`1.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Stores.DefaultGrantStore`1.Store">
            <summary>
            The PersistedGrantStore.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Stores.DefaultGrantStore`1.Serializer">
            <summary>
            The PersistentGrantSerializer;
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Stores.DefaultGrantStore`1.HandleGenerationService">
            <summary>
            The HandleGenerationService.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultGrantStore`1.#ctor(System.String,Duende.IdentityServer.Stores.IPersistedGrantStore,Duende.IdentityServer.Stores.Serialization.IPersistentGrantSerializer,Duende.IdentityServer.Services.IHandleGenerationService,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Stores.DefaultGrantStore`1"/> class.
            </summary>
            <param name="grantType">Type of the grant.</param>
            <param name="store">The store.</param>
            <param name="serializer">The serializer.</param>
            <param name="handleGenerationService">The handle generation service.</param>
            <param name="logger">The logger.</param>
            <exception cref="T:System.ArgumentNullException">grantType</exception>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultGrantStore`1.GetHashedKey(System.String)">
            <summary>
            Gets the hashed key.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultGrantStore`1.GetItemAsync(System.String)">
            <summary>
            Gets the item.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultGrantStore`1.CreateItemAsync(`0,System.String,System.String,System.String,System.String,System.DateTime,System.Int32)">
            <summary>
            Creates the item.
            </summary>
            <param name="item">The item.</param>
            <param name="clientId">The client identifier.</param>
            <param name="subjectId">The subject identifier.</param>
            <param name="sessionId">The session identifier.</param>
            <param name="description">The description.</param>
            <param name="created">The created.</param>
            <param name="lifetime">The lifetime.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultGrantStore`1.StoreItemAsync(System.String,`0,System.String,System.String,System.String,System.String,System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Stores the item.
            </summary>
            <param name="key">The key.</param>
            <param name="item">The item.</param>
            <param name="clientId">The client identifier.</param>
            <param name="subjectId">The subject identifier.</param>
            <param name="sessionId">The session identifier.</param>
            <param name="description">The description.</param>
            <param name="created">The created time.</param>
            <param name="expiration">The expiration.</param>
            <param name="consumedTime">The consumed time.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultGrantStore`1.RemoveItemAsync(System.String)">
            <summary>
            Removes the item.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultGrantStore`1.RemoveAllAsync(System.String,System.String)">
            <summary>
            Removes all items for a subject id / cliend id combination.
            </summary>
            <param name="subjectId">The subject identifier.</param>
            <param name="clientId">The client identifier.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.DefaultReferenceTokenStore">
            <summary>
            Default reference token store.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultReferenceTokenStore.#ctor(Duende.IdentityServer.Stores.IPersistedGrantStore,Duende.IdentityServer.Stores.Serialization.IPersistentGrantSerializer,Duende.IdentityServer.Services.IHandleGenerationService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Stores.DefaultReferenceTokenStore})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Stores.DefaultReferenceTokenStore"/> class.
            </summary>
            <param name="store">The store.</param>
            <param name="serializer">The serializer.</param>
            <param name="handleGenerationService">The handle generation service.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultReferenceTokenStore.StoreReferenceTokenAsync(Duende.IdentityServer.Models.Token)">
            <summary>
            Stores the reference token asynchronous.
            </summary>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultReferenceTokenStore.GetReferenceTokenAsync(System.String)">
            <summary>
            Gets the reference token asynchronous.
            </summary>
            <param name="handle">The handle.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultReferenceTokenStore.RemoveReferenceTokenAsync(System.String)">
            <summary>
            Removes the reference token asynchronous.
            </summary>
            <param name="handle">The handle.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultReferenceTokenStore.RemoveReferenceTokensAsync(System.String,System.String)">
            <summary>
            Removes the reference tokens asynchronous.
            </summary>
            <param name="subjectId">The subject identifier.</param>
            <param name="clientId">The client identifier.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.DefaultRefreshTokenStore">
            <summary>
            Default refresh token store.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultRefreshTokenStore.#ctor(Duende.IdentityServer.Stores.IPersistedGrantStore,Duende.IdentityServer.Stores.Serialization.IPersistentGrantSerializer,Duende.IdentityServer.Services.IHandleGenerationService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Stores.DefaultRefreshTokenStore})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Stores.DefaultRefreshTokenStore"/> class.
            </summary>
            <param name="store">The store.</param>
            <param name="serializer">The serializer.</param>
            <param name="handleGenerationService">The handle generation service.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultRefreshTokenStore.StoreRefreshTokenAsync(Duende.IdentityServer.Models.RefreshToken)">
            <summary>
            Stores the refresh token.
            </summary>
            <param name="refreshToken">The refresh token.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultRefreshTokenStore.UpdateRefreshTokenAsync(System.String,Duende.IdentityServer.Models.RefreshToken)">
            <summary>
            Updates the refresh token.
            </summary>
            <param name="handle">The handle.</param>
            <param name="refreshToken">The refresh token.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultRefreshTokenStore.GetRefreshTokenAsync(System.String)">
            <summary>
            Gets the refresh token.
            </summary>
            <param name="refreshTokenHandle">The refresh token handle.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultRefreshTokenStore.RemoveRefreshTokenAsync(System.String)">
            <summary>
            Removes the refresh token.
            </summary>
            <param name="refreshTokenHandle">The refresh token handle.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultRefreshTokenStore.RemoveRefreshTokensAsync(System.String,System.String)">
            <summary>
            Removes the refresh tokens.
            </summary>
            <param name="subjectId">The subject identifier.</param>
            <param name="clientId">The client identifier.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.DefaultUserConsentStore">
            <summary>
            Default user consent store.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultUserConsentStore.#ctor(Duende.IdentityServer.Stores.IPersistedGrantStore,Duende.IdentityServer.Stores.Serialization.IPersistentGrantSerializer,Duende.IdentityServer.Services.IHandleGenerationService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Stores.DefaultUserConsentStore})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Stores.DefaultUserConsentStore"/> class.
            </summary>
            <param name="store">The store.</param>
            <param name="serializer">The serializer.</param>
            <param name="handleGenerationService">The handle generation service.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultUserConsentStore.StoreUserConsentAsync(Duende.IdentityServer.Models.Consent)">
            <summary>
            Stores the user consent asynchronous.
            </summary>
            <param name="consent">The consent.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultUserConsentStore.GetUserConsentAsync(System.String,System.String)">
            <summary>
            Gets the user consent asynchronous.
            </summary>
            <param name="subjectId">The subject identifier.</param>
            <param name="clientId">The client identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.DefaultUserConsentStore.RemoveUserConsentAsync(System.String,System.String)">
            <summary>
            Removes the user consent asynchronous.
            </summary>
            <param name="subjectId">The subject identifier.</param>
            <param name="clientId">The client identifier.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.Default.DistributedCacheAuthorizationParametersMessageStore">
            <summary>
            Implementation of IAuthorizationParametersMessageStore that uses the IDistributedCache.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.Default.DistributedCacheAuthorizationParametersMessageStore.#ctor(Microsoft.Extensions.Caching.Distributed.IDistributedCache,Duende.IdentityServer.Services.IHandleGenerationService)">
            <summary>
            Ctor.
            </summary>
            <param name="distributedCache"></param>
            <param name="handleGenerationService"></param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.Default.DistributedCacheAuthorizationParametersMessageStore.WriteAsync(Duende.IdentityServer.Models.Message{System.Collections.Generic.IDictionary{System.String,System.String[]}})">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.Default.DistributedCacheAuthorizationParametersMessageStore.ReadAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.Default.DistributedCacheAuthorizationParametersMessageStore.DeleteAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Stores.ProtectedDataMessageStore`1">
            <summary>
            IMessageStore implementation that uses data protection to protect message.
            </summary>
            <typeparam name="TModel"></typeparam>
        </member>
        <member name="F:Duende.IdentityServer.Stores.ProtectedDataMessageStore`1.Protector">
            <summary>
            The data protector.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Stores.ProtectedDataMessageStore`1.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.ProtectedDataMessageStore`1.#ctor(Microsoft.AspNetCore.DataProtection.IDataProtectionProvider,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Stores.ProtectedDataMessageStore{`0}})">
            <summary>
            Ctor
            </summary>
            <param name="provider"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.ProtectedDataMessageStore`1.ReadAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Duende.IdentityServer.Stores.ProtectedDataMessageStore`1.WriteAsync(Duende.IdentityServer.Models.Message{`0})">
            <inheritdoc />
        </member>
        <member name="T:Duende.IdentityServer.Stores.IAuthorizationParametersMessageStore">
            <summary>
            Interface for authorization request messages that are sent from the authorization endpoint to the login and consent UI.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IAuthorizationParametersMessageStore.WriteAsync(Duende.IdentityServer.Models.Message{System.Collections.Generic.IDictionary{System.String,System.String[]}})">
            <summary>
            Writes the authorization parameters.
            </summary>
            <param name="message">The message.</param>
            <returns>The identifier for the stored message.</returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IAuthorizationParametersMessageStore.ReadAsync(System.String)">
            <summary>
            Reads the authorization parameters.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IAuthorizationParametersMessageStore.DeleteAsync(System.String)">
            <summary>
            Deletes the authorization parameters.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.IConsentMessageStore">
            <summary>
            Interface for consent messages that are sent from the consent UI to the authorization endpoint.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IConsentMessageStore.WriteAsync(System.String,Duende.IdentityServer.Models.Message{Duende.IdentityServer.Models.ConsentResponse})">
            <summary>
            Writes the consent response message.
            </summary>
            <param name="id">The id for the message.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IConsentMessageStore.ReadAsync(System.String)">
            <summary>
            Reads the consent response message.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IConsentMessageStore.DeleteAsync(System.String)">
            <summary>
            Deletes the consent response message.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.IMessageStore`1">
            <summary>
            Interface for a message store
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IMessageStore`1.WriteAsync(Duende.IdentityServer.Models.Message{`0})">
            <summary>
            Writes the message.
            </summary>
            <param name="message">The message.</param>
            <returns>An identifier for the message</returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IMessageStore`1.ReadAsync(System.String)">
            <summary>
            Reads the message.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.InMemoryClientStore">
            <summary>
            In-memory client store
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryClientStore.#ctor(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.Client})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Stores.InMemoryClientStore"/> class.
            </summary>
            <param name="clients">The clients.</param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryClientStore.FindClientByIdAsync(System.String)">
            <summary>
            Finds a client by id
            </summary>
            <param name="clientId">The client id</param>
            <returns>
            The client
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.InMemoryDeviceFlowStore">
            <summary>
            In-memory device flow store
            </summary>
            <seealso cref="T:Duende.IdentityServer.Stores.IDeviceFlowStore" />
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryDeviceFlowStore.StoreDeviceAuthorizationAsync(System.String,System.String,Duende.IdentityServer.Models.DeviceCode)">
            <summary>
            Stores the device authorization request.
            </summary>
            <param name="deviceCode">The device code.</param>
            <param name="userCode">The user code.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryDeviceFlowStore.FindByUserCodeAsync(System.String)">
            <summary>
            Finds device authorization by user code.
            </summary>
            <param name="userCode">The user code.</param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryDeviceFlowStore.FindByDeviceCodeAsync(System.String)">
            <summary>
            Finds device authorization by device code.
            </summary>
            <param name="deviceCode">The device code.</param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryDeviceFlowStore.UpdateByUserCodeAsync(System.String,Duende.IdentityServer.Models.DeviceCode)">
            <summary>
            Updates device authorization, searching by user code.
            </summary>
            <param name="userCode">The user code.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryDeviceFlowStore.RemoveByDeviceCodeAsync(System.String)">
            <summary>
            Removes the device authorization, searching by device code.
            </summary>
            <param name="deviceCode">The device code.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.InMemoryPersistedGrantStore">
            <summary>
            In-memory persisted grant store
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryPersistedGrantStore.StoreAsync(Duende.IdentityServer.Models.PersistedGrant)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryPersistedGrantStore.GetAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryPersistedGrantStore.GetAllAsync(Duende.IdentityServer.Stores.PersistedGrantFilter)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryPersistedGrantStore.RemoveAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryPersistedGrantStore.RemoveAllAsync(Duende.IdentityServer.Stores.PersistedGrantFilter)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Stores.InMemoryResourcesStore">
            <summary>
            In-memory resource store
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryResourcesStore.#ctor(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.IdentityResource},System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.ApiResource},System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.ApiScope})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Stores.InMemoryResourcesStore" /> class.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryResourcesStore.GetAllResourcesAsync">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryResourcesStore.FindApiResourcesByNameAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryResourcesStore.FindIdentityResourcesByScopeNameAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryResourcesStore.FindApiResourcesByScopeNameAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryResourcesStore.FindApiScopesByNameAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Stores.InMemorySigningCredentialsStore">
            <summary>
            Default signing credentials store
            </summary>
            <seealso cref="T:Duende.IdentityServer.Stores.ISigningCredentialStore" />
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemorySigningCredentialsStore.#ctor(Microsoft.IdentityModel.Tokens.SigningCredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Stores.InMemorySigningCredentialsStore"/> class.
            </summary>
            <param name="credential">The credential.</param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemorySigningCredentialsStore.GetSigningCredentialsAsync">
            <summary>
            Gets the signing credentials.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.InMemoryValidationKeysStore">
            <summary>
            The default validation key store
            </summary>
            <seealso cref="T:Duende.IdentityServer.Stores.IValidationKeysStore" />
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryValidationKeysStore.#ctor(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.SecurityKeyInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Stores.InMemoryValidationKeysStore"/> class.
            </summary>
            <param name="keys">The keys.</param>
            <exception cref="T:System.ArgumentNullException">keys</exception>
        </member>
        <member name="M:Duende.IdentityServer.Stores.InMemoryValidationKeysStore.GetValidationKeysAsync">
            <summary>
            Gets all validation keys.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.ISigningCredentialStore">
            <summary>
            Interface for a signing credential store
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.ISigningCredentialStore.GetSigningCredentialsAsync">
            <summary>
            Gets the signing credentials.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.IValidationKeysStore">
            <summary>
            Interface for the validation key store
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.IValidationKeysStore.GetValidationKeysAsync">
            <summary>
            Gets all validation keys.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Stores.ValidatingClientStore`1">
            <summary>
            Client store decorator for running runtime configuration validation checks
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Stores.ValidatingClientStore`1.#ctor(`0,Duende.IdentityServer.Validation.IClientConfigurationValidator,Duende.IdentityServer.Services.IEventService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Stores.ValidatingClientStore{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Stores.ValidatingClientStore`1" /> class.
            </summary>
            <param name="inner">The inner.</param>
            <param name="validator">The validator.</param>
            <param name="events">The events.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Stores.ValidatingClientStore`1.FindClientByIdAsync(System.String)">
            <summary>
            Finds a client by id (and runs the validation logic)
            </summary>
            <param name="clientId">The client id</param>
            <returns>
            The client or an InvalidOperationException
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.IdentityServerToolsExtensions">
            <summary>
            Extensions for IdentityServerTools
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.IdentityServerToolsExtensions.IssueClientJwtAsync(Duende.IdentityServer.IdentityServerTools,System.String,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Issues the client JWT.
            </summary>
            <param name="tools">The tools.</param>
            <param name="clientId">The client identifier.</param>
            <param name="lifetime">The lifetime.</param>
            <param name="scopes">The scopes.</param>
            <param name="audiences">The audiences.</param>
            <param name="additionalClaims">Additional claims</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IUserSessionExtensions">
            <summary>
            Extension for IUserSession.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IUserSessionExtensions.GetLogoutNotificationContext(Duende.IdentityServer.Services.IUserSession)">
            <summary>
            Creates a LogoutNotificationContext for the current user session.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultBackChannelLogoutHttpClient">
            <summary>
            Models making HTTP requests for back-channel logout notification.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultBackChannelLogoutHttpClient.#ctor(System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Constructor for BackChannelLogoutHttpClient.
            </summary>
            <param name="client"></param>
            <param name="loggerFactory"></param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultBackChannelLogoutHttpClient.PostAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Posts the payload to the url.
            </summary>
            <param name="url"></param>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultBackChannelLogoutService">
            <summary>
            Default back-channel logout notification implementation.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultBackChannelLogoutService.DefaultLogoutTokenLifetime">
            <summary>
            Default value for the back-channel JWT lifetime.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultBackChannelLogoutService.Clock">
            <summary>
            The system clock;
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultBackChannelLogoutService.Tools">
            <summary>
            The IdentityServerTools used to create and the JWT.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultBackChannelLogoutService.LogoutNotificationService">
            <summary>
            The ILogoutNotificationService to build the back channel logout requests.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultBackChannelLogoutService.HttpClient">
            <summary>
            HttpClient to make the outbound HTTP calls.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultBackChannelLogoutService.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultBackChannelLogoutService.#ctor(Microsoft.AspNetCore.Authentication.ISystemClock,Duende.IdentityServer.IdentityServerTools,Duende.IdentityServer.Services.ILogoutNotificationService,Duende.IdentityServer.Services.IBackChannelLogoutHttpClient,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.IBackChannelLogoutService})">
            <summary>
            Constructor.
            </summary>
            <param name="clock"></param>
            <param name="tools"></param>
            <param name="logoutNotificationService"></param>
            <param name="backChannelLogoutHttpClient"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultBackChannelLogoutService.SendLogoutNotificationsAsync(Duende.IdentityServer.Models.LogoutNotificationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultBackChannelLogoutService.SendLogoutNotificationsAsync(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Services.BackChannelLogoutRequest})">
            <summary>
            Sends the logout notifications for the collection of clients.
            </summary>
            <param name="requests"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultBackChannelLogoutService.SendLogoutNotificationAsync(Duende.IdentityServer.Services.BackChannelLogoutRequest)">
            <summary>
            Performs the back-channel logout for a single client.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultBackChannelLogoutService.PostLogoutJwt(Duende.IdentityServer.Services.BackChannelLogoutRequest,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Performs the HTTP POST of the logout payload to the client.
            </summary>
            <param name="client"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultBackChannelLogoutService.CreateFormPostPayloadAsync(Duende.IdentityServer.Services.BackChannelLogoutRequest)">
            <summary>
            Creates the form-url-encoded payload (as a dictionary) to send to the client.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultBackChannelLogoutService.CreateTokenAsync(Duende.IdentityServer.Services.BackChannelLogoutRequest)">
            <summary>
            Creates the JWT used for the back-channel logout notification.
            </summary>
            <param name="request"></param>
            <returns>The token.</returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultBackChannelLogoutService.CreateClaimsForTokenAsync(Duende.IdentityServer.Services.BackChannelLogoutRequest)">
            <summary>
            Create the claims to be used in the back-channel logout token.
            </summary>
            <param name="request"></param>
            <returns>The claims to include in the token.</returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultCache`1">
            <summary>
            IMemoryCache-based implementation of the cache
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:Duende.IdentityServer.Services.ICache`1" />
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultCache`1.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.DefaultCache`1"/> class.
            </summary>
            <param name="cache">The cache.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultCache`1.GetAsync(System.String)">
            <summary>
            Gets the cached data based upon a key index.
            </summary>
            <param name="key">The key.</param>
            <returns>
            The cached item, or <c>null</c> if no item matches the key.
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultCache`1.SetAsync(System.String,`0,System.TimeSpan)">
            <summary>
            Caches the data based upon a key
            </summary>
            <param name="key">The key.</param>
            <param name="item">The item.</param>
            <param name="expiration">The expiration.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultClaimsService">
            <summary>
            Default claims provider implementation
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultClaimsService.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultClaimsService.Profile">
            <summary>
            The user service
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultClaimsService.#ctor(Duende.IdentityServer.Services.IProfileService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.DefaultClaimsService})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.DefaultClaimsService"/> class.
            </summary>
            <param name="profile">The profile service</param>
            <param name="logger">The logger</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultClaimsService.GetIdentityTokenClaimsAsync(System.Security.Claims.ClaimsPrincipal,Duende.IdentityServer.Validation.ResourceValidationResult,System.Boolean,Duende.IdentityServer.Validation.ValidatedRequest)">
            <summary>
            Returns claims for an identity token
            </summary>
            <param name="subject">The subject</param>
            <param name="resources">The requested resources</param>
            <param name="includeAllIdentityClaims">Specifies if all claims should be included in the token, or if the userinfo endpoint can be used to retrieve them</param>
            <param name="request">The raw request</param>
            <returns>
            Claims for the identity token
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultClaimsService.GetAccessTokenClaimsAsync(System.Security.Claims.ClaimsPrincipal,Duende.IdentityServer.Validation.ResourceValidationResult,Duende.IdentityServer.Validation.ValidatedRequest)">
            <summary>
            Returns claims for an access token.
            </summary>
            <param name="subject">The subject.</param>
            <param name="resourceResult">The validated resource result</param>
            <param name="request">The raw request.</param>
            <returns>
            Claims for the access token
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultClaimsService.GetStandardSubjectClaims(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Gets the standard subject claims.
            </summary>
            <param name="subject">The subject.</param>
            <returns>A list of standard claims</returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultClaimsService.GetOptionalClaims(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Gets additional (and optional) claims from the cookie or incoming subject.
            </summary>
            <param name="subject">The subject.</param>
            <returns>Additional claims</returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultClaimsService.FilterProtocolClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Filters out protocol claims like amr, nonce etc..
            </summary>
            <param name="claims">The claims.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultClaimsService.FilterRequestedClaimTypes(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Filters out protocol claims like amr, nonce etc..
            </summary>
            <param name="claimTypes">The claim types.</param>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultConsentService">
            <summary>
            Default consent service
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultConsentService.UserConsentStore">
            <summary>
            The user consent store
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultConsentService.Clock">
            <summary>
             The clock
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultConsentService.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultConsentService.#ctor(Microsoft.AspNetCore.Authentication.ISystemClock,Duende.IdentityServer.Stores.IUserConsentStore,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.DefaultConsentService})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.DefaultConsentService" /> class.
            </summary>
            <param name="clock">The clock.</param>
            <param name="userConsentStore">The user consent store.</param>
            <param name="logger">The logger.</param>
            <exception cref="T:System.ArgumentNullException">store</exception>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultConsentService.RequiresConsentAsync(System.Security.Claims.ClaimsPrincipal,Duende.IdentityServer.Models.Client,System.Collections.Generic.IEnumerable{Duende.IdentityServer.Validation.ParsedScopeValue})">
            <summary>
            Checks if consent is required.
            </summary>
            <param name="subject">The user.</param>
            <param name="client">The client.</param>
            <param name="parsedScopes">The parsed scopes.</param>
            <returns>
            Boolean if consent is required.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            client
            or
            subject
            </exception>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultConsentService.UpdateConsentAsync(System.Security.Claims.ClaimsPrincipal,Duende.IdentityServer.Models.Client,System.Collections.Generic.IEnumerable{Duende.IdentityServer.Validation.ParsedScopeValue})">
            <summary>
            Updates the consent asynchronous.
            </summary>
            <param name="client">The client.</param>
            <param name="subject">The subject.</param>
            <param name="parsedScopes">The parsed scopes.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            client
            or
            subject
            </exception>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultCorsPolicyService">
            <summary>
            Default CORS policy service.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultCorsPolicyService.Logger">
            <summary>
            Logger
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultCorsPolicyService.#ctor(Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.DefaultCorsPolicyService})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.DefaultCorsPolicyService"/> class.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultCorsPolicyService.AllowedOrigins">
            <summary>
            The list allowed origins that are allowed.
            </summary>
            <value>
            The allowed origins.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultCorsPolicyService.AllowAll">
            <summary>
            Gets or sets a value indicating whether all origins are allowed.
            </summary>
            <value>
              <c>true</c> if allow all; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultCorsPolicyService.IsOriginAllowedAsync(System.String)">
            <summary>
            Determines whether the origin allowed.
            </summary>
            <param name="origin">The origin.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.Default.DefaultDeviceFlowCodeService">
            <summary>
            Default wrapper service for IDeviceFlowStore, handling key hashing
            </summary>
            <seealso cref="T:Duende.IdentityServer.Services.IDeviceFlowCodeService" />
        </member>
        <member name="M:Duende.IdentityServer.Services.Default.DefaultDeviceFlowCodeService.#ctor(Duende.IdentityServer.Stores.IDeviceFlowStore,Duende.IdentityServer.Services.IHandleGenerationService)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.Default.DefaultDeviceFlowCodeService"/> class.
            </summary>
            <param name="store">The store.</param>
            <param name="handleGenerationService">The handle generation service.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.Default.DefaultDeviceFlowCodeService.StoreDeviceAuthorizationAsync(System.String,Duende.IdentityServer.Models.DeviceCode)">
            <summary>
            Stores the device authorization request.
            </summary>
            <param name="userCode">The user code.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.Default.DefaultDeviceFlowCodeService.FindByUserCodeAsync(System.String)">
            <summary>
            Finds device authorization by user code.
            </summary>
            <param name="userCode">The user code.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.Default.DefaultDeviceFlowCodeService.FindByDeviceCodeAsync(System.String)">
            <summary>
            Finds device authorization by device code.
            </summary>
            <param name="deviceCode">The device code.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.Default.DefaultDeviceFlowCodeService.UpdateByUserCodeAsync(System.String,Duende.IdentityServer.Models.DeviceCode)">
            <summary>
            Updates device authorization, searching by user code.
            </summary>
            <param name="userCode">The user code.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.Default.DefaultDeviceFlowCodeService.RemoveByDeviceCodeAsync(System.String)">
            <summary>
            Removes the device authorization, searching by device code.
            </summary>
            <param name="deviceCode">The device code.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultEventSink">
            <summary>
            Default implementation of the event service. Write events raised to the log.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultEventSink._logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultEventSink.#ctor(Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Events.DefaultEventService})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.DefaultEventSink"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultEventSink.PersistAsync(Duende.IdentityServer.Events.Event)">
            <summary>
            Raises the specified event.
            </summary>
            <param name="evt">The event.</param>
            <exception cref="T:System.ArgumentNullException">evt</exception>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultHandleGenerationService">
            <summary>
            Default handle generation service
            </summary>
            <seealso cref="T:Duende.IdentityServer.Services.IHandleGenerationService" />
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultHandleGenerationService.GenerateAsync(System.Int32)">
            <summary>
            Generates a handle.
            </summary>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultJwtRequestUriHttpClient">
            <summary>
            Default JwtRequest client
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultJwtRequestUriHttpClient.#ctor(System.Net.Http.HttpClient,Duende.IdentityServer.Configuration.IdentityServerOptions,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            ctor
            </summary>
            <param name="client">An HTTP client</param>
            <param name="options">The options.</param>
            <param name="loggerFactory">The logger factory</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultJwtRequestUriHttpClient.GetJwtAsync(System.String,Duende.IdentityServer.Models.Client)">
            <inheritdoc />
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultKeyMaterialService">
            <summary>
            The default key material service
            </summary>
            <seealso cref="T:Duende.IdentityServer.Services.IKeyMaterialService" />
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultKeyMaterialService.#ctor(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Stores.IValidationKeysStore},System.Collections.Generic.IEnumerable{Duende.IdentityServer.Stores.ISigningCredentialStore},Duende.IdentityServer.Services.KeyManagement.IAutomaticKeyManagerKeyStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.DefaultKeyMaterialService"/> class.
            </summary>
            <param name="validationKeysStores">The validation keys stores.</param>
            <param name="signingCredentialStores">The signing credential store.</param>
            <param name="keyManagerKeyStore">The store for automatic key management.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultKeyMaterialService.GetSigningCredentialsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultKeyMaterialService.GetAllSigningCredentialsAsync">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultKeyMaterialService.GetValidationKeysAsync">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultPersistedGrantService">
            <summary>
            Default persisted grant service
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultPersistedGrantService.#ctor(Duende.IdentityServer.Stores.IPersistedGrantStore,Duende.IdentityServer.Stores.Serialization.IPersistentGrantSerializer,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.DefaultPersistedGrantService})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.DefaultPersistedGrantService"/> class.
            </summary>
            <param name="store">The store.</param>
            <param name="serializer">The serializer.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultPersistedGrantService.GetAllGrantsAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultPersistedGrantService.RemoveAllGrantsAsync(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultProfileService">
            <summary>
            Default profile service implementation.
            This implementation sources all claims from the current subject (e.g. the cookie).
            </summary>
            <seealso cref="T:Duende.IdentityServer.Services.IProfileService" />
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultProfileService.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultProfileService.#ctor(Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.DefaultProfileService})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.DefaultProfileService"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultProfileService.GetProfileDataAsync(Duende.IdentityServer.Models.ProfileDataRequestContext)">
            <summary>
            This method is called whenever claims about the user are requested (e.g. during token creation or via the userinfo endpoint)
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultProfileService.IsActiveAsync(Duende.IdentityServer.Models.IsActiveContext)">
            <summary>
            This method gets called whenever identity server needs to determine if the user is valid or active (e.g. if the user's account has been deactivated since they logged in).
            (e.g. during token issuance or validation).
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultRefreshTokenService">
            <summary>
            Default refresh token service
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultRefreshTokenService.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultRefreshTokenService.RefreshTokenStore">
            <summary>
            The refresh token store
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultRefreshTokenService.Profile">
            <summary>
            The profile service
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultRefreshTokenService.Clock">
            <summary>
            The clock
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultRefreshTokenService.#ctor(Duende.IdentityServer.Stores.IRefreshTokenStore,Duende.IdentityServer.Services.IProfileService,Microsoft.AspNetCore.Authentication.ISystemClock,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.DefaultRefreshTokenService})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.DefaultRefreshTokenService" /> class.
            </summary>
            <param name="refreshTokenStore">The refresh token store</param>
            <param name="profile"></param>
            <param name="clock">The clock</param>
            <param name="logger">The logger</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultRefreshTokenService.ValidateRefreshTokenAsync(System.String,Duende.IdentityServer.Models.Client)">
            <summary>
            Validates a refresh token
            </summary>
            <param name="tokenHandle">The token handle.</param>
            <param name="client">The client.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultRefreshTokenService.AcceptConsumedTokenAsync(Duende.IdentityServer.Models.RefreshToken)">
            <summary>
            Callback to decide if an already consumed token should be accepted.
            </summary>
            <param name="refreshToken"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultRefreshTokenService.CreateRefreshTokenAsync(System.Security.Claims.ClaimsPrincipal,Duende.IdentityServer.Models.Token,Duende.IdentityServer.Models.Client)">
            <summary>
            Creates the refresh token.
            </summary>
            <param name="subject">The subject.</param>
            <param name="accessToken">The access token.</param>
            <param name="client">The client.</param>
            <returns>
            The refresh token handle
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultRefreshTokenService.UpdateRefreshTokenAsync(System.String,Duende.IdentityServer.Models.RefreshToken,Duende.IdentityServer.Models.Client)">
            <summary>
            Updates the refresh token.
            </summary>
            <param name="handle">The handle.</param>
            <param name="refreshToken">The refresh token.</param>
            <param name="client">The client.</param>
            <returns>
            The refresh token handle
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultReplayCache">
            <summary>
            Default implementation of the replay cache using IDistributedCache
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultReplayCache.#ctor(Microsoft.Extensions.Caching.Distributed.IDistributedCache)">
            <summary>
            ctor
            </summary>
            <param name="cache"></param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultReplayCache.AddAsync(System.String,System.String,System.DateTimeOffset)">
            <inheritdoc />
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultReplayCache.ExistsAsync(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultTokenCreationService">
            <summary>
            Default token creation service
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultTokenCreationService.Keys">
            <summary>
            The key service
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultTokenCreationService.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultTokenCreationService.Clock">
            <summary>
             The clock
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultTokenCreationService.Options">
            <summary>
            The options
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultTokenCreationService.#ctor(Microsoft.AspNetCore.Authentication.ISystemClock,Duende.IdentityServer.Services.IKeyMaterialService,Duende.IdentityServer.Configuration.IdentityServerOptions,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.DefaultTokenCreationService})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.DefaultTokenCreationService"/> class.
            </summary>
            <param name="clock">The options.</param>
            <param name="keys">The keys.</param>
            <param name="options">The options.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultTokenCreationService.CreateTokenAsync(Duende.IdentityServer.Models.Token)">
            <summary>
            Creates the token.
            </summary>
            <param name="token">The token.</param>
            <returns>
            A protected and serialized security token
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultTokenCreationService.CreatePayloadAsync(Duende.IdentityServer.Models.Token)">
            <summary>
            Creates the JWT payload
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultTokenCreationService.CreateHeaderElementsAsync(Duende.IdentityServer.Models.Token)">
            <summary>
            Creates additional JWT header elements
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultTokenCreationService.CreateJwtAsync(Duende.IdentityServer.Models.Token,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates JWT token
            </summary>
            <param name="token"></param>
            <param name="payload"></param>
            <param name="headerElements"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultTokenService">
            <summary>
            Default token service
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultTokenService.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultTokenService.ContextAccessor">
            <summary>
            The HTTP context accessor
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultTokenService.ClaimsProvider">
            <summary>
            The claims provider
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultTokenService.ReferenceTokenStore">
            <summary>
            The reference token store
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultTokenService.CreationService">
            <summary>
            The signing service
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultTokenService.Clock">
            <summary>
            The clock
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultTokenService.KeyMaterialService">
            <summary>
            The key material service
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultTokenService.Options">
            <summary>
            The IdentityServer options
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultTokenService.#ctor(Duende.IdentityServer.Services.IClaimsService,Duende.IdentityServer.Stores.IReferenceTokenStore,Duende.IdentityServer.Services.ITokenCreationService,Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.AspNetCore.Authentication.ISystemClock,Duende.IdentityServer.Services.IKeyMaterialService,Duende.IdentityServer.Configuration.IdentityServerOptions,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.DefaultTokenService})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.DefaultTokenService" /> class.
            </summary>
            <param name="claimsProvider">The claims provider.</param>
            <param name="referenceTokenStore">The reference token store.</param>
            <param name="creationService">The signing service.</param>
            <param name="contextAccessor">The HTTP context accessor.</param>
            <param name="clock">The clock.</param>
            <param name="keyMaterialService"></param>
            <param name="options">The IdentityServer options</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultTokenService.CreateIdentityTokenAsync(Duende.IdentityServer.Models.TokenCreationRequest)">
            <summary>
            Creates an identity token.
            </summary>
            <param name="request">The token creation request.</param>
            <returns>
            An identity token
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultTokenService.CreateAccessTokenAsync(Duende.IdentityServer.Models.TokenCreationRequest)">
            <summary>
            Creates an access token.
            </summary>
            <param name="request">The token creation request.</param>
            <returns>
            An access token
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultTokenService.CreateSecurityTokenAsync(Duende.IdentityServer.Models.Token)">
            <summary>
            Creates a serialized and protected security token.
            </summary>
            <param name="token">The token.</param>
            <returns>
            A security token in serialized form
            </returns>
            <exception cref="T:System.InvalidOperationException">Invalid token type.</exception>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultUserCodeService">
            <summary>
            Default user code service implementation.
            </summary>
            <seealso cref="T:Duende.IdentityServer.Services.IUserCodeService" />
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultUserCodeService.#ctor(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Services.IUserCodeGenerator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.DefaultUserCodeService"/> class.
            </summary>
            <param name="generators">The generators.</param>
            <exception cref="T:System.ArgumentNullException">generators</exception>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultUserCodeService.GetGenerator(System.String)">
            <summary>
            Gets the user code generator.
            </summary>
            <param name="userCodeType">Type of user code.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.DefaultUserSession">
            <summary>
            Cookie-based session implementation
            </summary>
            <seealso cref="T:Duende.IdentityServer.Services.IUserSession" />
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultUserSession.HttpContextAccessor">
            <summary>
            The HTTP context accessor
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultUserSession.Handlers">
            <summary>
            The handlers
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultUserSession.Options">
            <summary>
            The options
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultUserSession.Clock">
            <summary>
            The clock
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultUserSession.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultUserSession.HttpContext">
            <summary>
            Gets the HTTP context.
            </summary>
            <value>
            The HTTP context.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultUserSession.CheckSessionCookieName">
            <summary>
            Gets the name of the check session cookie.
            </summary>
            <value>
            The name of the check session cookie.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultUserSession.CheckSessionCookieDomain">
            <summary>
            Gets the domain of the check session cookie.
            </summary>
            <value>
            The domain of the check session cookie.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Services.DefaultUserSession.CheckSessionCookieSameSiteMode">
            <summary>
            Gets the SameSite mode of the check session cookie.
            </summary>
            <value>
            The SameSite mode of the check session cookie.
            </value>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultUserSession.Principal">
            <summary>
            The principal
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.DefaultUserSession.Properties">
            <summary>
            The properties
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultUserSession.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.AspNetCore.Authentication.IAuthenticationHandlerProvider,Duende.IdentityServer.Configuration.IdentityServerOptions,Microsoft.AspNetCore.Authentication.ISystemClock,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.IUserSession})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.DefaultUserSession"/> class.
            </summary>
            <param name="httpContextAccessor">The HTTP context accessor.</param>
            <param name="handlers">The handlers.</param>
            <param name="options">The options.</param>
            <param name="clock">The clock.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultUserSession.AuthenticateAsync">
            <summary>
            Authenticates the authentication cookie for the current HTTP request and caches the user and properties results.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultUserSession.CreateSessionIdAsync(System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authentication.AuthenticationProperties)">
            <summary>
            Creates a session identifier for the signin context and issues the session id cookie.
            </summary>
            <param name="principal"></param>
            <param name="properties"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            principal
            or
            properties
            </exception>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultUserSession.GetUserAsync">
            <summary>
            Gets the current authenticated user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultUserSession.GetSessionIdAsync">
            <summary>
            Gets the current session identifier.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultUserSession.EnsureSessionIdCookieAsync">
            <summary>
            Ensures the session identifier cookie asynchronous.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultUserSession.RemoveSessionIdCookieAsync">
            <summary>
            Removes the session identifier cookie.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultUserSession.CreateSessionIdCookieOptions">
            <summary>
            Creates the options for the session cookie.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultUserSession.IssueSessionIdCookie(System.String)">
            <summary>
            Issues the cookie that contains the session id.
            </summary>
            <param name="sid"></param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultUserSession.AddClientIdAsync(System.String)">
            <summary>
            Adds a client to the list of clients the user has signed into during their session.
            </summary>
            <param name="clientId">The client identifier.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">clientId</exception>
        </member>
        <member name="M:Duende.IdentityServer.Services.DefaultUserSession.GetClientListAsync">
            <summary>
            Gets the list of clients the user has signed into during their session.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.DistributedDeviceFlowThrottlingService">
            <summary>
            The default device flow throttling service using IDistributedCache.
            </summary>
            <seealso cref="T:Duende.IdentityServer.Services.IDeviceFlowThrottlingService" />
        </member>
        <member name="M:Duende.IdentityServer.Services.DistributedDeviceFlowThrottlingService.#ctor(Microsoft.Extensions.Caching.Distributed.IDistributedCache,Microsoft.AspNetCore.Authentication.ISystemClock,Duende.IdentityServer.Configuration.IdentityServerOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.DistributedDeviceFlowThrottlingService"/> class.
            </summary>
            <param name="cache">The cache.</param>
            <param name="clock">The clock.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.DistributedDeviceFlowThrottlingService.ShouldSlowDown(System.String,Duende.IdentityServer.Models.DeviceCode)">
            <summary>
            Decides if the requesting client and device code needs to slow down.
            </summary>
            <param name="deviceCode">The device code.</param>
            <param name="details">The device code details.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">deviceCode</exception>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.IAutomaticKeyManagerKeyStore">
            <summary>
            Store abstraction for automatic key management.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.NopAutomaticKeyManagerKeyStore">
            <summary>
            Empty implementation of IAutomaticKeyManagerKeyStore (for testing).
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.NopAutomaticKeyManagerKeyStore.GetSigningCredentialsAsync">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.NopAutomaticKeyManagerKeyStore.GetValidationKeysAsync">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.AutomaticKeyManagerKeyStore">
            <summary>
            Implementation of IValidationKeysStore and ISigningCredentialStore based on KeyManager.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.AutomaticKeyManagerKeyStore.#ctor(Duende.IdentityServer.Services.KeyManagement.IKeyManager,Duende.IdentityServer.Configuration.KeyManagementOptions)">
            <summary>
            Constructor for KeyManagerKeyStore.
            </summary>
            <param name="keyManager"></param>
            <param name="options"></param>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.AutomaticKeyManagerKeyStore.GetSigningCredentialsAsync">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.AutomaticKeyManagerKeyStore.GetValidationKeysAsync">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.ClientConfigurationValidator">
            <summary>
            Client configuration validator that ensures access token lifetimes are compatible with the key management options.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.ClientConfigurationValidator.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,Duende.IdentityServer.Configuration.KeyManagementOptions)">
            <summary>
            Ctor
            </summary>
            <param name="isOptions"></param>
            <param name="keyManagerOptions"></param>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.ClientConfigurationValidator.ValidateLifetimesAsync(Duende.IdentityServer.Validation.ClientConfigurationValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.DataProtectionKeyProtector">
            <summary>
            Implementation of IKeyProtector based on ASP.NET Core's data protection feature.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.DataProtectionKeyProtector.#ctor(Duende.IdentityServer.Configuration.KeyManagementOptions,Microsoft.AspNetCore.DataProtection.IDataProtectionProvider)">
            <summary>
            Constructor for DataProtectionKeyProtector.
            </summary>
            <param name="options"></param>
            <param name="dataProtectionProvider"></param>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.DataProtectionKeyProtector.Protect(Duende.IdentityServer.Services.KeyManagement.RsaKeyContainer)">
            <summary>
            Protects RsaKeyContainer.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.DataProtectionKeyProtector.Unprotect(Duende.IdentityServer.Models.SerializedKey)">
            <summary>
            Unprotects RsaKeyContainer.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.DefaultKeyLock">
            <summary>
            Default implementation.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.DefaultKeyLock.LockAsync">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.DefaultKeyLock.Unlock">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.FileSystemKeyStore">
            <summary>
            Implementation of ISigningKeyStore based on file system.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.FileSystemKeyStore.#ctor(System.String,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.KeyManagement.FileSystemKeyStore})">
            <summary>
            Constructor for FileSystemKeyStore.
            </summary>
            <param name="path"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.FileSystemKeyStore.#ctor(System.IO.DirectoryInfo,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.KeyManagement.FileSystemKeyStore})">
            <summary>
            Constructor for FileSystemKeyStore.
            </summary>
            <param name="directory"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.FileSystemKeyStore.LoadKeysAsync">
            <summary>
            Returns all the keys in storage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.FileSystemKeyStore.StoreKeyAsync(Duende.IdentityServer.Models.SerializedKey)">
            <summary>
            Persists new key in storage.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.FileSystemKeyStore.DeleteKeyAsync(System.String)">
            <summary>
            Deletes key from storage.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.IKeyManager">
            <summary>
            Interface to model loading the current singing key, as well as all keys used in OIDC discovery.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.IKeyManager.GetCurrentKeyAsync">
            <summary>
            Returns the current signing key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.IKeyManager.GetAllKeysAsync">
            <summary>
            Returns all the validation keys.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.ISigningKeyProtector">
            <summary>
            Interface to model protecting/unprotecting RsaKeyContainer.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.ISigningKeyProtector.Protect(Duende.IdentityServer.Services.KeyManagement.RsaKeyContainer)">
            <summary>
            Protects RsaKeyContainer.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.ISigningKeyProtector.Unprotect(Duende.IdentityServer.Models.SerializedKey)">
            <summary>
            Unprotects RsaKeyContainer.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.ISigningKeyStoreCache">
            <summary>
            Interface to model caching keys loaded from key store.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.ISigningKeyStoreCache.GetKeysAsync">
            <summary>
            Returns cached keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.ISigningKeyStoreCache.StoreKeysAsync(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Services.KeyManagement.RsaKeyContainer},System.TimeSpan)">
            <summary>
            Caches keys for duration.
            </summary>
            <param name="keys"></param>
            <param name="duration"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.INewKeyLock">
            <summary>
            Interface to model locking when a new key is to be created.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.INewKeyLock.LockAsync">
            <summary>
            Locks
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.INewKeyLock.Unlock">
            <summary>
            Unlocks
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.InMemoryKeyStoreCache">
            <summary>
            In-memory implmenetaion of ISigningKeyStoreCache based on static variables. This expects to be used as a singleton.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.InMemoryKeyStoreCache.#ctor(Microsoft.AspNetCore.Authentication.ISystemClock)">
            <summary>
            Constructor for InMemoryKeyStoreCache.
            </summary>
            <param name="clock"></param>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.InMemoryKeyStoreCache.GetKeysAsync">
            <summary>
            Returns cached keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.InMemoryKeyStoreCache.StoreKeysAsync(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Services.KeyManagement.RsaKeyContainer},System.TimeSpan)">
            <summary>
            Caches keys for duration.
            </summary>
            <param name="keys"></param>
            <param name="duration"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.KeyContainer">
            <summary>
            Container class for key.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.KeyContainer.#ctor">
            <summary>
            Constructor for KeyContainer.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.KeyContainer.#ctor(System.String,System.DateTime,Duende.IdentityServer.Models.KeyType)">
            <summary>
            Constructor for RsaKeyContainer.
            </summary>
            <param name="id"></param>
            <param name="created"></param>
            <param name="keyType"></param>
        </member>
        <member name="P:Duende.IdentityServer.Services.KeyManagement.KeyContainer.Id">
            <summary>
            Key identifier.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.KeyManagement.KeyContainer.Created">
            <summary>
            Date key was created.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.KeyManagement.KeyContainer.KeyType">
            <summary>
            Key type.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.KeyContainer.ToSecurityKey">
            <summary>
            Creates AsymmetricSecurityKey.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.KeyManager">
            <summary>
            Implementation of IKeyManager that creates, stores, and rotates signing keys.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.KeyManager.#ctor(Duende.IdentityServer.Configuration.KeyManagementOptions,Duende.IdentityServer.Stores.ISigningKeyStore,Duende.IdentityServer.Services.KeyManagement.ISigningKeyStoreCache,Duende.IdentityServer.Services.KeyManagement.ISigningKeyProtector,Microsoft.AspNetCore.Authentication.ISystemClock,Duende.IdentityServer.Services.KeyManagement.INewKeyLock,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.KeyManagement.KeyManager},Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            Constructor for KeyManager
            </summary>
            <param name="options"></param>
            <param name="store"></param>
            <param name="cache"></param>
            <param name="protector"></param>
            <param name="clock"></param>
            <param name="newKeyLock"></param>
            <param name="logger"></param>
            <param name="httpContextAccessor"></param>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.KeyManager.GetCurrentKeyAsync">
            <summary>
            Returns the current signing key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.KeyManager.GetAllKeysAsync">
            <summary>
            Returns all the validation keys.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.NopKeyLock">
            <summary>
            Nop implementation.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.NopKeyLock.LockAsync">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.NopKeyLock.Unlock">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.NopKeyStoreCache">
            <summary>
            Nop implementation of ISigningKeyStoreCache that does not cache keys.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.NopKeyStoreCache.GetKeysAsync">
            <summary>
            Returns null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.NopKeyStoreCache.StoreKeysAsync(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Services.KeyManagement.RsaKeyContainer},System.TimeSpan)">
            <summary>
            Does not cache keys.
            </summary>
            <param name="keys"></param>
            <param name="duration"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.RsaKeyContainer">
            <summary>
            Container class for RsaSecurityKey.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.RsaKeyContainer.#ctor">
            <summary>
            Constructor for RsaKeyContainer.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.RsaKeyContainer.#ctor(Microsoft.IdentityModel.Tokens.RsaSecurityKey,System.DateTime)">
            <summary>
            Constructor for RsaKeyContainer.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.KeyManagement.RsaKeyContainer.Parameters">
            <summary>
            The RSAParameters.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.RsaKeyContainer.ToSecurityKey">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Services.KeyManagement.X509KeyContainer">
            <summary>
            Container class for X509 keys.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.X509KeyContainer.#ctor">
            <summary>
            Constructor for X509KeyContainer.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.X509KeyContainer.#ctor(Microsoft.IdentityModel.Tokens.RsaSecurityKey,System.DateTime,System.TimeSpan,System.String)">
            <summary>
            Constructor for RsaKeyContainer.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.KeyManagement.X509KeyContainer.CertificateRawData">
            <summary>
            The X509 certificate data.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.KeyManagement.X509KeyContainer.ToSecurityKey">
            <inheritdoc />
        </member>
        <member name="T:Duende.IdentityServer.Services.LogoutNotificationService">
            <summary>
            Default implementation of logout notification service.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.LogoutNotificationService.#ctor(Duende.IdentityServer.Stores.IClientStore,Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.LogoutNotificationService})">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.LogoutNotificationService.GetFrontChannelLogoutNotificationsUrlsAsync(Duende.IdentityServer.Models.LogoutNotificationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Services.LogoutNotificationService.GetBackChannelLogoutNotificationsAsync(Duende.IdentityServer.Models.LogoutNotificationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Services.NumericUserCodeGenerator">
            <summary>
            User code generator using 9 digit number
            </summary>
            <seealso cref="T:Duende.IdentityServer.Services.IUserCodeGenerator" />
        </member>
        <member name="P:Duende.IdentityServer.Services.NumericUserCodeGenerator.UserCodeType">
            <summary>
            Gets the type of the user code.
            </summary>
            <value>
            The type of the user code.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Services.NumericUserCodeGenerator.RetryLimit">
            <summary>
            Gets the retry limit.
            </summary>
            <value>
            The retry limit for getting a unique value.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Services.NumericUserCodeGenerator.GenerateAsync">
            <summary>
            Generates the user code.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.ReturnUrlParser">
            <summary>
            Parses a return URL using all registered URL parsers
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.ReturnUrlParser.#ctor(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Services.IReturnUrlParser})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.ReturnUrlParser"/> class.
            </summary>
            <param name="parsers">The parsers.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.ReturnUrlParser.ParseAsync(System.String)">
            <summary>
            Parses the return URL.
            </summary>
            <param name="returnUrl">The return URL.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.ReturnUrlParser.IsValidReturnUrl(System.String)">
            <summary>
            Determines whether a return URL is valid.
            </summary>
            <param name="returnUrl">The return URL.</param>
            <returns>
              <c>true</c> if the return URL is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IBackChannelLogoutHttpClient">
            <summary>
            Models making HTTP requests for back-channel logout notification.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IBackChannelLogoutHttpClient.PostAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Performs HTTP POST.
            </summary>
            <param name="url"></param>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IBackChannelLogoutService">
            <summary>
            The service responsible for performing back-channel logout notification.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IBackChannelLogoutService.SendLogoutNotificationsAsync(Duende.IdentityServer.Models.LogoutNotificationContext)">
            <summary>
            Performs http back-channel logout notification.
            </summary>
            <param name="context">The context of the back channel logout notification.</param>
        </member>
        <member name="T:Duende.IdentityServer.Services.ICache`1">
            <summary>
            Abstract interface to model data caching
            </summary>
            <typeparam name="T">The data type to be cached</typeparam>
        </member>
        <member name="M:Duende.IdentityServer.Services.ICache`1.GetAsync(System.String)">
            <summary>
            Gets the cached data based upon a key index.
            </summary>
            <param name="key">The key.</param>
            <returns>The cached item, or <c>null</c> if no item matches the key.</returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.ICache`1.SetAsync(System.String,`0,System.TimeSpan)">
            <summary>
            Caches the data based upon a key
            </summary>
            <param name="key">The key.</param>
            <param name="item">The item.</param>
            <param name="expiration">The expiration.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IClaimsService">
            <summary>
            The claims service is responsible for determining which claims to include in tokens
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IClaimsService.GetIdentityTokenClaimsAsync(System.Security.Claims.ClaimsPrincipal,Duende.IdentityServer.Validation.ResourceValidationResult,System.Boolean,Duende.IdentityServer.Validation.ValidatedRequest)">
            <summary>
            Returns claims for an identity token
            </summary>
            <param name="subject">The subject</param>
            <param name="resources">The resources.</param>
            <param name="includeAllIdentityClaims">Specifies if all claims should be included in the token, or if the userinfo endpoint can be used to retrieve them</param>
            <param name="request">The raw request</param>
            <returns>
            Claims for the identity token
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IClaimsService.GetAccessTokenClaimsAsync(System.Security.Claims.ClaimsPrincipal,Duende.IdentityServer.Validation.ResourceValidationResult,Duende.IdentityServer.Validation.ValidatedRequest)">
            <summary>
            Returns claims for an access token.
            </summary>
            <param name="subject">The subject.</param>
            <param name="resources">The resources.</param>
            <param name="request">The raw request.</param>
            <returns>
            Claims for the access token
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IConsentService">
            <summary>
            Service to retrieve and update consent.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IConsentService.RequiresConsentAsync(System.Security.Claims.ClaimsPrincipal,Duende.IdentityServer.Models.Client,System.Collections.Generic.IEnumerable{Duende.IdentityServer.Validation.ParsedScopeValue})">
            <summary>
            Checks if consent is required.
            </summary>
            <param name="subject">The user.</param>
            <param name="client">The client.</param>
            <param name="parsedScopes">The parsed scopes.</param>
            <returns>
            Boolean if consent is required.
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IConsentService.UpdateConsentAsync(System.Security.Claims.ClaimsPrincipal,Duende.IdentityServer.Models.Client,System.Collections.Generic.IEnumerable{Duende.IdentityServer.Validation.ParsedScopeValue})">
            <summary>
            Updates the consent.
            </summary>
            <param name="subject">The subject.</param>
            <param name="client">The client.</param>
            <param name="parsedScopes">The parsed scopes.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IDeviceFlowCodeService">
            <summary>
            Wrapper service for IDeviceFlowStore.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IDeviceFlowCodeService.StoreDeviceAuthorizationAsync(System.String,Duende.IdentityServer.Models.DeviceCode)">
            <summary>
            Stores the device authorization request.
            </summary>
            <param name="userCode">The user code.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.IDeviceFlowCodeService.FindByUserCodeAsync(System.String)">
            <summary>
            Finds device authorization by user code.
            </summary>
            <param name="userCode">The user code.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IDeviceFlowCodeService.FindByDeviceCodeAsync(System.String)">
            <summary>
            Finds device authorization by device code.
            </summary>
            <param name="deviceCode">The device code.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.IDeviceFlowCodeService.UpdateByUserCodeAsync(System.String,Duende.IdentityServer.Models.DeviceCode)">
            <summary>
            Updates device authorization, searching by user code.
            </summary>
            <param name="userCode">The user code.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.IDeviceFlowCodeService.RemoveByDeviceCodeAsync(System.String)">
            <summary>
            Removes the device authorization, searching by device code.
            </summary>
            <param name="deviceCode">The device code.</param>
        </member>
        <member name="T:Duende.IdentityServer.Services.IDeviceFlowInteractionService">
            <summary>
             Provide services be used by the user interface to communicate with IdentityServer.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IDeviceFlowInteractionService.GetAuthorizationContextAsync(System.String)">
            <summary>
            Gets the authorization context asynchronous.
            </summary>
            <param name="userCode">The user code.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IDeviceFlowInteractionService.HandleRequestAsync(System.String,Duende.IdentityServer.Models.ConsentResponse)">
            <summary>
            Handles the request asynchronous.
            </summary>
            <param name="userCode">The user code.</param>
            <param name="consent">The consent.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IDeviceFlowThrottlingService">
            <summary>
            The device flow throttling service.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IDeviceFlowThrottlingService.ShouldSlowDown(System.String,Duende.IdentityServer.Models.DeviceCode)">
            <summary>
            Decides if the requesting client and device code needs to slow down.
            </summary>
            <param name="deviceCode">The device code.</param>
            <param name="details">The device code details.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IEventService">
            <summary>
            Interface for the event service
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IEventService.RaiseAsync(Duende.IdentityServer.Events.Event)">
            <summary>
            Raises the specified event.
            </summary>
            <param name="evt">The event.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.IEventService.CanRaiseEventType(Duende.IdentityServer.Events.EventTypes)">
            <summary>
            Indicates if the type of event will be persisted.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Services.IEventSink">
            <summary>
            Models persistence of events
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IEventSink.PersistAsync(Duende.IdentityServer.Events.Event)">
            <summary>
            Raises the specified event.
            </summary>
            <param name="evt">The event.</param>
        </member>
        <member name="T:Duende.IdentityServer.Services.IHandleGenerationService">
            <summary>
            Interface for the handle generation service
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IHandleGenerationService.GenerateAsync(System.Int32)">
            <summary>
            Generates a handle.
            </summary>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IIdentityServerInteractionService">
            <summary>
             Provide services be used by the user interface to communicate with IdentityServer.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IIdentityServerInteractionService.GetAuthorizationContextAsync(System.String)">
            <summary>
            Gets the authorization context.
            </summary>
            <param name="returnUrl">The return URL.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.IIdentityServerInteractionService.IsValidReturnUrl(System.String)">
            <summary>
            Indicates if the returnUrl is a valid URL for redirect after login or consent.
            </summary>
            <param name="returnUrl">The return URL.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.IIdentityServerInteractionService.GetErrorContextAsync(System.String)">
            <summary>
            Gets the error context.
            </summary>
            <param name="errorId">The error identifier.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.IIdentityServerInteractionService.GetLogoutContextAsync(System.String)">
            <summary>
            Gets the logout context.
            </summary>
            <param name="logoutId">The logout identifier.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.IIdentityServerInteractionService.CreateLogoutContextAsync">
            <summary>
            Used to create a logoutId if there is not one presently.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IIdentityServerInteractionService.GrantConsentAsync(Duende.IdentityServer.Models.AuthorizationRequest,Duende.IdentityServer.Models.ConsentResponse,System.String)">
            <summary>
            Informs IdentityServer of the user's consent.
            </summary>
            <param name="request">The request.</param>
            <param name="consent">The consent.</param>
            <param name="subject">The subject.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.IIdentityServerInteractionService.DenyAuthorizationAsync(Duende.IdentityServer.Models.AuthorizationRequest,Duende.IdentityServer.Models.AuthorizationError,System.String)">
            <summary>
            Triggers error back to the client for the authorization request.
            This API is a simpler helper on top of GrantConsentAsync.
            </summary>
            <param name="request">The request.</param>
            <param name="error"></param>
            <param name="errorDescription"></param>
        </member>
        <member name="M:Duende.IdentityServer.Services.IIdentityServerInteractionService.GetAllUserGrantsAsync">
            <summary>
            Returns a collection representing all of the user's consents and grants.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IIdentityServerInteractionService.RevokeUserConsentAsync(System.String)">
            <summary>
            Revokes all a user's consents and grants for a client.
            </summary>
            <param name="clientId">The client identifier.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.IIdentityServerInteractionService.RevokeTokensForCurrentSessionAsync">
            <summary>
            Revokes all of a user's consents and grants for clients the user has signed into during their current session.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Services.IJwtRequestUriHttpClient">
            <summary>
            Models making HTTP requests for JWTs from the authorize endpoint.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IJwtRequestUriHttpClient.GetJwtAsync(System.String,Duende.IdentityServer.Models.Client)">
            <summary>
            Gets a JWT from the url.
            </summary>
            <param name="url"></param>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IKeyMaterialService">
            <summary>
            Interface for the key material service
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IKeyMaterialService.GetValidationKeysAsync">
            <summary>
            Gets all validation keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IKeyMaterialService.GetSigningCredentialsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the signing credentials.
            </summary>
            <param name="allowedAlgorithms">Collection of algorithms used to filter the server supported algorithms. 
            A value of null or empty indicates that the server default should be returned.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IKeyMaterialService.GetAllSigningCredentialsAsync">
            <summary>
            Gets all signing credentials.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.ILogoutNotificationService">
            <summary>
            Provides features for OIDC signout notifications.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.ILogoutNotificationService.GetFrontChannelLogoutNotificationsUrlsAsync(Duende.IdentityServer.Models.LogoutNotificationContext)">
            <summary>
            Builds the URLs needed for front-channel logout notification.
            </summary>
            <param name="context">The context for the logout notification.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.ILogoutNotificationService.GetBackChannelLogoutNotificationsAsync(Duende.IdentityServer.Models.LogoutNotificationContext)">
            <summary>
            Builds the http back-channel logout request data for the collection of clients.
            </summary>
            <param name="context">The context for the logout notification.</param>
        </member>
        <member name="T:Duende.IdentityServer.Services.BackChannelLogoutRequest">
            <summary>
            Information necessary to make a back-channel logout request to a client.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.BackChannelLogoutRequest.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.BackChannelLogoutRequest.SubjectId">
            <summary>
            Gets the subject identifier.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.BackChannelLogoutRequest.SessionId">
            <summary>
            Gets or sets the session identifier.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.BackChannelLogoutRequest.LogoutUri">
            <summary>
            Gets or sets the back channel logout URI.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.BackChannelLogoutRequest.SessionIdRequired">
            <summary>
            Gets a value indicating whether the session identifier is required.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Services.InMemoryCorsPolicyService">
            <summary>
            CORS policy service that configures the allowed origins from a list of clients' redirect URLs.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.InMemoryCorsPolicyService.Logger">
            <summary>
            Logger
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Services.InMemoryCorsPolicyService.Clients">
            <summary>
            Clients applications list
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.InMemoryCorsPolicyService.#ctor(Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Services.InMemoryCorsPolicyService},System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.Client})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Services.InMemoryCorsPolicyService"/> class.
            </summary>
            <param name="logger">The logger</param>
            <param name="clients">The clients.</param>
        </member>
        <member name="M:Duende.IdentityServer.Services.InMemoryCorsPolicyService.IsOriginAllowedAsync(System.String)">
            <summary>
            Determines whether origin is allowed.
            </summary>
            <param name="origin">The origin.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IPersistedGrantService">
            <summary>
            Implements persisted grant logic
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IPersistedGrantService.GetAllGrantsAsync(System.String)">
            <summary>
            Gets all grants for a given subject ID.
            </summary>
            <param name="subjectId">The subject identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IPersistedGrantService.RemoveAllGrantsAsync(System.String,System.String,System.String)">
            <summary>
            Removes all grants for a given subject id, and optionally client id and session id combination.
            </summary>
            <param name="subjectId">The subject identifier.</param>
            <param name="clientId">The client identifier (optional).</param>
            <param name="sessionId">The sesion id (optional).</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IProfileService">
            <summary>
            This interface allows IdentityServer to connect to your user and profile store.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IProfileService.GetProfileDataAsync(Duende.IdentityServer.Models.ProfileDataRequestContext)">
            <summary>
            This method is called whenever claims about the user are requested (e.g. during token creation or via the userinfo endpoint)
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IProfileService.IsActiveAsync(Duende.IdentityServer.Models.IsActiveContext)">
            <summary>
            This method gets called whenever identity server needs to determine if the user is valid or active (e.g. if the user's account has been deactivated since they logged in).
            (e.g. during token issuance or validation).
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IRefreshTokenService">
            <summary>
            Implements refresh token creation and validation
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IRefreshTokenService.ValidateRefreshTokenAsync(System.String,Duende.IdentityServer.Models.Client)">
            <summary>
            Validates a refresh token.
            </summary>
            <param name="token">The refresh token.</param>
            <param name="client">The client.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IRefreshTokenService.CreateRefreshTokenAsync(System.Security.Claims.ClaimsPrincipal,Duende.IdentityServer.Models.Token,Duende.IdentityServer.Models.Client)">
            <summary>
            Creates the refresh token.
            </summary>
            <param name="subject">The subject.</param>
            <param name="accessToken">The access token.</param>
            <param name="client">The client.</param>
            <returns>
            The refresh token handle
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IRefreshTokenService.UpdateRefreshTokenAsync(System.String,Duende.IdentityServer.Models.RefreshToken,Duende.IdentityServer.Models.Client)">
            <summary>
            Updates the refresh token.
            </summary>
            <param name="handle">The handle.</param>
            <param name="refreshToken">The refresh token.</param>
            <param name="client">The client.</param>
            <returns>
            The refresh token handle
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IReplayCache">
            <summary>
            Interface for replay cache implementations
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IReplayCache.AddAsync(System.String,System.String,System.DateTimeOffset)">
            <summary>
            Adds a handle to the cache 
            </summary>
            <param name="purpose"></param>
            <param name="handle"></param>
            <param name="expiration"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IReplayCache.ExistsAsync(System.String,System.String)">
            <summary>
            Checks if a cached handle exists 
            </summary>
            <param name="purpose"></param>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IReturnUrlParser">
            <summary>
            Interface for the return URL parser
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IReturnUrlParser.ParseAsync(System.String)">
            <summary>
            Parses a return URL.
            </summary>
            <param name="returnUrl">The return URL.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IReturnUrlParser.IsValidReturnUrl(System.String)">
            <summary>
            Determines whether the return URL is valid.
            </summary>
            <param name="returnUrl">The return URL.</param>
            <returns>
              <c>true</c> if the return URL is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.ITokenCreationService">
            <summary>
            Logic for creating security tokens
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.ITokenCreationService.CreateTokenAsync(Duende.IdentityServer.Models.Token)">
            <summary>
            Creates a token.
            </summary>
            <param name="token">The token description.</param>
            <returns>A protected and serialized security token</returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.ITokenService">
            <summary>
            Logic for creating security tokens
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.ITokenService.CreateIdentityTokenAsync(Duende.IdentityServer.Models.TokenCreationRequest)">
            <summary>
            Creates an identity token.
            </summary>
            <param name="request">The token creation request.</param>
            <returns>An identity token</returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.ITokenService.CreateAccessTokenAsync(Duende.IdentityServer.Models.TokenCreationRequest)">
            <summary>
            Creates an access token.
            </summary>
            <param name="request">The token creation request.</param>
            <returns>An access token</returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.ITokenService.CreateSecurityTokenAsync(Duende.IdentityServer.Models.Token)">
            <summary>
            Creates a serialized and protected security token.
            </summary>
            <param name="token">The token.</param>
            <returns>A security token in serialized form</returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IUserCodeGenerator">
            <summary>
            Implements device flow user code generation
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Services.IUserCodeGenerator.UserCodeType">
            <summary>
            Gets the type of the user code.
            </summary>
            <value>
            The type of the user code.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Services.IUserCodeGenerator.RetryLimit">
            <summary>
            Gets the retry limit.
            </summary>
            <value>
            The retry limit for getting a unique value.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Services.IUserCodeGenerator.GenerateAsync">
            <summary>
            Generates the user code.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IUserCodeService">
            <summary>
            Implements user code generation
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IUserCodeService.GetGenerator(System.String)">
            <summary>
            Gets the user code generator.
            </summary>
            <param name="userCodeType">Type of user code.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Services.IUserSession">
            <summary>
            Models a user's authentication session
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IUserSession.CreateSessionIdAsync(System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authentication.AuthenticationProperties)">
            <summary>
            Creates a session identifier for the signin context and issues the session id cookie.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IUserSession.GetUserAsync">
            <summary>
            Gets the current authenticated user.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IUserSession.GetSessionIdAsync">
            <summary>
            Gets the current session identifier.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IUserSession.EnsureSessionIdCookieAsync">
            <summary>
            Ensures the session identifier cookie asynchronous.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IUserSession.RemoveSessionIdCookieAsync">
            <summary>
            Removes the session identifier cookie.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Services.IUserSession.AddClientIdAsync(System.String)">
            <summary>
            Adds a client to the list of clients the user has signed into during their session.
            </summary>
            <param name="clientId">The client identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Services.IUserSession.GetClientListAsync">
            <summary>
            Gets the list of clients the user has signed into during their session.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ClientConfigurationValidationContext">
            <summary>
            Context for client configuration validation.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ClientConfigurationValidationContext.Client">
            <summary>
            Gets or sets the client.
            </summary>
            <value>
            The client.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ClientConfigurationValidationContext.IsValid">
            <summary>
            Returns true if client configuration is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ClientConfigurationValidationContext.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>
            The error message.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ClientConfigurationValidationContext.#ctor(Duende.IdentityServer.Models.Client)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.ClientConfigurationValidationContext"/> class.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ClientConfigurationValidationContext.SetError(System.String)">
            <summary>
            Sets a validation error.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Duende.IdentityServer.Validation.CustomAuthorizeRequestValidationContext">
            <summary>
            Context for custom authorize request validation.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.CustomAuthorizeRequestValidationContext.Result">
            <summary>
            The result of custom validation. 
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.CustomTokenRequestValidationContext">
            <summary>
            Context class for custom token request validation
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.CustomTokenRequestValidationContext.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ExtensionGrantValidationContext">
            <summary>
            Class describing the extension grant validation context
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ExtensionGrantValidationContext.Request">
            <summary>
            Gets or sets the request.
            </summary>
            <value>
            The request.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ExtensionGrantValidationContext.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ResourceOwnerPasswordValidationContext">
            <summary>
            Class describing the resource owner password validation context
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ResourceOwnerPasswordValidationContext.UserName">
            <summary>
            Gets or sets the name of the user.
            </summary>
            <value>
            The name of the user.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ResourceOwnerPasswordValidationContext.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ResourceOwnerPasswordValidationContext.Request">
            <summary>
            Gets or sets the request.
            </summary>
            <value>
            The request.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ResourceOwnerPasswordValidationContext.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ResourceValidationContext">
            <summary>
            Class describing the resource validation context
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ResourceValidationContext.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ApiSecretValidator">
            <summary>
            Validates API secrets using the registered secret validators and parsers
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ApiSecretValidator.#ctor(Duende.IdentityServer.Stores.IResourceStore,Duende.IdentityServer.Validation.ISecretsListParser,Duende.IdentityServer.Validation.ISecretsListValidator,Duende.IdentityServer.Services.IEventService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.ApiSecretValidator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.ApiSecretValidator"/> class.
            </summary>
            <param name="resources">The resources.</param>
            <param name="parsers">The parsers.</param>
            <param name="validator">The validator.</param>
            <param name="events">The events.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ApiSecretValidator.ValidateAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Validates the secret on the current request.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.BasicAuthenticationSecretParser">
            <summary>
            Parses a Basic Authentication header
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.BasicAuthenticationSecretParser.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.BasicAuthenticationSecretParser})">
            <summary>
            Creates the parser with a reference to identity server options
            </summary>
            <param name="options">IdentityServer options</param>
            <param name="logger">The logger</param>
        </member>
        <member name="P:Duende.IdentityServer.Validation.BasicAuthenticationSecretParser.AuthenticationMethod">
            <summary>
            Returns the authentication method name that this parser implements
            </summary>
            <value>
            The authentication method.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Validation.BasicAuthenticationSecretParser.ParseAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Tries to find a secret that can be used for authentication
            </summary>
            <returns>
            A parsed secret
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.BearerTokenUsageValidator">
            <summary>
            Validates a request that uses a bearer token for authentication
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.BearerTokenUsageValidator.#ctor(Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.BearerTokenUsageValidator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.BearerTokenUsageValidator"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.BearerTokenUsageValidator.ValidateAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Validates the request.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.BearerTokenUsageValidator.ValidateAuthorizationHeader(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Validates the authorization header.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.BearerTokenUsageValidator.ValidatePostBodyAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Validates the post body.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ClientSecretValidator">
            <summary>
            Validates a client secret using the registered secret validators and parsers
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ClientSecretValidator.#ctor(Duende.IdentityServer.Stores.IClientStore,Duende.IdentityServer.Validation.ISecretsListParser,Duende.IdentityServer.Validation.ISecretsListValidator,Duende.IdentityServer.Services.IEventService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.ClientSecretValidator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.ClientSecretValidator"/> class.
            </summary>
            <param name="clients">The clients.</param>
            <param name="parser">The parser.</param>
            <param name="validator">The validator.</param>
            <param name="events">The events.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ClientSecretValidator.ValidateAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Validates the current request.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.DefaultClientConfigurationValidator">
            <summary>
            Default client configuration validator
            </summary>
            <seealso cref="T:Duende.IdentityServer.Validation.IClientConfigurationValidator" />
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultClientConfigurationValidator.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions)">
            <summary>
            Constructor for DefaultClientConfigurationValidator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultClientConfigurationValidator.ValidateAsync(Duende.IdentityServer.Validation.ClientConfigurationValidationContext)">
            <summary>
            Determines whether the configuration of a client is valid.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultClientConfigurationValidator.ValidateGrantTypesAsync(Duende.IdentityServer.Validation.ClientConfigurationValidationContext)">
            <summary>
            Validates grant type related configuration settings.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultClientConfigurationValidator.ValidateLifetimesAsync(Duende.IdentityServer.Validation.ClientConfigurationValidationContext)">
            <summary>
            Validates lifetime related configuration settings.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultClientConfigurationValidator.ValidateRedirectUriAsync(Duende.IdentityServer.Validation.ClientConfigurationValidationContext)">
            <summary>
            Validates redirect URI related configuration.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultClientConfigurationValidator.ValidateAllowedCorsOriginsAsync(Duende.IdentityServer.Validation.ClientConfigurationValidationContext)">
            <summary>
            Validates allowed CORS origins for valid format.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultClientConfigurationValidator.ValidateUriSchemesAsync(Duende.IdentityServer.Validation.ClientConfigurationValidationContext)">
            <summary>
            Validates that URI schemes is not in the list of invalid URI scheme prefixes, as controlled by the ValidationOptions.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultClientConfigurationValidator.ValidateSecretsAsync(Duende.IdentityServer.Validation.ClientConfigurationValidationContext)">
            <summary>
            Validates secret related configuration.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultClientConfigurationValidator.ValidatePropertiesAsync(Duende.IdentityServer.Validation.ClientConfigurationValidationContext)">
            <summary>
            Validates properties related configuration settings.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.DefaultCustomAuthorizeRequestValidator">
            <summary>
            Default custom request validator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultCustomAuthorizeRequestValidator.ValidateAsync(Duende.IdentityServer.Validation.CustomAuthorizeRequestValidationContext)">
            <summary>
            Custom validation logic for the authorize request.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Duende.IdentityServer.Validation.DefaultCustomTokenRequestValidator">
            <summary>
            Default custom request validator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultCustomTokenRequestValidator.ValidateAsync(Duende.IdentityServer.Validation.CustomTokenRequestValidationContext)">
            <summary>
            Custom validation logic for a token request.
            </summary>
            <param name="context">The context.</param>
            <returns>
            The validation result
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.DefaultCustomTokenValidator">
            <summary>
            Default custom token validator
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.DefaultCustomTokenValidator.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.DefaultCustomTokenValidator.Profile">
            <summary>
            The user service
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.DefaultCustomTokenValidator.Clients">
            <summary>
            The client store
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultCustomTokenValidator.ValidateAccessTokenAsync(Duende.IdentityServer.Validation.TokenValidationResult)">
            <summary>
            Custom validation logic for access tokens.
            </summary>
            <param name="result">The validation result so far.</param>
            <returns>
            The validation result
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultCustomTokenValidator.ValidateIdentityTokenAsync(Duende.IdentityServer.Validation.TokenValidationResult)">
            <summary>
            Custom validation logic for identity tokens.
            </summary>
            <param name="result">The validation result so far.</param>
            <returns>
            The validation result
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.DefaultResourceValidator">
            <summary>
            Default implementation of IResourceValidator.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultResourceValidator.#ctor(Duende.IdentityServer.Stores.IResourceStore,Duende.IdentityServer.Validation.IScopeParser,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.DefaultResourceValidator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.DefaultResourceValidator"/> class.
            </summary>
            <param name="store">The store.</param>
            <param name="scopeParser"></param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultResourceValidator.ValidateRequestedResourcesAsync(Duende.IdentityServer.Validation.ResourceValidationRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultResourceValidator.ValidateScopeAsync(Duende.IdentityServer.Models.Client,Duende.IdentityServer.Models.Resources,Duende.IdentityServer.Validation.ParsedScopeValue,Duende.IdentityServer.Validation.ResourceValidationResult)">
            <summary>
            Validates that the requested scopes is contained in the store, and the client is allowed to request it.
            </summary>
            <param name="client"></param>
            <param name="resourcesFromStore"></param>
            <param name="requestedScope"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultResourceValidator.IsClientAllowedIdentityResourceAsync(Duende.IdentityServer.Models.Client,Duende.IdentityServer.Models.IdentityResource)">
            <summary>
            Determines if client is allowed access to the identity scope.
            </summary>
            <param name="client"></param>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultResourceValidator.IsClientAllowedApiScopeAsync(Duende.IdentityServer.Models.Client,Duende.IdentityServer.Models.ApiScope)">
            <summary>
            Determines if client is allowed access to the API scope.
            </summary>
            <param name="client"></param>
            <param name="apiScope"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultResourceValidator.IsClientAllowedOfflineAccessAsync(Duende.IdentityServer.Models.Client)">
            <summary>
            Validates if the client is allowed offline_access.
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.DefaultScopeParser">
            <summary>
            Default implementation of IScopeParser.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultScopeParser.#ctor(Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.DefaultScopeParser})">
            <summary>
            Ctor.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultScopeParser.ParseScopeValues(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultScopeParser.ParseScopeValue(Duende.IdentityServer.Validation.DefaultScopeParser.ParseScopeContext)">
            <summary>
            Parses a scope value.
            </summary>
            <param name="scopeContext"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.DefaultScopeParser.ParseScopeContext">
            <summary>
            Models the context for parsing a scope.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DefaultScopeParser.ParseScopeContext.RawValue">
            <summary>
            The original (raw) value of the scope.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DefaultScopeParser.ParseScopeContext.ParsedName">
            <summary>
            The parsed name of the scope. 
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DefaultScopeParser.ParseScopeContext.ParsedParameter">
            <summary>
            The parsed parameter value of the scope. 
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DefaultScopeParser.ParseScopeContext.Error">
            <summary>
            The error encountered parsing the scope.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DefaultScopeParser.ParseScopeContext.Ignore">
            <summary>
            Indicates if the scope should be excluded from the parsed results.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DefaultScopeParser.ParseScopeContext.Succeeded">
            <summary>
            Indicates if parsing the scope was successful.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultScopeParser.ParseScopeContext.#ctor(System.String)">
            <summary>
            Ctor. Indicates success, but the scope should not be included in result.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultScopeParser.ParseScopeContext.SetParsedValues(System.String,System.String)">
            <summary>
            Sets the parsed name and parsed parameter value for the scope.
            </summary>
            <param name="parsedName"></param>
            <param name="parsedParameter"></param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultScopeParser.ParseScopeContext.SetError(System.String)">
            <summary>
            Set the error encountered parsing the scope.
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DefaultScopeParser.ParseScopeContext.SetIgnore">
            <summary>
            Sets that the scope is to be ignore/excluded from the parsed results.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.DeviceCodeValidator">
            <summary>
            Validates an incoming token request using the device flow
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DeviceCodeValidator.#ctor(Duende.IdentityServer.Services.IDeviceFlowCodeService,Duende.IdentityServer.Services.IProfileService,Duende.IdentityServer.Services.IDeviceFlowThrottlingService,Microsoft.AspNetCore.Authentication.ISystemClock,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.DeviceCodeValidator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.DeviceCodeValidator"/> class.
            </summary>
            <param name="devices">The devices.</param>
            <param name="profile">The profile.</param>
            <param name="throttlingService">The throttling service.</param>
            <param name="systemClock">The system clock.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DeviceCodeValidator.ValidateAsync(Duende.IdentityServer.Validation.DeviceCodeValidationContext)">
            <summary>
            Validates the device code.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.EndSessionRequestValidator">
            <summary>
            Validates requests to the end session endpoint.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.EndSessionRequestValidator.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.EndSessionRequestValidator.Options">
            <summary>
             The IdentityServer options.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.EndSessionRequestValidator.TokenValidator">
            <summary>
            The token validator.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.EndSessionRequestValidator.UriValidator">
            <summary>
            The URI validator.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.EndSessionRequestValidator.UserSession">
            <summary>
            The user session service.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.EndSessionRequestValidator.LogoutNotificationService">
            <summary>
            The logout notification service.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.EndSessionRequestValidator.EndSessionMessageStore">
            <summary>
            The end session message store.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.EndSessionRequestValidator.Context">
            <summary>
            The HTTP context accessor.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.EndSessionRequestValidator.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor,Duende.IdentityServer.Configuration.IdentityServerOptions,Duende.IdentityServer.Validation.ITokenValidator,Duende.IdentityServer.Validation.IRedirectUriValidator,Duende.IdentityServer.Services.IUserSession,Duende.IdentityServer.Services.ILogoutNotificationService,Duende.IdentityServer.Stores.IMessageStore{Duende.IdentityServer.Models.LogoutNotificationContext},Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.EndSessionRequestValidator})">
            <summary>
            Creates a new instance of the EndSessionRequestValidator.
            </summary>
            <param name="context"></param>
            <param name="options"></param>
            <param name="tokenValidator"></param>
            <param name="uriValidator"></param>
            <param name="userSession"></param>
            <param name="logoutNotificationService"></param>
            <param name="endSessionMessageStore"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.EndSessionRequestValidator.ValidateAsync(System.Collections.Specialized.NameValueCollection,System.Security.Claims.ClaimsPrincipal)">
            <inheritdoc />
        </member>
        <member name="M:Duende.IdentityServer.Validation.EndSessionRequestValidator.Invalid(System.String,Duende.IdentityServer.Validation.ValidatedEndSessionRequest)">
            <summary>
            Creates a result that indicates an error.
            </summary>
            <param name="message"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.EndSessionRequestValidator.LogSuccess(Duende.IdentityServer.Validation.ValidatedEndSessionRequest)">
            <summary>
            Logs a success result.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.EndSessionRequestValidator.ValidateCallbackAsync(System.Collections.Specialized.NameValueCollection)">
            <inheritdoc />
        </member>
        <member name="T:Duende.IdentityServer.Validation.ExtensionGrantValidator">
            <summary>
            Validates an extension grant request using the registered validators
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ExtensionGrantValidator.#ctor(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Validation.IExtensionGrantValidator},Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.ExtensionGrantValidator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.ExtensionGrantValidator"/> class.
            </summary>
            <param name="validators">The validators.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ExtensionGrantValidator.GetAvailableGrantTypes">
            <summary>
            Gets the available grant types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ExtensionGrantValidator.ValidateAsync(Duende.IdentityServer.Validation.ValidatedTokenRequest)">
            <summary>
            Validates the request.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.HashedSharedSecretValidator">
            <summary>
            Validates a shared secret stored in SHA256 or SHA512
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.HashedSharedSecretValidator.#ctor(Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.HashedSharedSecretValidator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.HashedSharedSecretValidator"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.HashedSharedSecretValidator.ValidateAsync(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.Secret},Duende.IdentityServer.Models.ParsedSecret)">
            <summary>
            Validates a secret
            </summary>
            <param name="secrets">The stored secrets.</param>
            <param name="parsedSecret">The received secret.</param>
            <returns>
            A validation result
            </returns>
            <exception cref="T:System.ArgumentNullException">Id or cedential</exception>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IntrospectionRequestValidator">
            <summary>
            The introspection request validator
            </summary>
            <seealso cref="T:Duende.IdentityServer.Validation.IIntrospectionRequestValidator" />
        </member>
        <member name="M:Duende.IdentityServer.Validation.IntrospectionRequestValidator.#ctor(Duende.IdentityServer.Validation.ITokenValidator,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.IntrospectionRequestValidator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.IntrospectionRequestValidator"/> class.
            </summary>
            <param name="tokenValidator">The token validator.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IntrospectionRequestValidator.ValidateAsync(System.Collections.Specialized.NameValueCollection,Duende.IdentityServer.Models.ApiResource)">
            <summary>
            Validates the request.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="api">The API.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.JwtBearerClientAssertionSecretParser">
            <summary>
            Parses a POST body for a JWT bearer client assertion
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.JwtBearerClientAssertionSecretParser.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.JwtBearerClientAssertionSecretParser})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.JwtBearerClientAssertionSecretParser"/> class.
            </summary>
            <param name="options">The options.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:Duende.IdentityServer.Validation.JwtBearerClientAssertionSecretParser.AuthenticationMethod">
            <summary>
            Returns the authentication method name that this parser implements
            </summary>
            <value>
            The authentication method.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Validation.JwtBearerClientAssertionSecretParser.ParseAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Tries to find a JWT client assertion token in the request body that can be used for authentication
            Used for "private_key_jwt" client authentication method as defined in http://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication
            </summary>
            <param name="context">The HTTP context</param>
            <returns>
            A parsed secret
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.JwtRequestValidator">
            <summary>
            Validates JWT authorization request objects
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.JwtRequestValidator.Handler">
            <summary>
            JWT handler
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.JwtRequestValidator.AudienceUri">
            <summary>
            The audience URI to use
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.JwtRequestValidator.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.JwtRequestValidator.Options">
            <summary>
            The optione
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.JwtRequestValidator.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor,Duende.IdentityServer.Configuration.IdentityServerOptions,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.JwtRequestValidator})">
            <summary>
            Instantiates an instance of private_key_jwt secret validator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.JwtRequestValidator.#ctor(System.String,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.JwtRequestValidator})">
            <summary>
            Instantiates an instance of private_key_jwt secret validator (used for testing)
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.JwtRequestValidator.ValidateAsync(Duende.IdentityServer.Models.Client,System.String)">
            <summary>
            Validates a JWT request object
            </summary>
            <param name="client">The client</param>
            <param name="jwtTokenString">The JWT</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.JwtRequestValidator.GetKeysAsync(Duende.IdentityServer.Models.Client)">
            <summary>
            Retrieves keys for a given client
            </summary>
            <param name="client">The client</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.JwtRequestValidator.ValidateJwtAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.IdentityModel.Tokens.SecurityKey},Duende.IdentityServer.Models.Client)">
            <summary>
            Validates the JWT token
            </summary>
            <param name="jwtTokenString">JWT as a string</param>
            <param name="keys">The keys</param>
            <param name="client">The client</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.JwtRequestValidator.ProcessPayloadAsync(System.IdentityModel.Tokens.Jwt.JwtSecurityToken)">
            <summary>
            Processes the JWT contents
            </summary>
            <param name="token">The JWT token</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.MutualTlsSecretParser">
            <summary>
            Parses secret according to MTLS spec
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.MutualTlsSecretParser.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.MutualTlsSecretParser})">
            <summary>
            ctor
            </summary>
            <param name="options"></param>
            <param name="logger"></param>
        </member>
        <member name="P:Duende.IdentityServer.Validation.MutualTlsSecretParser.AuthenticationMethod">
            <summary>
            Name of authentication method (blank to suppress in discovery since we do special handling)
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.MutualTlsSecretParser.ParseAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Parses the HTTP context
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.NopClientConfigurationValidator">
            <summary>
            No-op client configuration validator (for backwards-compatibility).
            </summary>
            <seealso cref="T:Duende.IdentityServer.Validation.IClientConfigurationValidator" />
        </member>
        <member name="M:Duende.IdentityServer.Validation.NopClientConfigurationValidator.ValidateAsync(Duende.IdentityServer.Validation.ClientConfigurationValidationContext)">
            <summary>
            Determines whether the configuration of a client is valid.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.NotSupportedResourceOwnerPasswordValidator">
            <summary>
            Default resource owner password validator (no implementation == not supported)
            </summary>
            <seealso cref="T:Duende.IdentityServer.Validation.IResourceOwnerPasswordValidator" />
        </member>
        <member name="M:Duende.IdentityServer.Validation.NotSupportedResourceOwnerPasswordValidator.#ctor(Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.NotSupportedResourceOwnerPasswordValidator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.NotSupportedResourceOwnerPasswordValidator"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.NotSupportedResourceOwnerPasswordValidator.ValidateAsync(Duende.IdentityServer.Validation.ResourceOwnerPasswordValidationContext)">
            <summary>
            Validates the resource owner password credential
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.PlainTextSharedSecretValidator">
            <summary>
            Validates a secret stored in plain text
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.PlainTextSharedSecretValidator.#ctor(Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.PlainTextSharedSecretValidator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.PlainTextSharedSecretValidator"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.PlainTextSharedSecretValidator.ValidateAsync(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.Secret},Duende.IdentityServer.Models.ParsedSecret)">
            <summary>
            Validates a secret
            </summary>
            <param name="secrets">The stored secrets.</param>
            <param name="parsedSecret">The received secret.</param>
            <returns>
            A validation result
            </returns>
            <exception cref="T:System.ArgumentException">id or credential is missing.</exception>
        </member>
        <member name="T:Duende.IdentityServer.Validation.PostBodySecretParser">
            <summary>
            Parses a POST body for secrets
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.PostBodySecretParser.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.PostBodySecretParser})">
            <summary>
            Creates the parser with options
            </summary>
            <param name="options">IdentityServer options</param>
            <param name="logger">Logger</param>
        </member>
        <member name="P:Duende.IdentityServer.Validation.PostBodySecretParser.AuthenticationMethod">
            <summary>
            Returns the authentication method name that this parser implements
            </summary>
            <value>
            The authentication method.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Validation.PostBodySecretParser.ParseAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Tries to find a secret on the context that can be used for authentication
            </summary>
            <param name="context">The HTTP context.</param>
            <returns>
            A parsed secret
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.PrivateKeyJwtSecretValidator">
            <summary>
            Validates a secret based on RS256 signed JWT token
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.PrivateKeyJwtSecretValidator.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor,Duende.IdentityServer.Services.IReplayCache,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.PrivateKeyJwtSecretValidator})">
            <summary>
            Instantiates an instance of private_key_jwt secret validator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.PrivateKeyJwtSecretValidator.ValidateAsync(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.Secret},Duende.IdentityServer.Models.ParsedSecret)">
            <summary>
            Validates a secret
            </summary>
            <param name="secrets">The stored secrets.</param>
            <param name="parsedSecret">The received secret.</param>
            <returns>
            A validation result
            </returns>
            <exception cref="T:System.ArgumentException">ParsedSecret.Credential is not a JWT token</exception>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ResponseTypeEqualityComparer">
            <summary>
            Compares resource_type strings, where the order of space-delimited values is insignificant.
            </summary>
            <remarks>
            <para>
            This is to handle the fact that the order of multi-valued response_type lists is
            insignificant, per the <see href="https://tools.ietf.org/html/rfc6749#section-3.1.1">OAuth2 spec</see>
            and the 
            (<see href="http://openid.net/specs/oauth-v2-multiple-response-types-1_0-03.html#terminology">OAuth 
            2.0 Multiple Response Type Encoding Practices draft </see>).
            </para>
            </remarks>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ResponseTypeEqualityComparer.Equals(System.String,System.String)">
            <summary>
            Determines whether the specified values are equal.
            </summary>
            <param name="x">The first string to compare.</param>
            <param name="y">The second string to compare.</param>
            <returns>true if the specified values are equal; otherwise, false.</returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ResponseTypeEqualityComparer.GetHashCode(System.String)">
            <summary>
            Returns a hash code for the value.
            </summary>
            <param name="value">The value for which a hash code is to be returned.</param>
            <returns>A hash code for the value, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.SecretParser">
            <summary>
            Uses the registered secret parsers to parse a secret on the current request
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.SecretParser.#ctor(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Validation.ISecretParser},Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.ISecretsListParser})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.SecretParser"/> class.
            </summary>
            <param name="parsers">The parsers.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.SecretParser.ParseAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Checks the context to find a secret.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.SecretParser.GetAvailableAuthenticationMethods">
            <summary>
            Gets all available authentication methods.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.SecretValidator">
            <summary>
            Validates secrets using the registered validators
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.SecretValidator.#ctor(Microsoft.AspNetCore.Authentication.ISystemClock,System.Collections.Generic.IEnumerable{Duende.IdentityServer.Validation.ISecretValidator},Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.ISecretsListValidator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.SecretValidator"/> class.
            </summary>
            <param name="clock">The clock.</param>
            <param name="validators">The validators.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.SecretValidator.ValidateAsync(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.Secret},Duende.IdentityServer.Models.ParsedSecret)">
            <summary>
            Validates the secret.
            </summary>
            <param name="parsedSecret">The parsed secret.</param>
            <param name="secrets">The secrets.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.StrictRedirectUriValidator">
            <summary>
            Default implementation of redirect URI validator. Validates the URIs against
            the client's configured URIs.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.StrictRedirectUriValidator.StringCollectionContainsString(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Checks if a given URI string is in a collection of strings (using ordinal ignore case comparison)
            </summary>
            <param name="uris">The uris.</param>
            <param name="requestedUri">The requested URI.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.StrictRedirectUriValidator.IsRedirectUriValidAsync(System.String,Duende.IdentityServer.Models.Client)">
            <summary>
            Determines whether a redirect URI is valid for a client.
            </summary>
            <param name="requestedUri">The requested URI.</param>
            <param name="client">The client.</param>
            <returns>
              <c>true</c> is the URI is valid; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.StrictRedirectUriValidator.IsPostLogoutRedirectUriValidAsync(System.String,Duende.IdentityServer.Models.Client)">
            <summary>
            Determines whether a post logout URI is valid for a client.
            </summary>
            <param name="requestedUri">The requested URI.</param>
            <param name="client">The client.</param>
            <returns>
              <c>true</c> is the URI is valid; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.StrictRedirectUriValidatorAppAuth">
            <summary>
            Implementation of strict redirect URI validator that allows a random port if 127.0.0.1 is used.
            </summary>
            <seealso cref="T:Duende.IdentityServer.Validation.StrictRedirectUriValidator" />
        </member>
        <member name="M:Duende.IdentityServer.Validation.StrictRedirectUriValidatorAppAuth.#ctor(Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.StrictRedirectUriValidatorAppAuth})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.StrictRedirectUriValidatorAppAuth"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.StrictRedirectUriValidatorAppAuth.IsRedirectUriValidAsync(System.String,Duende.IdentityServer.Models.Client)">
            <summary>
            Determines whether a redirect URI is valid for a client.
            </summary>
            <param name="requestedUri">The requested URI.</param>
            <param name="client">The client.</param>
            <returns>
            <c>true</c> is the URI is valid; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.StrictRedirectUriValidatorAppAuth.IsPostLogoutRedirectUriValidAsync(System.String,Duende.IdentityServer.Models.Client)">
            <summary>
            Determines whether a post logout URI is valid for a client.
            </summary>
            <param name="requestedUri">The requested URI.</param>
            <param name="client">The client.</param>
            <returns>
            <c>true</c> is the URI is valid; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.StrictRedirectUriValidatorAppAuth.IsLoopback(System.String)">
            <summary>
            Check if <paramref name="requestedUri"/> is of the form http://127.0.0.1:port/path.
            </summary>
            <param name="requestedUri">The requested URI.</param>
            <returns>
            <c>true</c> if <paramref name="requestedUri"/> is a valid Loopback URI; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.TokenRequestValidator.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,Duende.IdentityServer.Stores.IAuthorizationCodeStore,Duende.IdentityServer.Validation.IResourceOwnerPasswordValidator,Duende.IdentityServer.Services.IProfileService,Duende.IdentityServer.Validation.IDeviceCodeValidator,Duende.IdentityServer.Validation.ExtensionGrantValidator,Duende.IdentityServer.Validation.ICustomTokenRequestValidator,Duende.IdentityServer.Validation.IResourceValidator,Duende.IdentityServer.Stores.IResourceStore,Duende.IdentityServer.Validation.ITokenValidator,Duende.IdentityServer.Services.IRefreshTokenService,Duende.IdentityServer.Services.IEventService,Microsoft.AspNetCore.Authentication.ISystemClock,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.TokenRequestValidator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.TokenRequestValidator" /> class.
            </summary>
            <param name="options">The options.</param>
            <param name="authorizationCodeStore">The authorization code store.</param>
            <param name="resourceOwnerValidator">The resource owner validator.</param>
            <param name="profile">The profile.</param>
            <param name="deviceCodeValidator">The device code validator.</param>
            <param name="extensionGrantValidator">The extension grant validator.</param>
            <param name="customRequestValidator">The custom request validator.</param>
            <param name="resourceValidator">The resource validator.</param>
            <param name="resourceStore">The resource store.</param>
            <param name="tokenValidator">The token validator.</param>
            <param name="refreshTokenService"></param>
            <param name="events">The events.</param>
            <param name="clock">The clock.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.TokenRequestValidator.ValidateRequestAsync(System.Collections.Specialized.NameValueCollection,Duende.IdentityServer.Validation.ClientSecretValidationResult)">
            <summary>
            Validates the request.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="clientValidationResult">The client validation result.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            parameters
            or
            client
            </exception>
        </member>
        <member name="T:Duende.IdentityServer.Validation.TokenRevocationRequestValidator">
            <summary>
            The token revocation request validator
            </summary>
            <seealso cref="T:Duende.IdentityServer.Validation.ITokenRevocationRequestValidator" />
        </member>
        <member name="M:Duende.IdentityServer.Validation.TokenRevocationRequestValidator.#ctor(Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.TokenRevocationRequestValidator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.TokenRevocationRequestValidator"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.TokenRevocationRequestValidator.ValidateRequestAsync(System.Collections.Specialized.NameValueCollection,Duende.IdentityServer.Models.Client)">
            <summary>
            Validates the request.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="client">The client.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            parameters
            or
            client
            </exception>
        </member>
        <member name="T:Duende.IdentityServer.Validation.UserInfoRequestValidator">
            <summary>
            Default userinfo request validator
            </summary>
            <seealso cref="T:Duende.IdentityServer.Validation.IUserInfoRequestValidator" />
        </member>
        <member name="M:Duende.IdentityServer.Validation.UserInfoRequestValidator.#ctor(Duende.IdentityServer.Validation.ITokenValidator,Duende.IdentityServer.Services.IProfileService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.UserInfoRequestValidator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.UserInfoRequestValidator" /> class.
            </summary>
            <param name="tokenValidator">The token validator.</param>
            <param name="profile">The profile service</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.UserInfoRequestValidator.ValidateRequestAsync(System.String)">
            <summary>
            Validates a userinfo request.
            </summary>
            <param name="accessToken">The access token.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Duende.IdentityServer.Validation.X509NameSecretValidator">
            <summary>
            Validator for an X.509 certificate based client secret using the common name
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.X509NameSecretValidator.#ctor(Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.X509NameSecretValidator})">
            <summary>
            ctor
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.X509NameSecretValidator.ValidateAsync(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.Secret},Duende.IdentityServer.Models.ParsedSecret)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Validation.X509ThumbprintSecretValidator">
            <summary>
            Validator for an X.509 certificate based client secret using the thumbprint
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.X509ThumbprintSecretValidator.#ctor(Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Validation.X509ThumbprintSecretValidator})">
            <summary>
            ctor
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.X509ThumbprintSecretValidator.ValidateAsync(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.Secret},Duende.IdentityServer.Models.ParsedSecret)">
            <inheritdoc/>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IApiSecretValidator">
            <summary>
            Validator for handling API client authentication.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IApiSecretValidator.ValidateAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Tries to authenticate an API client based on the incoming request
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IAuthorizeRequestValidator">
            <summary>
             Authorize endpoint request validator.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IAuthorizeRequestValidator.ValidateAsync(System.Collections.Specialized.NameValueCollection,System.Security.Claims.ClaimsPrincipal)">
            <summary>
             Validates authorize request parameters.
            </summary>
            <param name="parameters"></param>
            <param name="subject"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IClientConfigurationValidator">
            <summary>
            Validator for handling client authentication
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IClientConfigurationValidator.ValidateAsync(Duende.IdentityServer.Validation.ClientConfigurationValidationContext)">
            <summary>
            Determines whether the configuration of a client is valid.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IClientSecretValidator">
            <summary>
            Validator for handling client authentication
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IClientSecretValidator.ValidateAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Tries to authenticate a client based on the incoming request
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ICustomAuthorizeRequestValidator">
            <summary>
            Allows inserting custom validation logic into authorize and token requests
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ICustomAuthorizeRequestValidator.ValidateAsync(Duende.IdentityServer.Validation.CustomAuthorizeRequestValidationContext)">
            <summary>
            Custom validation logic for the authorize request.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ICustomTokenRequestValidator">
            <summary>
            Allows inserting custom validation logic into token requests
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ICustomTokenRequestValidator.ValidateAsync(Duende.IdentityServer.Validation.CustomTokenRequestValidationContext)">
            <summary>
            Custom validation logic for a token request.
            </summary>
            <param name="context">The context.</param>
            <returns>
            The validation result
            </returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ICustomTokenValidator">
            <summary>
            Allows inserting custom token validation logic
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ICustomTokenValidator.ValidateAccessTokenAsync(Duende.IdentityServer.Validation.TokenValidationResult)">
            <summary>
            Custom validation logic for access tokens.
            </summary>
            <param name="result">The validation result so far.</param>
            <returns>The validation result</returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ICustomTokenValidator.ValidateIdentityTokenAsync(Duende.IdentityServer.Validation.TokenValidationResult)">
            <summary>
            Custom validation logic for identity tokens.
            </summary>
            <param name="result">The validation result so far.</param>
            <returns>The validation result</returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IDeviceAuthorizationRequestValidator">
            <summary>
             Device authorization endpoint request validator.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IDeviceAuthorizationRequestValidator.ValidateAsync(System.Collections.Specialized.NameValueCollection,Duende.IdentityServer.Validation.ClientSecretValidationResult)">
            <summary>
             Validates authorize request parameters.
            </summary>
            <param name="parameters"></param>
            <param name="clientValidationResult"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IDeviceCodeValidator">
            <summary>
            The device code validator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IDeviceCodeValidator.ValidateAsync(Duende.IdentityServer.Validation.DeviceCodeValidationContext)">
            <summary>
            Validates the device code.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IEndSessionRequestValidator">
            <summary>
             Validates end session requests.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IEndSessionRequestValidator.ValidateAsync(System.Collections.Specialized.NameValueCollection,System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Validates end session endpoint requests.
            </summary>
            <param name="parameters"></param>
            <param name="subject"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IEndSessionRequestValidator.ValidateCallbackAsync(System.Collections.Specialized.NameValueCollection)">
            <summary>
             Validates requests from logout page iframe to trigger single signout.
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IExtensionGrantValidator">
            <summary>
            Handles validation of token requests using custom grant types
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IExtensionGrantValidator.ValidateAsync(Duende.IdentityServer.Validation.ExtensionGrantValidationContext)">
            <summary>
            Validates the custom grant request.
            </summary>
            <param name="context">The context.</param>
            <returns>
            A principal
            </returns>
        </member>
        <member name="P:Duende.IdentityServer.Validation.IExtensionGrantValidator.GrantType">
            <summary>
            Returns the grant type this validator can deal with
            </summary>
            <value>
            The type of the grant.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IIntrospectionRequestValidator">
            <summary>
            Interface for the introspection request validator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IIntrospectionRequestValidator.ValidateAsync(System.Collections.Specialized.NameValueCollection,Duende.IdentityServer.Models.ApiResource)">
            <summary>
            Validates the request.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="api">The API.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IRedirectUriValidator">
            <summary>
            Models the logic when validating redirect and post logout redirect URIs.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IRedirectUriValidator.IsRedirectUriValidAsync(System.String,Duende.IdentityServer.Models.Client)">
            <summary>
            Determines whether a redirect URI is valid for a client.
            </summary>
            <param name="requestedUri">The requested URI.</param>
            <param name="client">The client.</param>
            <returns><c>true</c> is the URI is valid; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IRedirectUriValidator.IsPostLogoutRedirectUriValidAsync(System.String,Duende.IdentityServer.Models.Client)">
            <summary>
            Determines whether a post logout URI is valid for a client.
            </summary>
            <param name="requestedUri">The requested URI.</param>
            <param name="client">The client.</param>
            <returns><c>true</c> is the URI is valid; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IResourceOwnerPasswordValidator">
            <summary>
            Handles validation of resource owner password credentials
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IResourceOwnerPasswordValidator.ValidateAsync(Duende.IdentityServer.Validation.ResourceOwnerPasswordValidationContext)">
            <summary>
            Validates the resource owner password credential
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IResourceValidator">
            <summary>
            Validates requested resources (scopes and resource indicators)
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IResourceValidator.ValidateRequestedResourcesAsync(Duende.IdentityServer.Validation.ResourceValidationRequest)">
            <summary>
            Validates the requested resources for the client.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IScopeParser">
            <summary>
            Allows parsing raw scopes values into structured scope values.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IScopeParser.ParseScopeValues(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parses the requested scopes.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ISecretParser">
            <summary>
            A service for parsing secrets found on the request
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ISecretParser.ParseAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Tries to find a secret on the context that can be used for authentication
            </summary>
            <param name="context">The HTTP context.</param>
            <returns>
            A parsed secret
            </returns>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ISecretParser.AuthenticationMethod">
            <summary>
            Returns the authentication method name that this parser implements
            </summary>
            <value>
            The authentication method.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ISecretsListParser">
            <summary>
            Parser for finding the best secret in an Enumerable List
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ISecretsListParser.ParseAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Tries to find the best secret on the context that can be used for authentication
            </summary>
            <param name="context">The HTTP context.</param>
            <returns>
            A parsed secret
            </returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ISecretsListParser.GetAvailableAuthenticationMethods">
            <summary>
            Gets all available authentication methods.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ISecretsListValidator">
            <summary>
            Validator for an Enumerable List of Secrets
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ISecretsListValidator.ValidateAsync(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.Secret},Duende.IdentityServer.Models.ParsedSecret)">
            <summary>
            Validates a list of secrets
            </summary>
            <param name="secrets">The stored secrets.</param>
            <param name="parsedSecret">The received secret.</param>
            <returns>A validation result</returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ISecretValidator">
            <summary>
            Service for validating a received secret against a stored secret
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ISecretValidator.ValidateAsync(System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.Secret},Duende.IdentityServer.Models.ParsedSecret)">
            <summary>
            Validates a secret
            </summary>
            <param name="secrets">The stored secrets.</param>
            <param name="parsedSecret">The received secret.</param>
            <returns>A validation result</returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ITokenRequestValidator">
            <summary>
            Interface for the token request validator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ITokenRequestValidator.ValidateRequestAsync(System.Collections.Specialized.NameValueCollection,Duende.IdentityServer.Validation.ClientSecretValidationResult)">
            <summary>
            Validates the request.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="clientValidationResult">The client validation result.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ITokenRevocationRequestValidator">
            <summary>
            Interface for the token revocation request validator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ITokenRevocationRequestValidator.ValidateRequestAsync(System.Collections.Specialized.NameValueCollection,Duende.IdentityServer.Models.Client)">
            <summary>
            Validates the request.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="client">The client.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ITokenValidator">
            <summary>
            Interface for the token validator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ITokenValidator.ValidateAccessTokenAsync(System.String,System.String)">
            <summary>
            Validates an access token.
            </summary>
            <param name="token">The access token.</param>
            <param name="expectedScope">The expected scope.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ITokenValidator.ValidateIdentityTokenAsync(System.String,System.String,System.Boolean)">
            <summary>
            Validates an identity token.
            </summary>
            <param name="token">The token.</param>
            <param name="clientId">The client identifier.</param>
            <param name="validateLifetime">if set to <c>true</c> the lifetime gets validated. Otherwise not.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IUserInfoRequestValidator">
            <summary>
            Validator for userinfo requests
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.IUserInfoRequestValidator.ValidateRequestAsync(System.String)">
            <summary>
            Validates a userinfo request.
            </summary>
            <param name="accessToken">The access token.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.AuthorizeRequestValidationResult">
            <summary>
            Validation result for authorize requests
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.AuthorizeRequestValidationResult.#ctor(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.AuthorizeRequestValidationResult"/> class.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.AuthorizeRequestValidationResult.#ctor(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.AuthorizeRequestValidationResult" /> class.
            </summary>
            <param name="request">The request.</param>
            <param name="error">The error.</param>
            <param name="errorDescription">The error description.</param>
        </member>
        <member name="P:Duende.IdentityServer.Validation.AuthorizeRequestValidationResult.ValidatedRequest">
            <summary>
            Gets or sets the validated request.
            </summary>
            <value>
            The validated request.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.BearerTokenUsageValidationResult">
            <summary>
            Models usage of a bearer token
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.BearerTokenUsageValidationResult.TokenFound">
            <summary>
            Gets or sets a value indicating whether the token was found.
            </summary>
            <value>
              <c>true</c> if the token was found; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.BearerTokenUsageValidationResult.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.BearerTokenUsageValidationResult.UsageType">
            <summary>
            Gets or sets the usage type.
            </summary>
            <value>
            The type of the usage.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ClientSecretValidationResult">
            <summary>
            Validation result for client validation
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ClientSecretValidationResult.Client">
            <summary>
            Gets or sets the client.
            </summary>
            <value>
            The client.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ClientSecretValidationResult.Secret">
            <summary>
            Gets or sets the secret used to authenticate the client.
            </summary>
            <value>
            The secret.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ClientSecretValidationResult.Confirmation">
            <summary>
            Gets or sets the value of the confirmation method (will become the cnf claim). Must be a JSON object.
            </summary>
            <value>
            The confirmation.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.DeviceAuthorizationRequestValidationResult">
            <summary>
            Validation result for device authorization requests
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DeviceAuthorizationRequestValidationResult.#ctor(Duende.IdentityServer.Validation.ValidatedDeviceAuthorizationRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.DeviceAuthorizationRequestValidationResult"/> class.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.DeviceAuthorizationRequestValidationResult.#ctor(Duende.IdentityServer.Validation.ValidatedDeviceAuthorizationRequest,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.DeviceAuthorizationRequestValidationResult"/> class.
            </summary>
            <param name="request">The request.</param>
            <param name="error">The error.</param>
            <param name="errorDescription">The error description.</param>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DeviceAuthorizationRequestValidationResult.ValidatedRequest">
            <summary>
            Gets the validated request.
            </summary>
            <value>
            The validated request.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.DeviceCodeValidationContext">
            <summary>
            Validation result for device code validation request.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DeviceCodeValidationContext.DeviceCode">
            <summary>
            Gets or sets the device code.
            </summary>
            <value>
            The device code.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DeviceCodeValidationContext.Request">
            <summary>
            Gets or sets the request.
            </summary>
            <value>
            The request.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.DeviceCodeValidationContext.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.EndSessionCallbackValidationResult">
            <summary>
            Validation result for end session callback requests.
            </summary>
            <seealso cref="T:Duende.IdentityServer.Validation.ValidationResult" />
        </member>
        <member name="P:Duende.IdentityServer.Validation.EndSessionCallbackValidationResult.FrontChannelLogoutUrls">
            <summary>
            Gets the client front-channel logout urls.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.EndSessionValidationResult">
            <summary>
            Validation result for end session requests
            </summary>
            <seealso cref="T:Duende.IdentityServer.Validation.ValidationResult" />
        </member>
        <member name="P:Duende.IdentityServer.Validation.EndSessionValidationResult.ValidatedRequest">
            <summary>
            Gets or sets the validated request.
            </summary>
            <value>
            The validated request.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.GrantValidationResult">
            <summary>
            Models the result of custom grant validation.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.GrantValidationResult.Subject">
            <summary>
            Gets or sets the principal which represents the result of the validation.
            </summary>
            <value>
            The principal.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.GrantValidationResult.CustomResponse">
            <summary>
            Custom fields for the token response
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.GrantValidationResult.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.GrantValidationResult"/> class with no subject.
            Warning: the resulting access token will only contain the client identity.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.GrantValidationResult.#ctor(System.Security.Claims.ClaimsPrincipal,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.GrantValidationResult"/> class with a given principal.
            Warning: the principal needs to include the required claims - it is recommended to use the other constructor that does validation.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.GrantValidationResult.#ctor(Duende.IdentityServer.Models.TokenRequestErrors,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.GrantValidationResult"/> class with an error and description.
            </summary>
            <param name="error">The error.</param>
            <param name="errorDescription">The error description.</param>
            <param name="customResponse">Custom response elements</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.GrantValidationResult.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.GrantValidationResult" /> class.
            </summary>
            <param name="subject">The subject claim used to uniquely identifier the user.</param>
            <param name="authenticationMethod">The authentication method which describes the custom grant type.</param>
            <param name="claims">Additional claims that will be maintained in the principal. 
            If you want these claims to appear in token, you need to add them explicitly in your custom implementation of <see cref="T:Duende.IdentityServer.Services.IProfileService"/> service.</param>
            <param name="identityProvider">The identity provider.</param>
            <param name="customResponse">The custom response.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.GrantValidationResult.#ctor(System.String,System.String,System.DateTime,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.GrantValidationResult" /> class.
            </summary>
            <param name="subject">The subject claim used to uniquely identifier the user.</param>
            <param name="authenticationMethod">The authentication method which describes the custom grant type.</param>
            <param name="authTime">The UTC date/time of authentication.</param>
            <param name="claims">Additional claims that will be maintained in the principal.
            If you want these claims to appear in token, you need to add them explicitly in your custom implementation of <see cref="T:Duende.IdentityServer.Services.IProfileService"/> service.</param>
            <param name="identityProvider">The identity provider.</param>
            <param name="customResponse">The custom response.</param>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IntrospectionRequestValidationResult">
            <summary>
            Validation result for introspection request
            </summary>
            <seealso cref="T:Duende.IdentityServer.Validation.ValidationResult" />
        </member>
        <member name="P:Duende.IdentityServer.Validation.IntrospectionRequestValidationResult.Parameters">
            <summary>
            Gets or sets the request parameters.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.IntrospectionRequestValidationResult.Api">
            <summary>
            Gets or sets the API.
            </summary>
            <value>
            The API.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.IntrospectionRequestValidationResult.IsActive">
            <summary>
            Gets or sets a value indicating whether the token is active.
            </summary>
            <value>
              <c>true</c> if the token is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.IntrospectionRequestValidationResult.Claims">
            <summary>
            Gets or sets the claims.
            </summary>
            <value>
            The claims.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.IntrospectionRequestValidationResult.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.IntrospectionRequestValidationFailureReason">
            <summary>
            Failure reasons for introspection request
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.IntrospectionRequestValidationFailureReason.None">
            <summary>
            none
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.IntrospectionRequestValidationFailureReason.MissingToken">
            <summary>
            missing token
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.IntrospectionRequestValidationFailureReason.InvalidToken">
            <summary>
            invalid token
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Validation.IntrospectionRequestValidationFailureReason.InvalidScope">
            <summary>
            invalid scope
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.JwtRequestValidationResult">
            <summary>
            Models the result of JWT request validation.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.JwtRequestValidationResult.Payload">
            <summary>
            The key/value pairs from the JWT payload of a successfuly validated request.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ParsedScopesResult">
            <summary>
            Represents the result of scope parsing.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ParsedScopesResult.ParsedScopes">
            <summary>
            The valid parsed scopes.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ParsedScopesResult.Errors">
            <summary>
            The errors encountered while parsing.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ParsedScopesResult.Succeeded">
            <summary>
            Indicates if the result of parsing the scopes was successful.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ParsedScopeValidationError">
            <summary>
            Models an error parsing a scope.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ParsedScopeValidationError.#ctor(System.String,System.String)">
            <summary>
            Ctor
            </summary>
            <param name="rawValue"></param>
            <param name="error"></param>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ParsedScopeValidationError.RawValue">
            <summary>
            The original (raw) value of the scope.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ParsedScopeValidationError.Error">
            <summary>
            Error message describing why the raw scope failed to be parsed.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ParsedScopeValue">
            <summary>
            Models a parsed scope value.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ParsedScopeValue.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
            <param name="rawValue"></param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ParsedScopeValue.#ctor(System.String,System.String,System.String)">
            <summary>
            Ctor
            </summary>
            <param name="rawValue"></param>
            <param name="parsedName"></param>
            <param name="parsedParameter"></param>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ParsedScopeValue.RawValue">
            <summary>
            The original (raw) value of the scope.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ParsedScopeValue.ParsedName">
            <summary>
            The parsed name of the scope. If the scope has no structure, the parsed name will be the same as the raw value.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ParsedScopeValue.ParsedParameter">
            <summary>
            The parameter value of the parsed scope. If the scope has no structure, then the value will be null.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ResourceValidationRequest">
            <summary>
            Models the request to validate scopes and resource indicators for a client.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ResourceValidationRequest.Client">
            <summary>
            The client.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ResourceValidationRequest.Scopes">
            <summary>
            The requested scope values.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ResourceValidationResult">
            <summary>
            Result of validation of requested scopes and resource indicators.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ResourceValidationResult.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ResourceValidationResult.#ctor(Duende.IdentityServer.Models.Resources)">
            <summary>
            Ctor
            </summary>
            <param name="resources"></param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ResourceValidationResult.#ctor(Duende.IdentityServer.Models.Resources,System.Collections.Generic.IEnumerable{Duende.IdentityServer.Validation.ParsedScopeValue})">
            <summary>
            Ctor
            </summary>
            <param name="resources"></param>
            <param name="parsedScopeValues"></param>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ResourceValidationResult.Succeeded">
            <summary>
            Indicates if the result was successful.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ResourceValidationResult.Resources">
            <summary>
            The resources of the result.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ResourceValidationResult.ParsedScopes">
            <summary>
            The parsed scopes represented by the result.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ResourceValidationResult.RawScopeValues">
            <summary>
            The original (raw) scope values represented by the validated result.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ResourceValidationResult.InvalidScopes">
            <summary>
            The requested scopes that are invalid.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ResourceValidationResult.Filter(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns new result filted by the scope values.
            </summary>
            <param name="scopeValues"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ApiSecretValidationResult">
            <summary>
            Validation result for API validation
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ApiSecretValidationResult.Resource">
            <summary>
            Gets or sets the resource.
            </summary>
            <value>
            The resource.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.SecretValidationResult">
            <summary>
            Validation result for secrets
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.SecretValidationResult.Success">
            <summary>
            Gets or sets a value indicating whether the secret validation was successful.
            </summary>
            <value>
              <c>true</c> if success; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.SecretValidationResult.Confirmation">
            <summary>
            Gets or sets the value of the confirmation method (will become the cnf claim). Must be a JSON object.
            </summary>
            <value>
            The confirmation.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.TokenRequestValidationResult">
            <summary>
            Validation result for token requests
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Validation.TokenRequestValidationResult.#ctor(Duende.IdentityServer.Validation.ValidatedTokenRequest,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.TokenRequestValidationResult"/> class.
            </summary>
            <param name="validatedRequest">The validated request.</param>
            <param name="customResponse">The custom response.</param>
        </member>
        <member name="M:Duende.IdentityServer.Validation.TokenRequestValidationResult.#ctor(Duende.IdentityServer.Validation.ValidatedTokenRequest,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.TokenRequestValidationResult"/> class.
            </summary>
            <param name="validatedRequest">The validated request.</param>
            <param name="error">The error.</param>
            <param name="errorDescription">The error description.</param>
            <param name="customResponse">The custom response.</param>
        </member>
        <member name="P:Duende.IdentityServer.Validation.TokenRequestValidationResult.ValidatedRequest">
            <summary>
            Gets the validated request.
            </summary>
            <value>
            The validated request.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.TokenRequestValidationResult.CustomResponse">
            <summary>
            Gets or sets the custom response.
            </summary>
            <value>
            The custom response.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.TokenRevocationRequestValidationResult">
            <summary>
            Models the validation result of access tokens and id tokens.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.TokenRevocationRequestValidationResult.TokenTypeHint">
            <summary>
            Gets or sets the token type hint.
            </summary>
            <value>
            The token type hint.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.TokenRevocationRequestValidationResult.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.TokenRevocationRequestValidationResult.Client">
            <summary>
            Gets or sets the client.
            </summary>
            <value>
            The client.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.TokenValidationResult">
            <summary>
            Models the validation result of access tokens and id tokens.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.TokenValidationResult.Claims">
            <summary>
            Gets or sets the claims.
            </summary>
            <value>
            The claims.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.TokenValidationResult.Jwt">
            <summary>
            Gets or sets the JWT.
            </summary>
            <value>
            The JWT.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.TokenValidationResult.ReferenceToken">
            <summary>
            Gets or sets the reference token (in case of access token validation).
            </summary>
            <value>
            The reference token.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.TokenValidationResult.ReferenceTokenId">
            <summary>
            Gets or sets the reference token identifier (in case of access token validation).
            </summary>
            <value>
            The reference token identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.TokenValidationResult.RefreshToken">
            <summary>
            Gets or sets the refresh token (in case of refresh token validation).
            </summary>
            <value>
            The reference token identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.TokenValidationResult.Client">
            <summary>
            Gets or sets the client.
            </summary>
            <value>
            The client.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.UserInfoRequestValidationResult">
            <summary>
            Validation result for userinfo requests
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.UserInfoRequestValidationResult.TokenValidationResult">
            <summary>
            Gets or sets the token validation result.
            </summary>
            <value>
            The token validation result.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.UserInfoRequestValidationResult.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest">
            <summary>
            Models a validated request to the authorize endpoint.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.ResponseType">
            <summary>
            Gets or sets the type of the response.
            </summary>
            <value>
            The type of the response.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.ResponseMode">
            <summary>
            Gets or sets the response mode.
            </summary>
            <value>
            The response mode.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.GrantType">
            <summary>
            Gets or sets the grant type.
            </summary>
            <value>
            The grant type.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.RedirectUri">
            <summary>
            Gets or sets the redirect URI.
            </summary>
            <value>
            The redirect URI.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.RequestedScopes">
            <summary>
            Gets or sets the requested scopes.
            </summary>
            <value>
            The requested scopes.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.WasConsentShown">
            <summary>
            Gets or sets a value indicating whether consent was shown.
            </summary>
            <value>
              <c>true</c> if consent was shown; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.Description">
            <summary>
            Gets the description the user assigned to the device being authorized.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>
            The state.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.UiLocales">
            <summary>
            Gets or sets the UI locales.
            </summary>
            <value>
            The UI locales.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.IsOpenIdRequest">
            <summary>
            Gets or sets a value indicating whether the request was an OpenID Connect request.
            </summary>
            <value>
            <c>true</c> if the request was an OpenID Connect request; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.IsApiResourceRequest">
            <summary>
            Gets or sets a value indicating whether this instance is API resource request.
            </summary>
            <value>
            <c>true</c> if this instance is API resource request; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.Nonce">
            <summary>
            Gets or sets the nonce.
            </summary>
            <value>
            The nonce.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.AuthenticationContextReferenceClasses">
            <summary>
            Gets or sets the authentication context reference classes.
            </summary>
            <value>
            The authentication context reference classes.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.DisplayMode">
            <summary>
            Gets or sets the display mode.
            </summary>
            <value>
            The display mode.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.PromptModes">
            <summary>
            Gets or sets the collection of prompt modes.
            </summary>
            <value>
            The collection of prompt modes.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.MaxAge">
            <summary>
            Gets or sets the maximum age.
            </summary>
            <value>
            The maximum age.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.LoginHint">
            <summary>
            Gets or sets the login hint.
            </summary>
            <value>
            The login hint.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.CodeChallenge">
            <summary>
            Gets or sets the code challenge
            </summary>
            <value>
            The code challenge
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.CodeChallengeMethod">
            <summary>
            Gets or sets the code challenge method
            </summary>
            <value>
            The code challenge method
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.RequestObjectValues">
            <summary>
            Gets or sets the validated contents of the request object (if present)
            </summary>
            <value>
            The request object values
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.RequestObject">
            <summary>
            Gets or sets the request object (either passed by value or retrieved by reference)
            </summary>
            <value>
            The request object
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.AccessTokenRequested">
            <summary>
            Gets a value indicating whether an access token was requested.
            </summary>
            <value>
            <c>true</c> if an access token was requested; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Validation.ValidatedAuthorizeRequest"/> class.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ValidatedDeviceAuthorizationRequest">
            <summary>
            Models a validated request to the device authorization endpoint.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedDeviceAuthorizationRequest.RequestedScopes">
            <summary>
            Gets or sets the requested scopes.
            </summary>
            <value>
            The scopes.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedDeviceAuthorizationRequest.IsOpenIdRequest">
            <summary>
            Gets or sets a value indicating whether this instance is open identifier request.
            </summary>
            <value>
              <c>true</c> if this instance is open identifier request; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedDeviceAuthorizationRequest.Description">
            <summary>
            Gets the description the user assigned to the device being authorized.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ValidatedEndSessionRequest">
            <summary>
            Represents a validated end session (logout) request
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedEndSessionRequest.IsAuthenticated">
            <summary>
            Gets a value indicating whether this instance is authenticated.
            </summary>
            <value>
            <c>true</c> if this instance is authenticated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedEndSessionRequest.PostLogOutUri">
            <summary>
            Gets or sets the post-logout URI.
            </summary>
            <value>
            The post-logout URI.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedEndSessionRequest.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>
            The state.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedEndSessionRequest.ClientIds">
            <summary>
             Ids of clients known to have an authentication session for user at end session time
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ValidatedRequest">
            <summary>
            Base class for a validate authorize or token request
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedRequest.Raw">
            <summary>
            Gets or sets the raw request data
            </summary>
            <value>
            The raw.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedRequest.Client">
            <summary>
            Gets or sets the client.
            </summary>
            <value>
            The client.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedRequest.Secret">
            <summary>
            Gets or sets the secret used to authenticate the client.
            </summary>
            <value>
            The parsed secret.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedRequest.AccessTokenLifetime">
            <summary>
            Gets or sets the effective access token lifetime for the current request.
            This value is initally read from the client configuration but can be modified in the request pipeline
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedRequest.ClientClaims">
            <summary>
            Gets or sets the client claims for the current request.
            This value is initally read from the client configuration but can be modified in the request pipeline
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedRequest.AccessTokenType">
            <summary>
            Gets or sets the effective access token type for the current request.
            This value is initally read from the client configuration but can be modified in the request pipeline
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedRequest.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedRequest.SessionId">
            <summary>
            Gets or sets the session identifier.
            </summary>
            <value>
            The session identifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedRequest.Options">
            <summary>
            Gets or sets the identity server options.
            </summary>
            <value>
            The options.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedRequest.ValidatedResources">
            <summary>
            Gets or sets the validated resources for the request.
            </summary>
            <value>
            The validated resources.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedRequest.Confirmation">
            <summary>
            Gets or sets the value of the confirmation method (will become the cnf claim). Must be a JSON object.
            </summary>
            <value>
            The confirmation.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedRequest.ClientId">
            <summary>
            Gets or sets the client ID that should be used for the current request (this is useful for token exchange scenarios)
            </summary>
            <value>
            The client ID
            </value>
        </member>
        <member name="M:Duende.IdentityServer.Validation.ValidatedRequest.SetClient(Duende.IdentityServer.Models.Client,Duende.IdentityServer.Models.ParsedSecret,System.String)">
            <summary>
            Sets the client and the appropriate request specific settings.
            </summary>
            <param name="client">The client.</param>
            <param name="secret">The client secret (optional).</param>
            <param name="confirmation">The confirmation.</param>
            <exception cref="T:System.ArgumentNullException">client</exception>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ValidatedTokenRequest">
            <summary>
            Models a validated request to the token endpoint.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedTokenRequest.GrantType">
            <summary>
            Gets or sets the type of the grant.
            </summary>
            <value>
            The type of the grant.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedTokenRequest.RequestedScopes">
            <summary>
            Gets or sets the scopes.
            </summary>
            <value>
            The scopes.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedTokenRequest.UserName">
            <summary>
            Gets or sets the username used in the request.
            </summary>
            <value>
            The name of the user.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedTokenRequest.RefreshToken">
            <summary>
            Gets or sets the refresh token.
            </summary>
            <value>
            The refresh token.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedTokenRequest.RefreshTokenHandle">
            <summary>
            Gets or sets the refresh token handle.
            </summary>
            <value>
            The refresh token handle.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedTokenRequest.AuthorizationCode">
            <summary>
            Gets or sets the authorization code.
            </summary>
            <value>
            The authorization code.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedTokenRequest.AuthorizationCodeHandle">
            <summary>
            Gets or sets the authorization code handle.
            </summary>
            <value>
            The authorization code handle.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedTokenRequest.CodeVerifier">
            <summary>
            Gets or sets the code verifier.
            </summary>
            <value>
            The code verifier.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidatedTokenRequest.DeviceCode">
            <summary>
            Gets or sets the device code.
            </summary>
            <value>
            The device code.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Validation.ValidationResult">
            <summary>
            Minimal validation result class (base-class for more complext validation results)
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidationResult.IsError">
            <summary>
            Gets or sets a value indicating whether the validation was successful.
            </summary>
            <value>
              <c>true</c> if the validation is failed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidationResult.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Validation.ValidationResult.ErrorDescription">
            <summary>
            Gets or sets the error description.
            </summary>
            <value>
            The error description.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Hosting.Endpoint.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Hosting.Endpoint.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>
            The path.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.Hosting.Endpoint.Handler">
            <summary>
            Gets or sets the handler.
            </summary>
            <value>
            The handler.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Hosting.IdentityServerMiddleware">
            <summary>
            IdentityServer middleware
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.IdentityServerMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Hosting.IdentityServerMiddleware})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Hosting.IdentityServerMiddleware"/> class.
            </summary>
            <param name="next">The next.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.IdentityServerMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext,Duende.IdentityServer.Hosting.IEndpointRouter,Duende.IdentityServer.Services.IUserSession,Duende.IdentityServer.Services.IEventService,Duende.IdentityServer.Services.IBackChannelLogoutService)">
            <summary>
            Invokes the middleware.
            </summary>
            <param name="context">The context.</param>
            <param name="router">The router.</param>
            <param name="session">The user session.</param>
            <param name="events">The event service.</param>
            <param name="backChannelLogoutService"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Hosting.IEndpointHandler">
            <summary>
            Endpoint handler
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.IEndpointHandler.ProcessAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Processes the request.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Hosting.IEndpointResult">
            <summary>
            Endpoint result
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.IEndpointResult.ExecuteAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Executes the result.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Hosting.IEndpointRouter">
            <summary>
            The endpoint router
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.IEndpointRouter.Find(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Finds a matching endpoint.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationEvents">
            <summary>
            Events for local API authentication
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationEvents.OnClaimsTransformation">
            <summary>
            Invoked after the security token has passed validation and a ClaimsIdentity has been generated.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationEvents.ClaimsTransformation(Duende.IdentityServer.Hosting.LocalApiAuthentication.ClaimsTransformationContext)">
            <summary>
            Invoked after the security token has passed validation and a ClaimsIdentity has been generated.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Hosting.LocalApiAuthentication.ClaimsTransformationContext">
            <summary>
            Context class for local API claims transformation
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Hosting.LocalApiAuthentication.ClaimsTransformationContext.Principal">
            <summary>
            The principal
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Hosting.LocalApiAuthentication.ClaimsTransformationContext.HttpContext">
            <summary>
            the HTTP context
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationHandler">
            <summary>
            Authentication handler for validating access token from the local IdentityServer
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationHandler.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationOptions},Microsoft.Extensions.Logging.ILoggerFactory,System.Text.Encodings.Web.UrlEncoder,Microsoft.AspNetCore.Authentication.ISystemClock,Duende.IdentityServer.Validation.ITokenValidator)">
            <inheritdoc />
        </member>
        <member name="P:Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationHandler.Events">
            <summary>
            The handler calls methods on the events which give the application control at certain points where processing is occurring. 
            If it is not provided a default instance is supplied which does nothing when the methods are called.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationHandler.CreateEventsAsync">
            <inheritdoc/>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationHandler.HandleAuthenticateAsync">
            <inheritdoc />
        </member>
        <member name="T:Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationOptions">
            <summary>
            Options for local API authentication
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions" />
        </member>
        <member name="P:Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationOptions.ExpectedScope">
            <summary>
            Allows setting a specific required scope (optional)
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationOptions.SaveToken">
            <summary>
            Specifies whether the token should be saved in the authentication properties
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationOptions.Events">
            <summary>
            Allows implementing events
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Hosting.MutualTlsEndpointMiddleware">
            <summary>
                Middleware for re-writing the MTLS enabled endpoints to the standard protocol endpoints
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.MutualTlsEndpointMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Duende.IdentityServer.Configuration.IdentityServerOptions,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Hosting.MutualTlsEndpointMiddleware})">
            <summary>
                ctor
            </summary>
            <param name="next"></param>
            <param name="options"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Duende.IdentityServer.Hosting.MutualTlsEndpointMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider)">
            <inheritdoc />
        </member>
        <member name="T:Duende.IdentityServer.IdentityServerConstants.LocalApi">
            <summary>
            Constants for local IdentityServer access token authentication.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.IdentityServerConstants.LocalApi.AuthenticationScheme">
            <summary>
            The authentication scheme when using the AddLocalApi helper.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.IdentityServerConstants.LocalApi.ScopeName">
            <summary>
            The API scope name when using the AddLocalApiAuthentication helper.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.IdentityServerConstants.LocalApi.PolicyName">
            <summary>
            The authorization policy name when using the AddLocalApiAuthentication helper.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.IdentityServerConstants.StandardScopes.OpenId">
            <summary>REQUIRED. Informs the Authorization Server that the Client is making an OpenID Connect request. If the <c>openid</c> scope value is not present, the behavior is entirely unspecified.</summary>
        </member>
        <member name="F:Duende.IdentityServer.IdentityServerConstants.StandardScopes.Profile">
            <summary>OPTIONAL. This scope value requests access to the End-User's default profile Claims, which are: <c>name</c>, <c>family_name</c>, <c>given_name</c>, <c>middle_name</c>, <c>nickname</c>, <c>preferred_username</c>, <c>profile</c>, <c>picture</c>, <c>website</c>, <c>gender</c>, <c>birthdate</c>, <c>zoneinfo</c>, <c>locale</c>, and <c>updated_at</c>.</summary>
        </member>
        <member name="F:Duende.IdentityServer.IdentityServerConstants.StandardScopes.Email">
            <summary>OPTIONAL. This scope value requests access to the <c>email</c> and <c>email_verified</c> Claims.</summary>
        </member>
        <member name="F:Duende.IdentityServer.IdentityServerConstants.StandardScopes.Address">
            <summary>OPTIONAL. This scope value requests access to the <c>address</c> Claim.</summary>
        </member>
        <member name="F:Duende.IdentityServer.IdentityServerConstants.StandardScopes.Phone">
            <summary>OPTIONAL. This scope value requests access to the <c>phone_number</c> and <c>phone_number_verified</c> Claims.</summary>
        </member>
        <member name="F:Duende.IdentityServer.IdentityServerConstants.StandardScopes.OfflineAccess">
            <summary>This scope value MUST NOT be used with the OpenID Connect Implicit Client Implementer's Guide 1.0. See the OpenID Connect Basic Client Implementer's Guide 1.0 (http://openid.net/specs/openid-connect-implicit-1_0.html#OpenID.Basic) for its usage in that subset of OpenID Connect.</summary>
        </member>
        <member name="T:Duende.IdentityServer.IdentityServerTools">
            <summary>
            Class for useful helpers for interacting with IdentityServer
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.IdentityServerTools.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor,Duende.IdentityServer.Services.ITokenCreationService,Microsoft.AspNetCore.Authentication.ISystemClock)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.IdentityServerTools" /> class.
            </summary>
            <param name="contextAccessor">The context accessor.</param>
            <param name="tokenCreation">The token creation service.</param>
            <param name="clock">The clock.</param>
        </member>
        <member name="M:Duende.IdentityServer.IdentityServerTools.IssueJwtAsync(System.Int32,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Issues a JWT.
            </summary>
            <param name="lifetime">The lifetime.</param>
            <param name="claims">The claims.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">claims</exception>
        </member>
        <member name="M:Duende.IdentityServer.IdentityServerTools.IssueJwtAsync(System.Int32,System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Issues a JWT.
            </summary>
            <param name="lifetime">The lifetime.</param>
            <param name="issuer">The issuer.</param>
            <param name="claims">The claims.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">claims</exception>
        </member>
        <member name="T:Duende.IdentityServer.IdentityServerUser">
            <summary>
            Model properties of an IdentityServer user
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.IdentityServerUser.SubjectId">
            <summary>
            Subject ID (mandatory)
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.IdentityServerUser.DisplayName">
            <summary>
            Display name (optional)
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.IdentityServerUser.IdentityProvider">
            <summary>
            Identity provider (optional)
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.IdentityServerUser.AuthenticationMethods">
            <summary>
            Authentication methods
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.IdentityServerUser.AuthenticationTime">
            <summary>
            Authentication time
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.IdentityServerUser.AdditionalClaims">
            <summary>
            Additional claims
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.IdentityServerUser.#ctor(System.String)">
            <summary>
            Initializes a user identity
            </summary>
            <param name="subjectId">The subject ID</param>
        </member>
        <member name="M:Duende.IdentityServer.IdentityServerUser.CreatePrincipal">
            <summary>
            Creates an IdentityServer claims principal
            </summary>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Duende.IdentityServer.Infrastructure.DistributedCacheStateDataFormatter">
            <summary>
            State formatter using IDistributedCache
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Infrastructure.DistributedCacheStateDataFormatter.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Infrastructure.DistributedCacheStateDataFormatter"/> class.
            </summary>
            <param name="httpContext">The HTTP context accessor.</param>
            <param name="name">The scheme name.</param>
        </member>
        <member name="M:Duende.IdentityServer.Infrastructure.DistributedCacheStateDataFormatter.Protect(Microsoft.AspNetCore.Authentication.AuthenticationProperties)">
            <summary>
            Protects the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Infrastructure.DistributedCacheStateDataFormatter.Protect(Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.String)">
            <summary>
            Protects the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="purpose">The purpose.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Infrastructure.DistributedCacheStateDataFormatter.Unprotect(System.String)">
            <summary>
            Unprotects the specified protected text.
            </summary>
            <param name="protectedText">The protected text.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Infrastructure.DistributedCacheStateDataFormatter.Unprotect(System.String,System.String)">
            <summary>
            Unprotects the specified protected text.
            </summary>
            <param name="protectedText">The protected text.</param>
            <param name="purpose">The purpose.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Logging.LogSerializer">
            <summary>
            Helper to JSON serialize object data for logging.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Logging.LogSerializer.Serialize(System.Object)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="logObject">The object.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.AuthorizeInteractionResponseGenerator">
            <summary>
            Default logic for determining if user must login or consent when making requests to the authorization endpoint.
            </summary>
            <seealso cref="T:Duende.IdentityServer.ResponseHandling.IAuthorizeInteractionResponseGenerator" />
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.AuthorizeInteractionResponseGenerator.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.AuthorizeInteractionResponseGenerator.Consent">
            <summary>
            The consent service.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.AuthorizeInteractionResponseGenerator.Profile">
            <summary>
            The profile service.
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.AuthorizeInteractionResponseGenerator.Clock">
            <summary>
            The clock
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.AuthorizeInteractionResponseGenerator.#ctor(Microsoft.AspNetCore.Authentication.ISystemClock,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.ResponseHandling.AuthorizeInteractionResponseGenerator},Duende.IdentityServer.Services.IConsentService,Duende.IdentityServer.Services.IProfileService)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.ResponseHandling.AuthorizeInteractionResponseGenerator"/> class.
            </summary>
            <param name="clock">The clock.</param>
            <param name="logger">The logger.</param>
            <param name="consent">The consent.</param>
            <param name="profile">The profile.</param>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.AuthorizeInteractionResponseGenerator.ProcessInteractionAsync(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest,Duende.IdentityServer.Models.ConsentResponse)">
            <summary>
            Processes the interaction logic.
            </summary>
            <param name="request">The request.</param>
            <param name="consent">The consent.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.AuthorizeInteractionResponseGenerator.ProcessLoginAsync(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest)">
            <summary>
            Processes the login logic.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.AuthorizeInteractionResponseGenerator.ProcessConsentAsync(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest,Duende.IdentityServer.Models.ConsentResponse)">
            <summary>
            Processes the consent logic.
            </summary>
            <param name="request">The request.</param>
            <param name="consent">The consent.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException">Invalid PromptMode</exception>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.AuthorizeResponseGenerator">
            <summary>
            The authorize response generator
            </summary>
            <seealso cref="T:Duende.IdentityServer.ResponseHandling.IAuthorizeResponseGenerator" />
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.AuthorizeResponseGenerator.TokenService">
            <summary>
            The token service
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.AuthorizeResponseGenerator.AuthorizationCodeStore">
            <summary>
            The authorization code store
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.AuthorizeResponseGenerator.Events">
            <summary>
            The event service
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.AuthorizeResponseGenerator.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.AuthorizeResponseGenerator.Clock">
            <summary>
            The clock
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.AuthorizeResponseGenerator.KeyMaterialService">
            <summary>
            The key material service
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.AuthorizeResponseGenerator.#ctor(Microsoft.AspNetCore.Authentication.ISystemClock,Duende.IdentityServer.Services.ITokenService,Duende.IdentityServer.Services.IKeyMaterialService,Duende.IdentityServer.Stores.IAuthorizationCodeStore,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.ResponseHandling.AuthorizeResponseGenerator},Duende.IdentityServer.Services.IEventService)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.ResponseHandling.AuthorizeResponseGenerator"/> class.
            </summary>
            <param name="clock">The clock.</param>
            <param name="logger">The logger.</param>
            <param name="tokenService">The token service.</param>
            <param name="keyMaterialService"></param>
            <param name="authorizationCodeStore">The authorization code store.</param>
            <param name="events">The events.</param>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.AuthorizeResponseGenerator.CreateResponseAsync(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest)">
            <summary>
            Creates the response
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">invalid grant type: " + request.GrantType</exception>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.AuthorizeResponseGenerator.CreateHybridFlowResponseAsync(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest)">
            <summary>
            Creates the response for a hybrid flow request
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.AuthorizeResponseGenerator.CreateCodeFlowResponseAsync(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest)">
            <summary>
            Creates the response for a code flow request
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.AuthorizeResponseGenerator.CreateImplicitFlowResponseAsync(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest,System.String)">
            <summary>
            Creates the response for a implicit flow request
            </summary>
            <param name="request"></param>
            <param name="authorizationCode"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.AuthorizeResponseGenerator.CreateCodeAsync(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest)">
            <summary>
            Creates an authorization code
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.DeviceAuthorizationResponseGenerator">
            <summary>
            The device authorizaiton response generator
            </summary>
            <seealso cref="T:Duende.IdentityServer.ResponseHandling.IDeviceAuthorizationResponseGenerator" />
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.DeviceAuthorizationResponseGenerator.Options">
            <summary>
            The options
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.DeviceAuthorizationResponseGenerator.UserCodeService">
            <summary>
            The user code service
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.DeviceAuthorizationResponseGenerator.DeviceFlowCodeService">
            <summary>
            The device flow code service
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.DeviceAuthorizationResponseGenerator.Clock">
            <summary>
            The clock
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.DeviceAuthorizationResponseGenerator.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.DeviceAuthorizationResponseGenerator.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,Duende.IdentityServer.Services.IUserCodeService,Duende.IdentityServer.Services.IDeviceFlowCodeService,Microsoft.AspNetCore.Authentication.ISystemClock,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.ResponseHandling.DeviceAuthorizationResponseGenerator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.ResponseHandling.DeviceAuthorizationResponseGenerator"/> class.
            </summary>
            <param name="options">The options.</param>
            <param name="userCodeService">The user code service.</param>
            <param name="deviceFlowCodeService">The device flow code service.</param>
            <param name="clock">The clock.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.DeviceAuthorizationResponseGenerator.ProcessAsync(Duende.IdentityServer.Validation.DeviceAuthorizationRequestValidationResult,System.String)">
            <summary>
            Processes the response.
            </summary>
            <param name="validationResult">The validation result.</param>
            <param name="baseUrl">The base URL.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">validationResult or Client</exception>
            <exception cref="T:System.ArgumentException">Value cannot be null or whitespace. - baseUrl</exception>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.DiscoveryResponseGenerator">
            <summary>
            Default implementation of the discovery endpoint response generator
            </summary>
            <seealso cref="T:Duende.IdentityServer.ResponseHandling.IDiscoveryResponseGenerator" />
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.DiscoveryResponseGenerator.Options">
            <summary>
            The options
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.DiscoveryResponseGenerator.ExtensionGrants">
            <summary>
            The extension grants validator
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.DiscoveryResponseGenerator.Keys">
            <summary>
            The key material service
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.DiscoveryResponseGenerator.ResourceOwnerValidator">
            <summary>
            The resource owner validator
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.DiscoveryResponseGenerator.ResourceStore">
            <summary>
            The resource store
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.DiscoveryResponseGenerator.SecretParsers">
            <summary>
            The secret parsers
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.DiscoveryResponseGenerator.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.DiscoveryResponseGenerator.#ctor(Duende.IdentityServer.Configuration.IdentityServerOptions,Duende.IdentityServer.Stores.IResourceStore,Duende.IdentityServer.Services.IKeyMaterialService,Duende.IdentityServer.Validation.ExtensionGrantValidator,Duende.IdentityServer.Validation.ISecretsListParser,Duende.IdentityServer.Validation.IResourceOwnerPasswordValidator,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.ResponseHandling.DiscoveryResponseGenerator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.ResponseHandling.DiscoveryResponseGenerator"/> class.
            </summary>
            <param name="options">The options.</param>
            <param name="resourceStore">The resource store.</param>
            <param name="keys">The keys.</param>
            <param name="extensionGrants">The extension grants.</param>
            <param name="secretParsers">The secret parsers.</param>
            <param name="resourceOwnerValidator">The resource owner validator.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.DiscoveryResponseGenerator.CreateDiscoveryDocumentAsync(System.String,System.String)">
            <summary>
            Creates the discovery document.
            </summary>
            <param name="baseUrl">The base URL.</param>
            <param name="issuerUri">The issuer URI.</param>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.DiscoveryResponseGenerator.CreateJwkDocumentAsync">
            <summary>
            Creates the JWK document.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.IntrospectionResponseGenerator">
            <summary>
            The introspection response generator
            </summary>
            <seealso cref="T:Duende.IdentityServer.ResponseHandling.IIntrospectionResponseGenerator" />
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.IntrospectionResponseGenerator.Events">
            <summary>
            Gets the events.
            </summary>
            <value>
            The events.
            </value>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.IntrospectionResponseGenerator.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.IntrospectionResponseGenerator.#ctor(Duende.IdentityServer.Services.IEventService,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.ResponseHandling.IntrospectionResponseGenerator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.ResponseHandling.IntrospectionResponseGenerator" /> class.
            </summary>
            <param name="events">The events.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.IntrospectionResponseGenerator.ProcessAsync(Duende.IdentityServer.Validation.IntrospectionRequestValidationResult)">
            <summary>
            Processes the response.
            </summary>
            <param name="validationResult">The validation result.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.IntrospectionResponseGenerator.AreExpectedScopesPresentAsync(Duende.IdentityServer.Validation.IntrospectionRequestValidationResult)">
            <summary>
            Checks if the API resource is allowed to introspect the scopes.
            </summary>
            <param name="validationResult">The validation result.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator">
            <summary>
            The default token response generator
            </summary>
            <seealso cref="T:Duende.IdentityServer.ResponseHandling.ITokenResponseGenerator" />
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.TokenService">
            <summary>
            The token service
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.RefreshTokenService">
            <summary>
            The refresh token service
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.ScopeParser">
            <summary>
            The scope parser
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.Resources">
            <summary>
            The resource store
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.Clients">
            <summary>
            The clients store
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.Clock">
            <summary>
             The clock
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.#ctor(Microsoft.AspNetCore.Authentication.ISystemClock,Duende.IdentityServer.Services.ITokenService,Duende.IdentityServer.Services.IRefreshTokenService,Duende.IdentityServer.Validation.IScopeParser,Duende.IdentityServer.Stores.IResourceStore,Duende.IdentityServer.Stores.IClientStore,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.ResponseHandling.TokenResponseGenerator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator" /> class.
            </summary>
            <param name="clock">The clock.</param>
            <param name="tokenService">The token service.</param>
            <param name="refreshTokenService">The refresh token service.</param>
            <param name="scopeParser">The scope parser.</param>
            <param name="resources">The resources.</param>
            <param name="clients">The clients.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.ProcessAsync(Duende.IdentityServer.Validation.TokenRequestValidationResult)">
            <summary>
            Processes the response.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.ProcessClientCredentialsRequestAsync(Duende.IdentityServer.Validation.TokenRequestValidationResult)">
            <summary>
            Creates the response for an client credentials request.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.ProcessPasswordRequestAsync(Duende.IdentityServer.Validation.TokenRequestValidationResult)">
            <summary>
            Creates the response for a password request.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.ProcessAuthorizationCodeRequestAsync(Duende.IdentityServer.Validation.TokenRequestValidationResult)">
            <summary>
            Creates the response for an authorization code request.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Client does not exist anymore.</exception>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.ProcessRefreshTokenRequestAsync(Duende.IdentityServer.Validation.TokenRequestValidationResult)">
            <summary>
            Creates the response for a refresh token request.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.ProcessDeviceCodeRequestAsync(Duende.IdentityServer.Validation.TokenRequestValidationResult)">
            <summary>
            Processes the response for device code grant request.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.ProcessExtensionGrantRequestAsync(Duende.IdentityServer.Validation.TokenRequestValidationResult)">
            <summary>
            Creates the response for an extension grant request.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.ProcessTokenRequestAsync(Duende.IdentityServer.Validation.TokenRequestValidationResult)">
            <summary>
            Creates the response for a token request.
            </summary>
            <param name="validationResult">The validation result.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.CreateAccessTokenAsync(Duende.IdentityServer.Validation.ValidatedTokenRequest)">
            <summary>
            Creates the access/refresh token.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Client does not exist anymore.</exception>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.TokenResponseGenerator.CreateIdTokenFromRefreshTokenRequestAsync(Duende.IdentityServer.Validation.ValidatedTokenRequest,System.String)">
            <summary>
            Creates an id_token for a refresh token request if identity resources have been requested.
            </summary>
            <param name="request">The request.</param>
            <param name="newAccessToken">The new access token.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.TokenRevocationResponseGenerator">
            <summary>
            Default revocation response generator
            </summary>
            <seealso cref="T:Duende.IdentityServer.ResponseHandling.ITokenRevocationResponseGenerator" />
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.TokenRevocationResponseGenerator.ReferenceTokenStore">
            <summary>
            Gets the reference token store.
            </summary>
            <value>
            The reference token store.
            </value>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.TokenRevocationResponseGenerator.RefreshTokenStore">
            <summary>
            Gets the refresh token store.
            </summary>
            <value>
            The refresh token store.
            </value>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.TokenRevocationResponseGenerator.Logger">
            <summary>
            Gets the logger.
            </summary>
            <value>
            The logger.
            </value>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.TokenRevocationResponseGenerator.#ctor(Duende.IdentityServer.Stores.IReferenceTokenStore,Duende.IdentityServer.Stores.IRefreshTokenStore,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.ResponseHandling.TokenRevocationResponseGenerator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.ResponseHandling.TokenRevocationResponseGenerator" /> class.
            </summary>
            <param name="referenceTokenStore">The reference token store.</param>
            <param name="refreshTokenStore">The refresh token store.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.TokenRevocationResponseGenerator.ProcessAsync(Duende.IdentityServer.Validation.TokenRevocationRequestValidationResult)">
            <summary>
            Creates the revocation endpoint response and processes the revocation request.
            </summary>
            <param name="validationResult">The userinfo request validation result.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.TokenRevocationResponseGenerator.RevokeAccessTokenAsync(Duende.IdentityServer.Validation.TokenRevocationRequestValidationResult)">
            <summary>
            Revoke access token only if it belongs to client doing the request.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.TokenRevocationResponseGenerator.RevokeRefreshTokenAsync(Duende.IdentityServer.Validation.TokenRevocationRequestValidationResult)">
            <summary>
            Revoke refresh token only if it belongs to client doing the request
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.UserInfoResponseGenerator">
            <summary>
            The userinfo response generator
            </summary>
            <seealso cref="T:Duende.IdentityServer.ResponseHandling.IUserInfoResponseGenerator" />
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.UserInfoResponseGenerator.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.UserInfoResponseGenerator.Profile">
            <summary>
            The profile service
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.ResponseHandling.UserInfoResponseGenerator.Resources">
            <summary>
            The resource store
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.UserInfoResponseGenerator.#ctor(Duende.IdentityServer.Services.IProfileService,Duende.IdentityServer.Stores.IResourceStore,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.ResponseHandling.UserInfoResponseGenerator})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.ResponseHandling.UserInfoResponseGenerator"/> class.
            </summary>
            <param name="profile">The profile.</param>
            <param name="resourceStore">The resource store.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.UserInfoResponseGenerator.ProcessAsync(Duende.IdentityServer.Validation.UserInfoRequestValidationResult)">
            <summary>
            Creates the response.
            </summary>
            <param name="validationResult">The userinfo request validation result.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Profile service returned incorrect subject value</exception>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.UserInfoResponseGenerator.GetRequestedResourcesAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
             Gets the identity resources from the scopes.
            </summary>
            <param name="scopes"></param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.UserInfoResponseGenerator.GetRequestedClaimTypesAsync(Duende.IdentityServer.Validation.ResourceValidationResult)">
            <summary>
            Gets the requested claim types.
            </summary>
            <param name="resourceValidationResult"></param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.IAuthorizeInteractionResponseGenerator">
            <summary>
            Interface for determining if user must login or consent when making requests to the authorization endpoint.
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.IAuthorizeInteractionResponseGenerator.ProcessInteractionAsync(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest,Duende.IdentityServer.Models.ConsentResponse)">
            <summary>
            Processes the interaction logic.
            </summary>
            <param name="request">The request.</param>
            <param name="consent">The consent.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.IAuthorizeResponseGenerator">
            <summary>
            Interface for the authorize response generator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.IAuthorizeResponseGenerator.CreateResponseAsync(Duende.IdentityServer.Validation.ValidatedAuthorizeRequest)">
            <summary>
            Creates the response
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.IDeviceAuthorizationResponseGenerator">
            <summary>
            Interface for the device authorization response generator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.IDeviceAuthorizationResponseGenerator.ProcessAsync(Duende.IdentityServer.Validation.DeviceAuthorizationRequestValidationResult,System.String)">
            <summary>
            Processes the response.
            </summary>
            <param name="validationResult">The validation result.</param>
            <param name="baseUrl">The base URL.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.IDiscoveryResponseGenerator">
            <summary>
            Interface for discovery endpoint response generator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.IDiscoveryResponseGenerator.CreateDiscoveryDocumentAsync(System.String,System.String)">
            <summary>
            Creates the discovery document.
            </summary>
            <param name="baseUrl">The base URL.</param>
            <param name="issuerUri">The issuer URI.</param>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.IDiscoveryResponseGenerator.CreateJwkDocumentAsync">
            <summary>
            Creates the JWK document.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.IIntrospectionResponseGenerator">
            <summary>
            Interface for introspection response generator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.IIntrospectionResponseGenerator.ProcessAsync(Duende.IdentityServer.Validation.IntrospectionRequestValidationResult)">
            <summary>
            Processes the response.
            </summary>
            <param name="validationResult">The validation result.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.ITokenResponseGenerator">
            <summary>
            Interface the token response generator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.ITokenResponseGenerator.ProcessAsync(Duende.IdentityServer.Validation.TokenRequestValidationResult)">
            <summary>
            Processes the response.
            </summary>
            <param name="validationResult">The validation result.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.ITokenRevocationResponseGenerator">
            <summary>
            Interface for the userinfo response generator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.ITokenRevocationResponseGenerator.ProcessAsync(Duende.IdentityServer.Validation.TokenRevocationRequestValidationResult)">
            <summary>
            Creates the revocation endpoint response and processes the revocation request.
            </summary>
            <param name="validationResult">The userinfo request validation result.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.IUserInfoResponseGenerator">
            <summary>
            Interface for the userinfo response generator
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.ResponseHandling.IUserInfoResponseGenerator.ProcessAsync(Duende.IdentityServer.Validation.UserInfoRequestValidationResult)">
            <summary>
            Creates the response.
            </summary>
            <param name="validationResult">The userinfo request validation result.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.InteractionResponse">
            <summary>
            Indicates interaction outcome for user on authorization endpoint.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.InteractionResponse.IsLogin">
            <summary>
            Gets or sets a value indicating whether the user must login.
            </summary>
            <value>
              <c>true</c> if this instance is login; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.InteractionResponse.IsConsent">
            <summary>
            Gets or sets a value indicating whether the user must consent.
            </summary>
            <value>
            <c>true</c> if this instance is consent; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.InteractionResponse.IsError">
            <summary>
            Gets a value indicating whether the result is an error.
            </summary>
            <value>
              <c>true</c> if this instance is error; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.InteractionResponse.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.InteractionResponse.ErrorDescription">
            <summary>
            Gets or sets the error description.
            </summary>
            <value>
            The error description.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.InteractionResponse.IsRedirect">
            <summary>
            Gets a value indicating whether the user must be redirected to a custom page.
            </summary>
            <value>
            <c>true</c> if this instance is redirect; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.InteractionResponse.RedirectUrl">
            <summary>
            Gets or sets the URL for the custom page.
            </summary>
            <value>
            The redirect URL.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.TokenErrorResponse">
            <summary>
            Models a token error response
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.TokenErrorResponse.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.TokenErrorResponse.ErrorDescription">
            <summary>
            Gets or sets the error description.
            </summary>
            <value>
            The error description.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.TokenErrorResponse.Custom">
            <summary>
            Gets or sets the custom entries.
            </summary>
            <value>
            The custom.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.TokenResponse">
            <summary>
            Models a token response
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.TokenResponse.IdentityToken">
            <summary>
            Gets or sets the identity token.
            </summary>
            <value>
            The identity token.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.TokenResponse.AccessToken">
            <summary>
            Gets or sets the access token.
            </summary>
            <value>
            The access token.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.TokenResponse.AccessTokenLifetime">
            <summary>
            Gets or sets the access token lifetime.
            </summary>
            <value>
            The access token lifetime.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.TokenResponse.RefreshToken">
            <summary>
            Gets or sets the refresh token.
            </summary>
            <value>
            The refresh token.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.TokenResponse.Scope">
            <summary>
            Gets or sets the scope.
            </summary>
            <value>
            The scope.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.TokenResponse.Custom">
            <summary>
            Gets or sets the custom entries.
            </summary>
            <value>
            The custom entries.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.ResponseHandling.TokenRevocationResponse">
            <summary>
            Models a token revocation response
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.TokenRevocationResponse.Success">
            <summary>
            Gets or sets a value indicating whether the token revocation was successful.
            </summary>
            <value>
              <c>true</c> if success; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.TokenRevocationResponse.TokenType">
            <summary>
            Gets or sets the type of the token that was revoked.
            </summary>
            <value>
            The type of the token.
            </value>
        </member>
        <member name="P:Duende.IdentityServer.ResponseHandling.TokenRevocationResponse.Error">
            <summary>
            Gets or sets an error (if present).
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="T:Duende.IdentityServer.Test.TestUser">
            <summary>
            In-memory user object for testing. Not intended for modeling users in production.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Test.TestUser.SubjectId">
            <summary>
            Gets or sets the subject identifier.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Test.TestUser.Username">
            <summary>
            Gets or sets the username.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Test.TestUser.Password">
            <summary>
            Gets or sets the password.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Test.TestUser.ProviderName">
            <summary>
            Gets or sets the provider name.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Test.TestUser.ProviderSubjectId">
            <summary>
            Gets or sets the provider subject identifier.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Test.TestUser.IsActive">
            <summary>
            Gets or sets if the user is active.
            </summary>
        </member>
        <member name="P:Duende.IdentityServer.Test.TestUser.Claims">
            <summary>
            Gets or sets the claims.
            </summary>
        </member>
        <member name="T:Duende.IdentityServer.Test.TestUserProfileService">
            <summary>
            Profile service for test users
            </summary>
            <seealso cref="T:Duende.IdentityServer.Services.IProfileService" />
        </member>
        <member name="F:Duende.IdentityServer.Test.TestUserProfileService.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:Duende.IdentityServer.Test.TestUserProfileService.Users">
            <summary>
            The users
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Test.TestUserProfileService.#ctor(Duende.IdentityServer.Test.TestUserStore,Microsoft.Extensions.Logging.ILogger{Duende.IdentityServer.Test.TestUserProfileService})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Test.TestUserProfileService"/> class.
            </summary>
            <param name="users">The users.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Duende.IdentityServer.Test.TestUserProfileService.GetProfileDataAsync(Duende.IdentityServer.Models.ProfileDataRequestContext)">
            <summary>
            This method is called whenever claims about the user are requested (e.g. during token creation or via the userinfo endpoint)
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Test.TestUserProfileService.IsActiveAsync(Duende.IdentityServer.Models.IsActiveContext)">
            <summary>
            This method gets called whenever identity server needs to determine if the user is valid or active (e.g. if the user's account has been deactivated since they logged in).
            (e.g. during token issuance or validation).
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Test.TestUserResourceOwnerPasswordValidator">
            <summary>
            Resource owner password validator for test users
            </summary>
            <seealso cref="T:Duende.IdentityServer.Validation.IResourceOwnerPasswordValidator" />
        </member>
        <member name="M:Duende.IdentityServer.Test.TestUserResourceOwnerPasswordValidator.#ctor(Duende.IdentityServer.Test.TestUserStore,Microsoft.AspNetCore.Authentication.ISystemClock)">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Test.TestUserResourceOwnerPasswordValidator"/> class.
            </summary>
            <param name="users">The users.</param>
            <param name="clock">The clock.</param>
        </member>
        <member name="M:Duende.IdentityServer.Test.TestUserResourceOwnerPasswordValidator.ValidateAsync(Duende.IdentityServer.Validation.ResourceOwnerPasswordValidationContext)">
            <summary>
            Validates the resource owner password credential
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Duende.IdentityServer.Test.TestUserStore">
            <summary>
            Store for test users
            </summary>
        </member>
        <member name="M:Duende.IdentityServer.Test.TestUserStore.#ctor(System.Collections.Generic.List{Duende.IdentityServer.Test.TestUser})">
            <summary>
            Initializes a new instance of the <see cref="T:Duende.IdentityServer.Test.TestUserStore"/> class.
            </summary>
            <param name="users">The users.</param>
        </member>
        <member name="M:Duende.IdentityServer.Test.TestUserStore.ValidateCredentials(System.String,System.String)">
            <summary>
            Validates the credentials.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Test.TestUserStore.FindBySubjectId(System.String)">
            <summary>
            Finds the user by subject identifier.
            </summary>
            <param name="subjectId">The subject identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Test.TestUserStore.FindByUsername(System.String)">
            <summary>
            Finds the user by username.
            </summary>
            <param name="username">The username.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Test.TestUserStore.FindByExternalProvider(System.String,System.String)">
            <summary>
            Finds the user by external provider.
            </summary>
            <param name="provider">The provider.</param>
            <param name="userId">The user identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Duende.IdentityServer.Test.TestUserStore.AutoProvisionUser(System.String,System.String,System.Collections.Generic.List{System.Security.Claims.Claim})">
            <summary>
            Automatically provisions a user.
            </summary>
            <param name="provider">The provider.</param>
            <param name="userId">The user identifier.</param>
            <param name="claims">The claims.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional">
            <summary>
            Builder extension methods for registering additional services 
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddExtensionGrantValidator``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the extension grant validator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddRedirectUriValidator``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a redirect URI validator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddAppAuthRedirectUriValidator(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a an "AppAuth" (OAuth 2.0 for Native Apps) compliant redirect URI validator (does strict validation but also allows http://127.0.0.1 with random port)
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddResourceOwnerValidator``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the resource owner validator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddProfileService``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the profile service.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddResourceValidator``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a resource validator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddScopeParser``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a scope parser.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddClientStore``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a client store.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddResourceStore``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a resource store.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddDeviceFlowStore``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a device flow store.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddPersistedGrantStore``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a persisted grant store.
            </summary>
            <typeparam name="T">The type of the concrete grant store that is registered in DI.</typeparam>
            <param name="builder">The builder.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddCorsPolicyService``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a CORS policy service.
            </summary>
            <typeparam name="T">The type of the concrete scope store class that is registered in DI.</typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddCorsPolicyCache``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a CORS policy service cache.
            </summary>
            <typeparam name="T">The type of the concrete CORS policy service that is registered in DI.</typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddSecretParser``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the secret parser.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddSecretValidator``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the secret validator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddClientStoreCache``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the client store cache.
            </summary>
            <typeparam name="T">The type of the concrete client store class that is registered in DI.</typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddResourceStoreCache``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the client store cache.
            </summary>
            <typeparam name="T">The type of the concrete scope store class that is registered in DI.</typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddAuthorizeInteractionResponseGenerator``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the authorize interaction response generator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddCustomAuthorizeRequestValidator``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the custom authorize request validator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddCustomTokenRequestValidator``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the custom authorize request validator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddJwtBearerClientAuthentication(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds support for client authentication using JWT bearer assertions.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddClientConfigurationValidator``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a client configuration validator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddMutualTlsSecretValidators(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the X509 secret validators for mutual TLS.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddBackChannelLogoutService``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a custom back-channel logout service.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddBackChannelLogoutHttpClient(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,System.Action{System.Net.Http.HttpClient})">
            <summary>
            Adds configuration for the HttpClient used for back-channel logout notifications.
            </summary>
            <param name="builder">The builder.</param>
            <param name="configureClient">The configruation callback.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddJwtRequestUriHttpClient(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,System.Action{System.Net.Http.HttpClient})">
            <summary>
            Adds configuration for the HttpClient used for JWT request_uri requests.
            </summary>
            <param name="builder">The builder.</param>
            <param name="configureClient">The configruation callback.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddAuthorizationParametersMessageStore``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a custom authorization request parameter store.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsAdditional.AddUserSession``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds a custom user session.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCore">
            <summary>
            Builder extension methods for registering core services
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCore.AddRequiredPlatformServices(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the required platform services.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCore.AddCookieAuthentication(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the default cookie handlers and corresponding configuration
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCore.AddDefaultEndpoints(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the default endpoints.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCore.AddEndpoint``1(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,System.String,Microsoft.AspNetCore.Http.PathString)">
            <summary>
            Adds the endpoint.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <param name="name">The name.</param>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCore.AddCoreServices(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the core services.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCore.AddPluggableServices(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the pluggable services.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCore.AddKeyManagement(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds key management services.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCore.AddValidators(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the validators.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCore.AddResponseGenerators(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the response generators.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCore.AddDefaultSecretParsers(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the default secret parsers.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCore.AddDefaultSecretValidators(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the default secret validators.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCrypto">
            <summary>
            Builder extension methods for registering crypto services
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCrypto.AddSigningCredential(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,Microsoft.IdentityModel.Tokens.SigningCredentials)">
            <summary>
            Sets the signing credential.
            </summary>
            <param name="builder">The builder.</param>
            <param name="credential">The credential.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCrypto.AddSigningCredential(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
            <summary>
            Sets the signing credential.
            </summary>
            <param name="builder">The builder.</param>
            <param name="certificate">The certificate.</param>
            <param name="signingAlgorithm">The signing algorithm (defaults to RS256)</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException">X509 certificate does not have a private key.</exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCrypto.AddSigningCredential(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,System.String,System.Security.Cryptography.X509Certificates.StoreLocation,Duende.IdentityServer.Configuration.NameType,System.String)">
            <summary>
            Sets the signing credential.
            </summary>
            <param name="builder">The builder.</param>
            <param name="name">The name.</param>
            <param name="location">The location.</param>
            <param name="nameType">Name parameter can be either a distinguished name or a thumbprint</param>
            <param name="signingAlgorithm">The signing algorithm (defaults to RS256)</param>
            <exception cref="T:System.InvalidOperationException">certificate: '{name}'</exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCrypto.AddSigningCredential(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,Microsoft.IdentityModel.Tokens.SecurityKey,System.String)">
            <summary>
            Sets the signing credential.
            </summary>
            <param name="builder">The builder.</param>
            <param name="key">The key.</param>
            <param name="signingAlgorithm">The signing algorithm</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCrypto.AddSigningCredential(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,Microsoft.IdentityModel.Tokens.RsaSecurityKey,Duende.IdentityServer.IdentityServerConstants.RsaSigningAlgorithm)">
            <summary>
            Sets an RSA-based signing credential.
            </summary>
            <param name="builder">The builder.</param>
            <param name="key">The RSA key.</param>
            <param name="signingAlgorithm">The signing algorithm</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCrypto.AddSigningCredential(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,Microsoft.IdentityModel.Tokens.ECDsaSecurityKey,Duende.IdentityServer.IdentityServerConstants.ECDsaSigningAlgorithm)">
            <summary>
            Sets an ECDsa-based signing credential.
            </summary>
            <param name="builder">The builder.</param>
            <param name="key">The ECDsa key.</param>
            <param name="signingAlgorithm">The signing algorithm</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCrypto.AddDeveloperSigningCredential(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,System.Boolean,System.String,Duende.IdentityServer.IdentityServerConstants.RsaSigningAlgorithm)">
            <summary>
            Sets the temporary signing credential.
            </summary>
            <param name="builder">The builder.</param>
            <param name="persistKey">Specifies if the temporary key should be persisted to disk.</param>
            <param name="filename">The filename.</param>
            <param name="signingAlgorithm">The signing algorithm (defaults to RS256)</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCrypto.AddValidationKey(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,Duende.IdentityServer.Models.SecurityKeyInfo[])">
            <summary>
            Adds the validation keys.
            </summary>
            <param name="builder">The builder.</param>
            <param name="keys">The keys.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCrypto.AddValidationKey(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,Microsoft.IdentityModel.Tokens.RsaSecurityKey,Duende.IdentityServer.IdentityServerConstants.RsaSigningAlgorithm)">
            <summary>
            Adds an RSA-based validation key.
            </summary>
            <param name="builder">The builder.</param>
            <param name="key">The RSA key</param>
            <param name="signingAlgorithm">The RSA-based signing algorithm</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCrypto.AddValidationKey(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,Microsoft.IdentityModel.Tokens.ECDsaSecurityKey,Duende.IdentityServer.IdentityServerConstants.ECDsaSigningAlgorithm)">
            <summary>
            Adds an ECDSA-based validation key.
            </summary>
            <param name="builder">The builder.</param>
            <param name="key">The ECDSA key</param>
            <param name="signingAlgorithm">The ECDSA-based signing algorithm</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCrypto.AddValidationKey(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
            <summary>
            Adds the validation key.
            </summary>
            <param name="builder">The builder.</param>
            <param name="certificate">The certificate.</param>
            <param name="signingAlgorithm">The signing algorithm</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsCrypto.AddValidationKey(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,System.String,System.Security.Cryptography.X509Certificates.StoreLocation,Duende.IdentityServer.Configuration.NameType,System.String)">
            <summary>
            Adds the validation key from the certificate store.
            </summary>
            <param name="builder">The builder.</param>
            <param name="name">The name.</param>
            <param name="location">The location.</param>
            <param name="nameType">Name parameter can be either a distinguished name or a thumbprint</param>
            <param name="signingAlgorithm">The signing algorithm</param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsInMemory">
            <summary>
            Builder extension methods for registering in-memory services
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsInMemory.AddInMemoryCaching(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the in memory caching.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsInMemory.AddInMemoryIdentityResources(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.IdentityResource})">
            <summary>
            Adds the in memory identity resources.
            </summary>
            <param name="builder">The builder.</param>
            <param name="identityResources">The identity resources.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsInMemory.AddInMemoryIdentityResources(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,Microsoft.Extensions.Configuration.IConfigurationSection)">
            <summary>
            Adds the in memory identity resources.
            </summary>
            <param name="builder">The builder.</param>
            <param name="section">The configuration section containing the configuration data.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsInMemory.AddInMemoryApiResources(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.ApiResource})">
            <summary>
            Adds the in memory API resources.
            </summary>
            <param name="builder">The builder.</param>
            <param name="apiResources">The API resources.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsInMemory.AddInMemoryApiResources(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,Microsoft.Extensions.Configuration.IConfigurationSection)">
            <summary>
            Adds the in memory API resources.
            </summary>
            <param name="builder">The builder.</param>
            <param name="section">The configuration section containing the configuration data.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsInMemory.AddInMemoryApiScopes(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.ApiScope})">
            <summary>
            Adds the in memory API scopes.
            </summary>
            <param name="builder">The builder.</param>
            <param name="apiScopes">The API scopes.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsInMemory.AddInMemoryApiScopes(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,Microsoft.Extensions.Configuration.IConfigurationSection)">
            <summary>
            Adds the in memory scopes.
            </summary>
            <param name="builder">The builder.</param>
            <param name="section">The configuration section containing the configuration data.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsInMemory.AddInMemoryClients(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,System.Collections.Generic.IEnumerable{Duende.IdentityServer.Models.Client})">
            <summary>
            Adds the in memory clients.
            </summary>
            <param name="builder">The builder.</param>
            <param name="clients">The clients.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsInMemory.AddInMemoryClients(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,Microsoft.Extensions.Configuration.IConfigurationSection)">
            <summary>
            Adds the in memory clients.
            </summary>
            <param name="builder">The builder.</param>
            <param name="section">The configuration section containing the configuration data.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensionsInMemory.AddInMemoryPersistedGrants(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder)">
            <summary>
            Adds the in memory stores.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.IdentityServerServiceCollectionExtensions">
            <summary>
            DI extension methods for adding IdentityServer
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerServiceCollectionExtensions.AddIdentityServerBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Creates a builder.
            </summary>
            <param name="services">The services.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerServiceCollectionExtensions.AddIdentityServer(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds IdentityServer.
            </summary>
            <param name="services">The services.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerServiceCollectionExtensions.AddIdentityServer(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Duende.IdentityServer.Configuration.IdentityServerOptions})">
            <summary>
            Adds IdentityServer.
            </summary>
            <param name="services">The services.</param>
            <param name="setupAction">The setup action.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerServiceCollectionExtensions.AddIdentityServer(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds the IdentityServer.
            </summary>
            <param name="services">The services.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerServiceCollectionExtensions.AddOidcStateDataFormatterCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String[])">
            <summary>
            Configures the OpenIdConnect handlers to persist the state parameter into the server-side IDistributedCache.
            </summary>
            <param name="services">The services.</param>
            <param name="schemes">The schemes to configure. If none provided, then all OpenIdConnect schemes will use the cache.</param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder">
            <summary>
            IdentityServer builder Interface
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder.Services">
            <summary>
            Gets the services.
            </summary>
            <value>
            The services.
            </value>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.LocalApiAuthenticationExtensions">
            <summary>
            Extensions for registering the local access token authentication handler
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LocalApiAuthenticationExtensions.AddLocalApiAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.Security.Claims.ClaimsPrincipal,System.Threading.Tasks.Task{System.Security.Claims.ClaimsPrincipal}})">
            <summary>
            Adds support for local APIs
            </summary>
            <param name="services">The service collection</param>
            <param name="transformationFunc">Function to transform the resulting principal</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LocalApiAuthenticationExtensions.AddLocalApi(Microsoft.AspNetCore.Authentication.AuthenticationBuilder)">
            <summary>
            Registers the authentication handler for local APIs.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LocalApiAuthenticationExtensions.AddLocalApi(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.Action{Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationOptions})">
            <summary>
            Registers the authentication handler for local APIs.
            </summary>
            <param name="builder">The builder.</param>
            <param name="configureOptions">The configure options.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LocalApiAuthenticationExtensions.AddLocalApi(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.Action{Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationOptions})">
            <summary>
            Registers the authentication handler for local APIs.
            </summary>
            <param name="builder">The builder.</param>
            <param name="authenticationScheme">The authentication scheme.</param>
            <param name="configureOptions">The configure options.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LocalApiAuthenticationExtensions.AddLocalApi(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.String,System.Action{Duende.IdentityServer.Hosting.LocalApiAuthentication.LocalApiAuthenticationOptions})">
            <summary>
            Registers the authentication handler for local APIs.
            </summary>
            <param name="builder">The builder.</param>
            <param name="authenticationScheme">The authentication scheme.</param>
            <param name="displayName">The display name of this scheme.</param>
            <param name="configureOptions">The configure options.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensions">
            <summary>
            Extension methods for the IdentityServer builder
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServerBuilderExtensions.AddTestUsers(Microsoft.Extensions.DependencyInjection.IIdentityServerBuilder,System.Collections.Generic.List{Duende.IdentityServer.Test.TestUser})">
            <summary>
            Adds test users.
            </summary>
            <param name="builder">The builder.</param>
            <param name="users">The users.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.IdentityServerApplicationBuilderExtensions">
            <summary>
            Pipeline extension methods for adding IdentityServer
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.IdentityServerApplicationBuilderExtensions.UseIdentityServer(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.IdentityServerMiddlewareOptions)">
            <summary>
            Adds IdentityServer to the pipeline.
            </summary>
            <param name="app">The application.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.IdentityServerMiddlewareOptions">
            <summary>
            Options for the IdentityServer middleware
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Builder.IdentityServerMiddlewareOptions.AuthenticationMiddleware">
            <summary>
            Callback to wire up an authentication middleware
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.AuthenticationManagerExtensions">
            <summary>
            Extension methods for signin/out using the IdentityServer authentication scheme.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.AuthenticationManagerExtensions.SignInAsync(Microsoft.AspNetCore.Http.HttpContext,Duende.IdentityServer.IdentityServerUser)">
            <summary>
            Signs the user in.
            </summary>
            <param name="context">The manager.</param>
            <param name="user">The IdentityServer user.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.AuthenticationManagerExtensions.SignInAsync(Microsoft.AspNetCore.Http.HttpContext,Duende.IdentityServer.IdentityServerUser,Microsoft.AspNetCore.Authentication.AuthenticationProperties)">
            <summary>
            Signs the user in.
            </summary>
            <param name="context">The manager.</param>
            <param name="user">The IdentityServer user.</param>
            <param name="properties">The authentication properties.</param>
            <returns></returns>
        </member>
    </members>
</doc>
